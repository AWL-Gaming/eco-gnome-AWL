// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ecocraft.Models;

#nullable disable

namespace ecocraft.Migrations
{
    [DbContext(typeof(EcoCraftDbContext))]
    [Migration("20241022204427_add-price-calculator-fields")]
    partial class addpricecalculatorfields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("CraftingTablePluginModule", b =>
                {
                    b.Property<Guid>("CraftingTableId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PluginModuleId")
                        .HasColumnType("TEXT");

                    b.HasKey("CraftingTableId", "PluginModuleId");

                    b.HasIndex("PluginModuleId");

                    b.ToTable("CraftingTablePluginModule");
                });

            modelBuilder.Entity("ItemTagAssoc", b =>
                {
                    b.Property<Guid>("ItemId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TagId")
                        .HasColumnType("TEXT");

                    b.HasKey("ItemId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ItemTagAssoc");
                });

            modelBuilder.Entity("ecocraft.Models.CraftingTable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("LocalizedNameId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LocalizedNameId");

                    b.HasIndex("ServerId");

                    b.ToTable("CraftingTable", (string)null);
                });

            modelBuilder.Entity("ecocraft.Models.Element", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<float>("DefaultShare")
                        .HasColumnType("REAL");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDynamic")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsReintegrated")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ItemOrTagId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LavishTalent")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Quantity")
                        .HasColumnType("REAL");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SkillId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ItemOrTagId");

                    b.HasIndex("RecipeId");

                    b.HasIndex("SkillId");

                    b.ToTable("Element", (string)null);
                });

            modelBuilder.Entity("ecocraft.Models.ItemOrTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsTag")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("LocalizedNameId")
                        .HasColumnType("TEXT");

                    b.Property<float?>("MaxPrice")
                        .HasColumnType("REAL");

                    b.Property<float?>("MinPrice")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LocalizedNameId");

                    b.HasIndex("ServerId");

                    b.ToTable("ItemOrTag", (string)null);
                });

            modelBuilder.Entity("ecocraft.Models.LocalizedField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ar_sa")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("cs")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("da")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("de")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("el")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("en_US")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("es")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("fr")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("hu")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("it")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ja")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ko")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("nl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("nn")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("pl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("pt_BR")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("pt_PT")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ro")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ru")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("sv")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("tr")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("uk")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("vi")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("zh_Hans")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.ToTable("LocalizedField", (string)null);
                });

            modelBuilder.Entity("ecocraft.Models.PluginModule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("LocalizedNameId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("Percent")
                        .HasColumnType("REAL");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LocalizedNameId");

                    b.HasIndex("ServerId");

                    b.ToTable("PluginModule", (string)null);
                });

            modelBuilder.Entity("ecocraft.Models.Recipe", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<float>("CraftMinutes")
                        .HasColumnType("REAL");

                    b.Property<Guid>("CraftingTableId")
                        .HasColumnType("TEXT");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsBlueprint")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Labor")
                        .HasColumnType("REAL");

                    b.Property<Guid?>("LocalizedNameId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SkillId")
                        .HasColumnType("TEXT");

                    b.Property<long>("SkillLevel")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CraftingTableId");

                    b.HasIndex("ServerId");

                    b.HasIndex("SkillId");

                    b.ToTable("Recipe", (string)null);
                });

            modelBuilder.Entity("ecocraft.Models.Server", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<string>("JoinCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Server", (string)null);
                });

            modelBuilder.Entity("ecocraft.Models.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("LaborReducePercent")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float?>("LavishTalentValue")
                        .HasColumnType("REAL");

                    b.Property<Guid?>("LocalizedNameId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Profession")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LocalizedNameId");

                    b.HasIndex("ServerId");

                    b.ToTable("Skill", (string)null);
                });

            modelBuilder.Entity("ecocraft.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Pseudo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SecretId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("ecocraft.Models.UserCraftingTable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CraftingTableId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PluginModuleId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserServerId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CraftingTableId");

                    b.HasIndex("PluginModuleId");

                    b.HasIndex("UserServerId");

                    b.ToTable("UserCraftingTable", (string)null);
                });

            modelBuilder.Entity("ecocraft.Models.UserElement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ElementId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsReintegrated")
                        .HasColumnType("INTEGER");

                    b.Property<float?>("MarginPrice")
                        .HasColumnType("REAL");

                    b.Property<float?>("Price")
                        .HasColumnType("REAL");

                    b.Property<float>("Share")
                        .HasColumnType("REAL");

                    b.Property<Guid>("UserServerId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ElementId");

                    b.HasIndex("UserServerId");

                    b.ToTable("UserElement", (string)null);
                });

            modelBuilder.Entity("ecocraft.Models.UserPrice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ItemOrTagId")
                        .HasColumnType("TEXT");

                    b.Property<float?>("MarginPrice")
                        .HasColumnType("REAL");

                    b.Property<bool>("OverrideIsBought")
                        .HasColumnType("INTEGER");

                    b.Property<float?>("Price")
                        .HasColumnType("REAL");

                    b.Property<Guid?>("PrimaryUserElementId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PrimaryUserPriceId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserServerId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ItemOrTagId");

                    b.HasIndex("PrimaryUserElementId");

                    b.HasIndex("PrimaryUserPriceId");

                    b.HasIndex("UserServerId");

                    b.ToTable("UserPrice", (string)null);
                });

            modelBuilder.Entity("ecocraft.Models.UserRecipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserServerId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.HasIndex("UserServerId");

                    b.ToTable("UserRecipe", (string)null);
                });

            modelBuilder.Entity("ecocraft.Models.UserServer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Pseudo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.HasIndex("UserId");

                    b.ToTable("UserServer", (string)null);
                });

            modelBuilder.Entity("ecocraft.Models.UserSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<float>("CalorieCost")
                        .HasColumnType("REAL");

                    b.Property<float>("Margin")
                        .HasColumnType("REAL");

                    b.Property<float>("TimeFee")
                        .HasColumnType("REAL");

                    b.Property<Guid>("UserServerId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserServerId");

                    b.ToTable("UserSetting", (string)null);
                });

            modelBuilder.Entity("ecocraft.Models.UserSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasLavishTalent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("SkillId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserServerId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.HasIndex("UserServerId");

                    b.ToTable("UserSkill", (string)null);
                });

            modelBuilder.Entity("CraftingTablePluginModule", b =>
                {
                    b.HasOne("ecocraft.Models.CraftingTable", null)
                        .WithMany()
                        .HasForeignKey("CraftingTableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ecocraft.Models.PluginModule", null)
                        .WithMany()
                        .HasForeignKey("PluginModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ItemTagAssoc", b =>
                {
                    b.HasOne("ecocraft.Models.ItemOrTag", null)
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ecocraft.Models.ItemOrTag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ecocraft.Models.CraftingTable", b =>
                {
                    b.HasOne("ecocraft.Models.LocalizedField", "LocalizedName")
                        .WithMany("CraftingTables")
                        .HasForeignKey("LocalizedNameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ecocraft.Models.Server", "Server")
                        .WithMany("CraftingTables")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LocalizedName");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("ecocraft.Models.Element", b =>
                {
                    b.HasOne("ecocraft.Models.ItemOrTag", "ItemOrTag")
                        .WithMany("Elements")
                        .HasForeignKey("ItemOrTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ecocraft.Models.Recipe", "Recipe")
                        .WithMany("Elements")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ecocraft.Models.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ItemOrTag");

                    b.Navigation("Recipe");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("ecocraft.Models.ItemOrTag", b =>
                {
                    b.HasOne("ecocraft.Models.LocalizedField", "LocalizedName")
                        .WithMany("ItemOrTags")
                        .HasForeignKey("LocalizedNameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ecocraft.Models.Server", "Server")
                        .WithMany("ItemOrTags")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LocalizedName");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("ecocraft.Models.LocalizedField", b =>
                {
                    b.HasOne("ecocraft.Models.Server", "Server")
                        .WithMany()
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("ecocraft.Models.PluginModule", b =>
                {
                    b.HasOne("ecocraft.Models.LocalizedField", "LocalizedName")
                        .WithMany("PluginModules")
                        .HasForeignKey("LocalizedNameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ecocraft.Models.Server", "Server")
                        .WithMany("PluginModules")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LocalizedName");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("ecocraft.Models.Recipe", b =>
                {
                    b.HasOne("ecocraft.Models.CraftingTable", "CraftingTable")
                        .WithMany("Recipes")
                        .HasForeignKey("CraftingTableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ecocraft.Models.LocalizedField", "LocalizedName")
                        .WithMany("Recipes")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ecocraft.Models.Server", "Server")
                        .WithMany("Recipes")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ecocraft.Models.Skill", "Skill")
                        .WithMany("Recipes")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CraftingTable");

                    b.Navigation("LocalizedName");

                    b.Navigation("Server");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("ecocraft.Models.Skill", b =>
                {
                    b.HasOne("ecocraft.Models.LocalizedField", "LocalizedName")
                        .WithMany("Skills")
                        .HasForeignKey("LocalizedNameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ecocraft.Models.Server", "Server")
                        .WithMany("Skills")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LocalizedName");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("ecocraft.Models.UserCraftingTable", b =>
                {
                    b.HasOne("ecocraft.Models.CraftingTable", "CraftingTable")
                        .WithMany("UserCraftingTables")
                        .HasForeignKey("CraftingTableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ecocraft.Models.PluginModule", "PluginModule")
                        .WithMany()
                        .HasForeignKey("PluginModuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ecocraft.Models.UserServer", "UserServer")
                        .WithMany("UserCraftingTables")
                        .HasForeignKey("UserServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CraftingTable");

                    b.Navigation("PluginModule");

                    b.Navigation("UserServer");
                });

            modelBuilder.Entity("ecocraft.Models.UserElement", b =>
                {
                    b.HasOne("ecocraft.Models.Element", "Element")
                        .WithMany("UserElements")
                        .HasForeignKey("ElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ecocraft.Models.UserServer", "UserServer")
                        .WithMany("UserElements")
                        .HasForeignKey("UserServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Element");

                    b.Navigation("UserServer");
                });

            modelBuilder.Entity("ecocraft.Models.UserPrice", b =>
                {
                    b.HasOne("ecocraft.Models.ItemOrTag", "ItemOrTag")
                        .WithMany("UserPrices")
                        .HasForeignKey("ItemOrTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ecocraft.Models.UserElement", "PrimaryUserElement")
                        .WithMany()
                        .HasForeignKey("PrimaryUserElementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ecocraft.Models.UserPrice", "PrimaryUserPrice")
                        .WithMany()
                        .HasForeignKey("PrimaryUserPriceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ecocraft.Models.UserServer", "UserServer")
                        .WithMany("UserPrices")
                        .HasForeignKey("UserServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemOrTag");

                    b.Navigation("PrimaryUserElement");

                    b.Navigation("PrimaryUserPrice");

                    b.Navigation("UserServer");
                });

            modelBuilder.Entity("ecocraft.Models.UserRecipe", b =>
                {
                    b.HasOne("ecocraft.Models.Recipe", "Recipe")
                        .WithMany("UserRecipes")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ecocraft.Models.UserServer", "UserServer")
                        .WithMany("UserRecipes")
                        .HasForeignKey("UserServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");

                    b.Navigation("UserServer");
                });

            modelBuilder.Entity("ecocraft.Models.UserServer", b =>
                {
                    b.HasOne("ecocraft.Models.Server", "Server")
                        .WithMany("UserServers")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ecocraft.Models.User", "User")
                        .WithMany("UserServers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ecocraft.Models.UserSetting", b =>
                {
                    b.HasOne("ecocraft.Models.UserServer", "UserServer")
                        .WithMany("UserSettings")
                        .HasForeignKey("UserServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserServer");
                });

            modelBuilder.Entity("ecocraft.Models.UserSkill", b =>
                {
                    b.HasOne("ecocraft.Models.Skill", "Skill")
                        .WithMany("UserSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ecocraft.Models.UserServer", "UserServer")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("UserServer");
                });

            modelBuilder.Entity("ecocraft.Models.CraftingTable", b =>
                {
                    b.Navigation("Recipes");

                    b.Navigation("UserCraftingTables");
                });

            modelBuilder.Entity("ecocraft.Models.Element", b =>
                {
                    b.Navigation("UserElements");
                });

            modelBuilder.Entity("ecocraft.Models.ItemOrTag", b =>
                {
                    b.Navigation("Elements");

                    b.Navigation("UserPrices");
                });

            modelBuilder.Entity("ecocraft.Models.LocalizedField", b =>
                {
                    b.Navigation("CraftingTables");

                    b.Navigation("ItemOrTags");

                    b.Navigation("PluginModules");

                    b.Navigation("Recipes");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("ecocraft.Models.Recipe", b =>
                {
                    b.Navigation("Elements");

                    b.Navigation("UserRecipes");
                });

            modelBuilder.Entity("ecocraft.Models.Server", b =>
                {
                    b.Navigation("CraftingTables");

                    b.Navigation("ItemOrTags");

                    b.Navigation("PluginModules");

                    b.Navigation("Recipes");

                    b.Navigation("Skills");

                    b.Navigation("UserServers");
                });

            modelBuilder.Entity("ecocraft.Models.Skill", b =>
                {
                    b.Navigation("Recipes");

                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("ecocraft.Models.User", b =>
                {
                    b.Navigation("UserServers");
                });

            modelBuilder.Entity("ecocraft.Models.UserServer", b =>
                {
                    b.Navigation("UserCraftingTables");

                    b.Navigation("UserElements");

                    b.Navigation("UserPrices");

                    b.Navigation("UserRecipes");

                    b.Navigation("UserSettings");

                    b.Navigation("UserSkills");
                });
#pragma warning restore 612, 618
        }
    }
}
