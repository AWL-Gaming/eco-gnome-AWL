// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ecocraft.Migrations
{
    [DbContext(typeof(EcoCraftDbContext))]
    [Migration("20240919222140_update-models")]
    partial class updatemodels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("ecocraft.Models.CraftingTable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.ToTable("CraftingTables");
                });

            modelBuilder.Entity("ecocraft.Models.CraftingTablePluginModule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CraftingTableId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PluginModuleId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CraftingTableId");

                    b.HasIndex("PluginModuleId");

                    b.HasIndex("ServerId");

                    b.ToTable("CraftingTablePluginModules");
                });

            modelBuilder.Entity("ecocraft.Models.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ItemOrTagId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ItemOrTagId1")
                        .HasColumnType("TEXT");

                    b.Property<float>("Quantity")
                        .HasColumnType("REAL");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ItemOrTagId");

                    b.HasIndex("ItemOrTagId1");

                    b.HasIndex("RecipeId");

                    b.HasIndex("ServerId");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("ecocraft.Models.ItemOrTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<float>("MaxPrice")
                        .HasColumnType("REAL");

                    b.Property<float>("MinPrice")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.ToTable("ItemOrTags");

                    b.HasDiscriminator().HasValue("ItemOrTag");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ecocraft.Models.ItemTagAssoc", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TagId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("ServerId");

                    b.HasIndex("TagId");

                    b.ToTable("ItemTagAssocs");
                });

            modelBuilder.Entity("ecocraft.Models.PluginModule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("Percent")
                        .HasColumnType("REAL");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.ToTable("PluginModules");
                });

            modelBuilder.Entity("ecocraft.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ItemOrTagId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ItemOrTagId1")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LavishTalent")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Quantity")
                        .HasColumnType("REAL");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ItemOrTagId");

                    b.HasIndex("ItemOrTagId1");

                    b.HasIndex("RecipeId");

                    b.HasIndex("ServerId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ecocraft.Models.Recipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<float>("CraftMinutes")
                        .HasColumnType("REAL");

                    b.Property<Guid>("CraftingTableId")
                        .HasColumnType("TEXT");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsBlueprint")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Labor")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RequiredSkillLevel")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CraftingTableId");

                    b.HasIndex("ServerId");

                    b.HasIndex("SkillId");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("ecocraft.Models.Server", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SecretId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("ecocraft.Models.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("ecocraft.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Pseudo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SecretId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ecocraft.Models.UserCraftingTable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CraftingTableId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PluginModuleId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CraftingTableId");

                    b.HasIndex("PluginModuleId");

                    b.HasIndex("ServerId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCraftingTables");
                });

            modelBuilder.Entity("ecocraft.Models.UserPrice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ItemOrTagId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ItemOrTagId1")
                        .HasColumnType("TEXT");

                    b.Property<float>("Price")
                        .HasColumnType("REAL");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ItemOrTagId");

                    b.HasIndex("ItemOrTagId1");

                    b.HasIndex("ServerId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPrices");
                });

            modelBuilder.Entity("ecocraft.Models.UserProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("TEXT");

                    b.Property<float>("Share")
                        .HasColumnType("REAL");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ServerId");

                    b.HasIndex("UserId");

                    b.ToTable("UserProducts");
                });

            modelBuilder.Entity("ecocraft.Models.UserServer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.HasIndex("UserId");

                    b.ToTable("UserServers");
                });

            modelBuilder.Entity("ecocraft.Models.UserSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<float>("CalorieCost")
                        .HasColumnType("REAL");

                    b.Property<float>("Margin")
                        .HasColumnType("REAL");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("TEXT");

                    b.Property<float>("TimeFee")
                        .HasColumnType("REAL");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("ecocraft.Models.UserSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasLavishTalent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.HasIndex("SkillId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("ecocraft.Models.Item", b =>
                {
                    b.HasBaseType("ecocraft.Models.ItemOrTag");

                    b.Property<Guid?>("ItemOrTagId")
                        .HasColumnType("TEXT");

                    b.HasIndex("ItemOrTagId");

                    b.HasDiscriminator().HasValue("Item");
                });

            modelBuilder.Entity("ecocraft.Models.Tag", b =>
                {
                    b.HasBaseType("ecocraft.Models.ItemOrTag");

                    b.Property<Guid?>("ItemOrTagId")
                        .HasColumnType("TEXT");

                    b.HasIndex("ItemOrTagId");

                    b.ToTable("ItemOrTags", t =>
                        {
                            t.Property("ItemOrTagId")
                                .HasColumnName("Tag_ItemOrTagId");
                        });

                    b.HasDiscriminator().HasValue("Tag");
                });

            modelBuilder.Entity("ecocraft.Models.CraftingTable", b =>
                {
                    b.HasOne("ecocraft.Models.Server", "Server")
                        .WithMany("CraftingTables")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("ecocraft.Models.CraftingTablePluginModule", b =>
                {
                    b.HasOne("ecocraft.Models.CraftingTable", "CraftingTable")
                        .WithMany("CraftingTablePluginModules")
                        .HasForeignKey("CraftingTableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ecocraft.Models.PluginModule", "PluginModule")
                        .WithMany("CraftingTablePluginModules")
                        .HasForeignKey("PluginModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ecocraft.Models.Server", "Server")
                        .WithMany("CraftingTablePluginModules")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CraftingTable");

                    b.Navigation("PluginModule");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("ecocraft.Models.Ingredient", b =>
                {
                    b.HasOne("ecocraft.Models.ItemOrTag", null)
                        .WithMany("Ingredients")
                        .HasForeignKey("ItemOrTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ecocraft.Models.ItemOrTag", "ItemOrTag")
                        .WithMany()
                        .HasForeignKey("ItemOrTagId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ecocraft.Models.Recipe", "Recipe")
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ecocraft.Models.Server", "Server")
                        .WithMany("Ingredients")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemOrTag");

                    b.Navigation("Recipe");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("ecocraft.Models.ItemOrTag", b =>
                {
                    b.HasOne("ecocraft.Models.Server", "Server")
                        .WithMany("ItemOrTags")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("ecocraft.Models.ItemTagAssoc", b =>
                {
                    b.HasOne("ecocraft.Models.Item", "Item")
                        .WithMany("ItemTagAssocs")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ecocraft.Models.Server", "Server")
                        .WithMany("ItemTagAssocs")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ecocraft.Models.Tag", "Tag")
                        .WithMany("ItemTagAssocs")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Server");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("ecocraft.Models.PluginModule", b =>
                {
                    b.HasOne("ecocraft.Models.Server", "Server")
                        .WithMany("PluginModules")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("ecocraft.Models.Product", b =>
                {
                    b.HasOne("ecocraft.Models.ItemOrTag", null)
                        .WithMany("Products")
                        .HasForeignKey("ItemOrTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ecocraft.Models.ItemOrTag", "ItemOrTag")
                        .WithMany()
                        .HasForeignKey("ItemOrTagId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ecocraft.Models.Recipe", "Recipe")
                        .WithMany("Products")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ecocraft.Models.Server", "Server")
                        .WithMany("Products")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemOrTag");

                    b.Navigation("Recipe");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("ecocraft.Models.Recipe", b =>
                {
                    b.HasOne("ecocraft.Models.CraftingTable", "CraftingTable")
                        .WithMany("Recipes")
                        .HasForeignKey("CraftingTableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ecocraft.Models.Server", "Server")
                        .WithMany("Recipes")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ecocraft.Models.Skill", "Skill")
                        .WithMany("Recipes")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CraftingTable");

                    b.Navigation("Server");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("ecocraft.Models.Skill", b =>
                {
                    b.HasOne("ecocraft.Models.Server", "Server")
                        .WithMany("Skills")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("ecocraft.Models.UserCraftingTable", b =>
                {
                    b.HasOne("ecocraft.Models.CraftingTable", "CraftingTable")
                        .WithMany("UserCraftingTables")
                        .HasForeignKey("CraftingTableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ecocraft.Models.PluginModule", "PluginModule")
                        .WithMany("UserCraftingTables")
                        .HasForeignKey("PluginModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ecocraft.Models.Server", "Server")
                        .WithMany()
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ecocraft.Models.User", "User")
                        .WithMany("UserCraftingTables")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CraftingTable");

                    b.Navigation("PluginModule");

                    b.Navigation("Server");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ecocraft.Models.UserPrice", b =>
                {
                    b.HasOne("ecocraft.Models.ItemOrTag", null)
                        .WithMany("UserPrices")
                        .HasForeignKey("ItemOrTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ecocraft.Models.ItemOrTag", "ItemOrTag")
                        .WithMany()
                        .HasForeignKey("ItemOrTagId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ecocraft.Models.Server", "Server")
                        .WithMany("UserPrices")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ecocraft.Models.User", "User")
                        .WithMany("UserPrices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemOrTag");

                    b.Navigation("Server");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ecocraft.Models.UserProduct", b =>
                {
                    b.HasOne("ecocraft.Models.Product", "Product")
                        .WithMany("UserProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ecocraft.Models.Server", "Server")
                        .WithMany()
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ecocraft.Models.User", "User")
                        .WithMany("UserProducts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Server");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ecocraft.Models.UserServer", b =>
                {
                    b.HasOne("ecocraft.Models.Server", "Server")
                        .WithMany("UserServers")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ecocraft.Models.User", "User")
                        .WithMany("UserServers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ecocraft.Models.UserSetting", b =>
                {
                    b.HasOne("ecocraft.Models.Server", "Server")
                        .WithMany("UserSettings")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ecocraft.Models.User", "User")
                        .WithMany("UserSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ecocraft.Models.UserSkill", b =>
                {
                    b.HasOne("ecocraft.Models.Server", "Server")
                        .WithMany()
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ecocraft.Models.Skill", "Skill")
                        .WithMany("UserSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ecocraft.Models.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ecocraft.Models.Item", b =>
                {
                    b.HasOne("ecocraft.Models.ItemOrTag", null)
                        .WithMany("Items")
                        .HasForeignKey("ItemOrTagId");
                });

            modelBuilder.Entity("ecocraft.Models.Tag", b =>
                {
                    b.HasOne("ecocraft.Models.ItemOrTag", null)
                        .WithMany("Tags")
                        .HasForeignKey("ItemOrTagId");
                });

            modelBuilder.Entity("ecocraft.Models.CraftingTable", b =>
                {
                    b.Navigation("CraftingTablePluginModules");

                    b.Navigation("Recipes");

                    b.Navigation("UserCraftingTables");
                });

            modelBuilder.Entity("ecocraft.Models.ItemOrTag", b =>
                {
                    b.Navigation("Ingredients");

                    b.Navigation("Items");

                    b.Navigation("Products");

                    b.Navigation("Tags");

                    b.Navigation("UserPrices");
                });

            modelBuilder.Entity("ecocraft.Models.PluginModule", b =>
                {
                    b.Navigation("CraftingTablePluginModules");

                    b.Navigation("UserCraftingTables");
                });

            modelBuilder.Entity("ecocraft.Models.Product", b =>
                {
                    b.Navigation("UserProducts");
                });

            modelBuilder.Entity("ecocraft.Models.Recipe", b =>
                {
                    b.Navigation("Ingredients");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("ecocraft.Models.Server", b =>
                {
                    b.Navigation("CraftingTablePluginModules");

                    b.Navigation("CraftingTables");

                    b.Navigation("Ingredients");

                    b.Navigation("ItemOrTags");

                    b.Navigation("ItemTagAssocs");

                    b.Navigation("PluginModules");

                    b.Navigation("Products");

                    b.Navigation("Recipes");

                    b.Navigation("Skills");

                    b.Navigation("UserPrices");

                    b.Navigation("UserServers");

                    b.Navigation("UserSettings");
                });

            modelBuilder.Entity("ecocraft.Models.Skill", b =>
                {
                    b.Navigation("Recipes");

                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("ecocraft.Models.User", b =>
                {
                    b.Navigation("UserCraftingTables");

                    b.Navigation("UserPrices");

                    b.Navigation("UserProducts");

                    b.Navigation("UserServers");

                    b.Navigation("UserSettings");

                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("ecocraft.Models.Item", b =>
                {
                    b.Navigation("ItemTagAssocs");
                });

            modelBuilder.Entity("ecocraft.Models.Tag", b =>
                {
                    b.Navigation("ItemTagAssocs");
                });
#pragma warning restore 612, 618
        }
    }
}
