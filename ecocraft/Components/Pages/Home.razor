@page "/"
@using Microsoft.EntityFrameworkCore
@using System.Text.Json
@using ecocraft.Extensions
@using ecocraft.Models
@using ecocraft.Services
@using ecocraft.Services.ImportData
@inject EcoCraftDbContext DbContext
@inject UserSkillService UserSkillService
@inject UserService UserService
@inject SkillService SkillService
@inject CraftingTableService CraftingTableService
@inject UserCraftingTableService UserCraftingTableService
@inject RecipeService RecipeService
@inject PluginModuleService PluginModuleService
@inject ServerService ServerService
@inject CraftingTablePluginModuleService CraftingTablePluginModuleService

<PageTitle>Eco Calc</PageTitle>

<MudContainer>

	<MudGrid>
		<!-- Première Colonne -->
		<MudItem sm="4" Class="border-solid border-2 mud-border-primary pa-4">

			<MudFileUpload T="IBrowserFile" Context="fileInput" FilesChanged="UploadFiles">
				<ButtonTemplate>
					<MudButton HtmlTag="label"
							   Variant="Variant.Filled"
							   Color="Color.Primary"
							   StartIcon="@Icons.Material.Filled.CloudUpload"
							   for="@fileInput">
						Upload Files
					</MudButton>
				</ButtonTemplate>
			</MudFileUpload>

			<MudSelect T="Skill" Text="Choisissez vos compétences" SelectedValues=selectedSkills Label="Choisissez vos compétences" MultiSelection="true" Dense="true" Variant="Variant.Outlined" SelectedValuesChanged="OnSelectedSkillsChanged">
				@foreach (var skill in skills)
				{
					<MudSelectItem T="Skill" Value="@skill">@skill.Name</MudSelectItem>
				}
			</MudSelect>

			<MudTable Items="userSkills" Dense="true">
				<HeaderContent>
					<MudTh>Name</MudTh>
					<MudTh>Niveau</MudTh>
					<MudTh></MudTh>
				</HeaderContent>
				<RowTemplate>
					<MudTd>@context.Skill.Name</MudTd>
						<MudTd>
							<MudNumericField HideSpinButtons="true" T="int" Value=@context.Level Variant="Variant.Text" Min="0" Max="7" Style="width: 24px;" Immediate="true" ValueChanged="(int newValue) => OnLevelChanged(context,newValue)" />
						</MudTd>
						<MudTd>
							<MudIconButton Icon="@Icons.Material.Filled.Clear" aria-label="delete" Size="Size.Small"></MudIconButton>
						</MudTd>
					</RowTemplate>
				</MudTable>

				<MudDivider DividerType="DividerType.FullWidth" Class="my-6" />

				<MudSelect T="CraftingTable" Text="Choisissez une table..." SelectedValues=selectedCraftingTables Label="Choisissez une table..." MultiSelection="true" Dense="true" Variant="Variant.Outlined" SelectedValuesChanged="OnSelectedCraftingTablesChanged">
					@foreach (var table in tables)
				{
					<MudSelectItem T="CraftingTable" Value="@table">@table.Name</MudSelectItem>
				}
				</MudSelect>

			  <MudTable Items="userCraftingTables" Dense="true">
				<HeaderContent>
					<MudTh>Name</MudTh>
					<MudTh>Upgrade</MudTh>
					<MudTh></MudTh>
				</HeaderContent>
				<RowTemplate>
					<MudTd>@context.CraftingTable.Name</MudTd>
						 <MudTd>
							<MudSelect T="PluginModule" Text="Choisissez un upgrade" Value="context.PluginModule" Label="Choisissez un upgrade" Dense="true" Variant="Variant.Outlined" ValueChanged="(PluginModule newPluginModule) => OnSelectedPluginModuleChanged(context, newPluginModule)">
								@foreach (var craftingTablePluginModule in context.CraftingTable.CraftingTablePluginModules)
							{
								<MudSelectItem T="PluginModule" Value="@craftingTablePluginModule.PluginModule">@craftingTablePluginModule.PluginModule.Name</MudSelectItem>
							}
						</MudSelect> 
					</MudTd>
					<MudTd>
						<MudIconButton Icon="@Icons.Material.Filled.Clear" aria-label="delete" Size="Size.Small"></MudIconButton>
					</MudTd>
				</RowTemplate>
			</MudTable> 
 		</MudItem>

		<!-- Deuxième Colonne -->
		<MudItem sm="4" Class="border-solid border-2 mud-border-primary pa-4">

			<MudSelect T="User" Text="Choisissez un utilisateur" Label="Choisissez un utilisateur" @bind-Value="user" Dense="true" Variant="Variant.Outlined" SelectedValuesChanged="OnSelectedUserChanged">
				@foreach (var user in users)
				{
					<MudSelectItem T="User" Value="@user">@user.Pseudo</MudSelectItem>
				}
			</MudSelect>
			@* <MudStack>
				<MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
					<MudText>Price per 1000 calories</MudText>
					<div>
						<MudNumericField OnBlur="UpdateUser" T="decimal" @bind-Value="user.CalorieCost" HideSpinButtons="true" Variant="Variant.Outlined" Style="width: 40px;" />
					</div>
				</MudStack>
				<MudStack Justify="Justify.SpaceBetween" Row="true" Spacing="3" AlignItems="AlignItems.Center">
					<MudText>Profit percentage</MudText>
					<div>
						<MudNumericField OnBlur="UpdateUser" T="decimal" @bind-Value="user.ProfitMargin" HideSpinButtons="true" Variant="Variant.Text" Style="width: 40px;" />
					</div>
				</MudStack>
			</MudStack> *@

		</MudItem>

		<!-- Troisième Colonne -->
		<MudItem xs="12" sm="4" Class="border-solid border-2 mud-border-primary pa-4">
			<MudSelect T="Recipe" Text="Choisissez vos recettes" SelectedValues=selectedRecipes Label="Choisissez vos recettes" MultiSelection="true" Dense="true" Variant="Variant.Outlined" SelectedValuesChanged="OnSelectedRecipesChanged">
				@foreach (var recipe in recipes)
				{
					<MudSelectItem T="Recipe" Value="@recipe">@recipe.Name</MudSelectItem>
				}
			</MudSelect>

			<MudTable Items="userRecipes" Dense="true">
				<HeaderContent>
					<MudTh>Name</MudTh>
					<MudTh>Price</MudTh>
					<MudTh>Hide</MudTh>
				</HeaderContent>
				<RowTemplate>
					<MudTd>@context.Name</MudTd>
					<MudTd>
					</MudTd>
					<MudTd>
						<MudIconButton Icon="@Icons.Material.Filled.Clear" aria-label="delete" Size="Size.Small"></MudIconButton>
					</MudTd>
			</RowTemplate>
		</MudTable>
		</MudItem>

	</MudGrid>




	</MudContainer>

	@code {

	private List<Skill> skills;
	private List<CraftingTable> tables;
	private List<Recipe> recipes;
	private List<User> users;
	private List<PluginModule> pluginModules;

	private User user = new User();

	private IEnumerable<Skill> selectedSkills { get; set; } = new HashSet<Skill>();
	private IEnumerable<Recipe> selectedRecipes { get; set; } = new HashSet<Recipe>();
	private IEnumerable<UserSkill> userSkills { get; set; } = new HashSet<UserSkill>();

	private IEnumerable<CraftingTable> selectedCraftingTables { get; set; } = new HashSet<CraftingTable>();
	private IEnumerable<UserCraftingTable> userCraftingTables { get; set; } = new HashSet<UserCraftingTable>();

	private IEnumerable<Recipe> userRecipes { get; set; } = new HashSet<Recipe>();

	private int SkillsValue { get; set; }

	private Server server = new Server();

	protected override async Task OnInitializedAsync()
	{
		server = await ServerService.GetFirstAsync();
		// Charger toutes les compétences disponibles
		skills = await SkillService.GetAllAsync();

		tables = await CraftingTableService.GetAllAsync();

		users = await UserService.GetAllAsync();

		recipes = await RecipeService.GetAllAsync();

		pluginModules = await PluginModuleService.GetAllAsync();
	}

	IList<IBrowserFile> _files = new List<IBrowserFile>();

	private async Task UploadFiles(IBrowserFile file)
	{
		//var file = e.File;
		// On vérifie le type MIME pour s'assurer qu'il s'agit bien d'un fichier JSON
		if (file != null && file.ContentType == "application/json")
		{
			// On lit le fichier JSON en mémoire
			using var stream = file.OpenReadStream(2000000);
			using var memoryStream = new MemoryStream();
			await stream.CopyToAsync(memoryStream);

			memoryStream.Position = 0; // Repositionner au début pour la lecture
			using var reader = new StreamReader(memoryStream);
			string jsonContent = await reader.ReadToEndAsync();

			try
			{
				// Désérialiser le contenu JSON dans un objet C#
				ImportDataDto ImportedData = JsonSerializer.Deserialize<ImportDataDto>(jsonContent);

				ImportSkills(ImportedData.skills);

				ImportPluginModules(ImportedData.pluginModules);

				ImportCraftingTables(ImportedData.craftingTables);

				ImportRecipes(ImportedData.recipes);

			}
			catch (JsonException ex)
			{
				Console.WriteLine($"Erreur lors de la désérialisation JSON: {ex.Message}");
			}
		}
	}

	public async void ImportSkills(List<SkillDto> SkillDtos)
	{
		var namesToCheck = SkillDtos.Select(dto => dto.Name).ToList();

		// Récupère les noms qui existent déjà dans la base
		var existingNames = skills
			.Where(ct => namesToCheck.Contains(ct.Name))
			.Select(ct => ct.Name);

		// Ajouter uniquement les objets qui n'existent pas
		foreach (var dto in SkillDtos)
		{
			if (!existingNames.Contains(dto.Name))
			{
				var newSkill = new Skill
					{
						Name = dto.Name,
						Server = server,
					};

				skills.Add(newSkill);
				await SkillService.AddAsync(newSkill);
			}
		}
	}


	public async void ImportPluginModules(List<PluginModuleDto> PluginModuleDtos)
	{
		var namesToCheck = PluginModuleDtos.Select(dto => dto.Name).ToList();

		// Récupère les noms qui existent déjà dans la base
		var existingNames = pluginModules
			.Where(ct => namesToCheck.Contains(ct.Name))
			.Select(ct => ct.Name);

		// Ajouter uniquement les objets qui n'existent pas
		foreach (var dto in PluginModuleDtos)
		{
			if (!existingNames.Contains(dto.Name))
			{
				var newPluginModule = new PluginModule
					{
						Name = dto.Name,
						Percent = dto.Percent,
						Server = server,
					};

				pluginModules.Add(newPluginModule);
				await PluginModuleService.AddAsync(newPluginModule);
			}
		}

		var existinguserSkill = pluginModules.FirstOrDefault(pm => pm.Name.Contains("NoUpgrade") && pm.Server.Id == server.Id);
		if (existinguserSkill == null)
			await PluginModuleService.AddAsync(new PluginModule{Name = "NoUpgrade", Percent = 0.0, Server = server});

	}


	public async void ImportCraftingTables(List<CraftingTableDto> craftingTableDtos)
	{
		var namesToCheck = craftingTableDtos.Select(dto => dto.Name).ToList();

		// Récupère les noms qui existent déjà dans la base
		var existingNames = tables
			.Where(ct => namesToCheck.Contains(ct.Name))
			.Select(ct => ct.Name);

		// Ajouter uniquement les objets qui n'existent pas
		foreach (var dto in craftingTableDtos)
		{
			if (!existingNames.Contains(dto.Name))
			{
				var newCraftingTable = new CraftingTable
					{
						Name = dto.Name,
						Server = server,
						// Autres propriétés...
					};			

				tables.Add(newCraftingTable);
				await CraftingTableService.AddAsync(newCraftingTable);

				foreach (var module in dto.CraftingTablePluginModules)
				{
					PluginModule plugin = pluginModules.FirstOrDefault(pm => pm.Name == module);
					CraftingTablePluginModule ctpm = new CraftingTablePluginModule { CraftingTable = newCraftingTable, PluginModule = plugin, Server = server };
					await CraftingTablePluginModuleService.AddAsync(ctpm);
				}




			}
		}
	}

	public async void ImportRecipes(List<RecipeDto> RecipeDtos)
	{
		var namesToCheck = RecipeDtos.Select(dto => dto.Name).ToList();

		// Récupère les noms qui existent déjà dans la base
		var existingNames = recipes
			.Where(ct => namesToCheck.Contains(ct.Name))
			.Select(ct => ct.Name);

		// Ajouter uniquement les objets qui n'existent pas
		foreach (var dto in RecipeDtos)
		{
			if (!existingNames.Contains(dto.Name))
			{
				var newRecipe = new Recipe
					{
						Name = dto.Name,
						FamilyName = dto.FamilyName,
						CraftMinutes = dto.CraftMinutes,
						Skill = await SkillService.GetByNameAsync(dto.RequiredSkill),// ?? new Skill(),
						RequiredSkillLevel = dto.RequiredSkillLevel,
						IsBlueprint = dto.IsBlueprint,
						IsDefault = dto.IsDefault,
						Labor = dto.Labor,
						CraftingTable = await CraftingTableService.GetByNameAsync(dto.CraftingTable),
						Server = server,
					};

				recipes.Add(newRecipe);
				await RecipeService.AddAsync(newRecipe);
			}
		}
	}

	private async Task UpdateUser()
	{
		await UserService.UpdateAsync(user);
	}

	private async Task OnSelectedSkillsChanged(IEnumerable<Skill> newSelectedSkills)
	{
		// Mettre à jour la sélection localement
		selectedSkills = newSelectedSkills;

		// Mettre à jour les compétences dans la base de données (conversion en List)
		await UserSkillService.UpdateUserSkillsAsync(user, server, selectedSkills.ToList());

		userSkills = await UserSkillService.GetUserSkillsByUserAsync(user);

		// Récupère la liste des tables de craft correspondant aux skills sélectionné
		var selectedTable = userSkills
			.SelectMany(us => us.Skill.Recipes)
			.Select(y => y.CraftingTable)
			.Distinct();

		selectedCraftingTables = selectedTable.ToList();

		// Mettre à jour les compétences dans la base de données (conversion en List)
		await UserCraftingTableService.UpdateUserCraftingTablesAsync(user, server, selectedCraftingTables.ToList());

		userCraftingTables = await UserCraftingTableService.GetUserCraftingTablesByUserAsync(user);

		userRecipes = user.GetAvailableRecipes();

	}

	private async Task OnSelectedRecipesChanged(IEnumerable<Recipe> newSelectedRecipes)
	{
		selectedRecipes = newSelectedRecipes;
	}

	private async Task OnSelectedCraftingTablesChanged(IEnumerable<CraftingTable> newSelectedCraftingTables)
	{
		// Mettre à jour la sélection localement
		selectedCraftingTables = newSelectedCraftingTables;

		// Mettre à jour les compétences dans la base de données (conversion en List)
		await UserCraftingTableService.UpdateUserCraftingTablesAsync(user, server, selectedCraftingTables.ToList());

		userCraftingTables = await UserCraftingTableService.GetUserCraftingTablesByUserAsync(user);
	}


	private async Task OnLevelChanged(UserSkill userSkill, int newLevel)
	{
		// Mettre à jour le niveau de la compétence dans la base de données
		userSkill.Level = newLevel;
		await UserSkillService.UpdateAsync(userSkill);

		userRecipes = user.GetAvailableRecipes();
	}


	private async Task OnSelectedPluginModuleChanged(UserCraftingTable userCraftingTable, PluginModule newUpgrade)
	{
		userCraftingTable.PluginModule = newUpgrade;
		// Mettre à jour le niveau de la compétence dans la base de données
		await UserCraftingTableService.UpdateAsync(userCraftingTable);
	}

	private async Task OnSelectedUserChanged()
	{
		// Mettre à jour l'utilisateur
		if (user is not null)
		{
			// Charger les compétences de l'utilisateur à partir de l'objet user
			userSkills = await UserSkillService.GetUserSkillsByUserAsync(user);

			// Initialiser selectedSkills en tant que HashSet
			selectedSkills = new HashSet<Skill>(userSkills.Select(x => x.Skill));

			userCraftingTables = await UserCraftingTableService.GetUserCraftingTablesByUserAsync(user);
			selectedCraftingTables = new HashSet<CraftingTable>(userCraftingTables.Select(x => x.CraftingTable));

			userRecipes = user.GetAvailableRecipes();
		}
	}
	
	/*private async Task DeleteUserSkill(int userSkillId)
		{
		// Appel au service pour supprimer la compétence de l'utilisateur
		await UserSkillService.DeleteUserSkillAsync(userSkillId);

		// Charger les compétences de l'utilisateur à partir de l'objet user
		userSkills = await UserSkillService.GetUserSkillsByUserAsync(user);

		// Initialiser selectedSkills en tant que HashSet
		selectedSkills = new HashSet<Skill>(userSkills.Select(x => x.Skill));
				}*/
}
