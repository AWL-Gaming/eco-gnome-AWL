@page "/server-management"
@attribute [Authorize(Policy = "IsServerAdmin")]
@using ecocraft.Services
@using ecocraft.Services.ImportData
@using Microsoft.AspNetCore.Authorization
@inject ImportDataService ImportDataService
@inject ContextService ContextService
@inject NavigationManager Navigation

<PageTitle>Server Management</PageTitle>

<MudContainer>
	<MudGrid>
		<MudItem sm="6" Class="pa-4">
			<MudFileUpload T="IBrowserFile" Context="fileInput" FilesChanged="UploadFiles">
				<ButtonTemplate>
					<MudButton HtmlTag="label"
					           Variant="Variant.Filled"
					           Color="Color.Primary"
					           StartIcon="@Icons.Material.Filled.CloudUpload"
					           for="@fileInput">
						Upload Server Data
					</MudButton>
				</ButtonTemplate>
			</MudFileUpload>
		</MudItem>
		<MudItem sm="6" Class="pa-4">
			<MudButton HtmlTag="label"
			           Variant="Variant.Filled"
			           Color="Color.Warning"
			           StartIcon="@Icons.Material.Filled.DeleteForever"
			           OnClick="DeleteServer">
				Delete Server
			</MudButton>
			 @if (_askDeleteConfirmation)
			{
				<MudButton HtmlTag="label"
				           Variant="Variant.Filled"
				           Color="Color.Secondary"
				           StartIcon="@Icons.Material.Filled.Close"
				           OnClick="CancelDeleteServer">
					Delete Server
				</MudButton>
				<MudButton HtmlTag="label"
				           Variant="Variant.Filled"
				           Color="Color.Tertiary"
				           StartIcon="@Icons.Material.Filled.Check"
				           OnClick="ConfirmDeleteServer">
					Delete Server
				</MudButton>
			}
		</MudItem>
	</MudGrid>
</MudContainer>

@code {
	private bool _askDeleteConfirmation = false;
	
	// TODO: Handle an update of server data
	private async Task UploadFiles(IBrowserFile? file)
	{
		// On vérifie le type MIME pour s'assurer qu'il s'agit bien d'un fichier JSON
		if (file != null && file.ContentType == "application/json")
		{
			// On lit le fichier JSON en mémoire
			using var stream = file.OpenReadStream(2000000);
			using var memoryStream = new MemoryStream();
			await stream.CopyToAsync(memoryStream);

			memoryStream.Position = 0; // Repositionner au début pour la lecture
			using var reader = new StreamReader(memoryStream);
			string jsonContent = await reader.ReadToEndAsync();

			if (ContextService.CurrentServer is not null)
			{
				await ImportDataService.ImportServerData(jsonContent, ContextService.CurrentServer);
			}
			else
			{
				throw new Exception("ContextService.CurrentServer is null !");
			}
		}
	}

	private void DeleteServer()
	{
		_askDeleteConfirmation = true;
	}

	private void CancelDeleteServer()
	{
		_askDeleteConfirmation = false;
	}

	private async void ConfirmDeleteServer()
	{
		_askDeleteConfirmation = false;
		await ContextService.DeleteCurrentServer();
		Navigation.NavigateTo("/");
	}
}
