@page "/server-management"
<!-- attribute [Authorize(Policy = "IsServerAdmin")]  Don't use this attribute until we setup authentication in the backend, based on cookie and not local storage -->
@implements IDisposable
@using ecocraft.Models
@using ecocraft.Extensions
@using ecocraft.Services
@using ecocraft.Services.ImportData
@using ecocraft.Services.DbServices
@inject ImportDataService ImportDataService
@inject ContextService ContextService
@inject NavigationManager Navigation
@inject ServerDbService ServerDbService
@inject EcoCraftDbContext EcoCraftDbContext
@inject ServerDataService ServerDataService
@inject UserServerDataService UserServerDataService
@inject ISnackbar Snackbar

<PageTitle>Server Management</PageTitle>

<MudContainer>
	<MudPaper Style="display: flex; justify-content: center; align-items: center;  border: 2px solid #ccc; padding: 8px;">
		<MudText Typo="Typo.h5" Style="text-align: center;">Current server administration</MudText>
	</MudPaper>

	<MudGrid>
		<MudItem sm="3" Class="d-flex align-center flex-grow-1 gap-4">
			<MudTextField Value="ContextService.CurrentServer!.Name" Label="Server name" ReadOnly="@(ContextService.CurrentUserServer!.IsAdmin)" Variant="Variant.Outlined" ValueChanged="(string newServerName) => OnServerNameChanged(ContextService.CurrentUserServer!,newServerName)"> </MudTextField>
		</MudItem>
		<MudItem Class="d-flex align-center flex-grow-1 gap-4" sm="3">
			<MudTextField Value="@ContextService.CurrentServer!.JoinCode" Label="Join code" ReadOnly="@(ContextService.CurrentUserServer!.IsAdmin)" Variant="Variant.Outlined"></MudTextField>
			<MudIconButton Icon="@Icons.Material.Filled.Refresh" aria-label="regenerate" Size="Size.Small" OnClick="@(() => UpdateJoinCode(ContextService.CurrentUserServer!))"></MudIconButton>
		</MudItem>
	</MudGrid>

	<MudGrid>
		<MudItem sm="3" Class="d-flex align-center flex-grow-1 gap-4">
			<MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
				<ActivatorContent>
					<MudButton Disabled="_showUploadServerDataLoader"
					           Variant="Variant.Filled"
					           Color="Color.Primary"
					           StartIcon="@Icons.Material.Filled.CloudUpload">
						Upload Server Data
						@if (_showUploadServerDataLoader)
						{
							<MudProgressCircular Size="Size.Small" Color="Color.Primary" Indeterminate="true" Class="ml-2" />
						}
					</MudButton>
				</ActivatorContent>
			</MudFileUpload>
		</MudItem>
		<MudItem sm="3" Class="d-flex align-center flex-grow-1 gap-4">
			<MudButton HtmlTag="label"
			           Disabled="_showDeleteServerLoader"
			           Variant="Variant.Filled"
			           Color="Color.Error"
			           StartIcon="@Icons.Material.Filled.DeleteForever"
			           OnClick="DeleteServer">
				Delete Server
				@if (_showDeleteServerLoader)
				{
					<MudProgressCircular Size="Size.Small" Color="Color.Error" Indeterminate="true" Class="ml-2" />
				}
			</MudButton>
			@if (_askDeleteConfirmation)
			{
				<br />
				<MudButton Variant="Variant.Filled"
				           Color="Color.Success"
				           StartIcon="@Icons.Material.Filled.Close"
				           OnClick="CancelDeleteServer">
				</MudButton>
				<MudButton Variant="Variant.Filled"
				           Color="Color.Warning"
				           StartIcon="@Icons.Material.Filled.Check"
				           OnClick="ConfirmDeleteServer">
				</MudButton>
			}
		</MudItem>
	</MudGrid>
</MudContainer>

<MudTable Items="ContextService.CurrentServer!.UserServers" Dense="true">
	<HeaderContent>
		<MudTh>User pseudo</MudTh>
		<MudTh>Admin</MudTh>
	</HeaderContent>
	<RowTemplate>
		<MudTd>
			<MudTextField Value="@context.Pseudo" Variant="Variant.Outlined" ValueChanged="(string newPseudo) => OnPseudoChanged(context,newPseudo)"> </MudTextField>
		</MudTd>
		<MudTd>
			<MudSwitch Value="@context.IsAdmin" Disabled="ContextService.CurrentUser!.UserServers.Contains(context) && context.IsAdmin" Color="Color.Primary" Class="ma-4" T="bool" ValueChanged="() => OnIsAdmin(context)" />
		</MudTd>
		<MudTd>
			<MudButton HtmlTag="label"
						Variant="Variant.Filled"
						Color="Color.Error"
						Disabled="context.User == ContextService.CurrentUser"
						StartIcon="@Icons.Material.Filled.ExitToApp"
						OnClick="@(() => KickUser(context))">
				Kick User
			</MudButton>
			@if (_askKickConfirmations.ContainsKey(context))
			{
				<br />
				<MudButton Variant="Variant.Filled"
							Color="Color.Success"
							StartIcon="@Icons.Material.Filled.Close"
							OnClick="@(() => CancelKick(context))">
				</MudButton>
				<MudButton Variant="Variant.Filled"
							Color="Color.Warning"
							StartIcon="@Icons.Material.Filled.Check"
							OnClick="@(() => ConfirmKick(context))">
				</MudButton>
			}
		</MudTd>
	</RowTemplate>

</MudTable>

<MudDivider DividerType="DividerType.FullWidth" Class="my-6" />

<MudStack Row Justify="Justify.SpaceEvenly" AlignItems="AlignItems.Start">
	<MudTable Items="@listOfIngredients.Where(iot => !iot.IsTag)" Filter="new Func<ItemOrTag,bool>(FilterFunc2)" Virtualize="true" FixedHeader="true" Dense="true" Hover="true">
		<HeaderContent>
			<MudTh>Name</MudTh>
			<MudTh>Min price</MudTh>
			<MudTh>Max price</MudTh>
		</HeaderContent>
		<ToolBarContent>
			<MudText Typo="Typo.h6">Item (no tags) ingredients from server recipes</MudText>
			<MudSpacer />
			<MudTextField @bind-Value="searchItemOrTag" Immediate Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
		</ToolBarContent>
		<RowTemplate>
			<MudTd>
				<div>
					<MudText Class="small-text">@ContextService.GetTranslation(context)</MudText>
				</div>
			</MudTd>
			<MudTd>
				<div>
					<MudNumericField T="float?"
									 Class="rectangle-input"
									 Disabled="@(context.IsTag)"
									 HideSpinButtons="@(context.IsTag)"
									 Value="context.MinPrice"
									 Format="N2"
									 Variant="Variant.Outlined" />
				</div>
			</MudTd>
			<MudTd>
				<div>
					<MudNumericField T="float?"
									 Class="rectangle-input"
									 Disabled="@(context.IsTag)"
									 HideSpinButtons="@(context.IsTag)"
									 Value="context.MaxPrice"
									 Format="N2"
									 Variant="Variant.Outlined" />
				</div>
			</MudTd>
		</RowTemplate>
		<PagerContent>
			<MudTablePager PageSizeOptions="new int[]{25, 50, 100}" />
		</PagerContent>
	</MudTable>

	<MudTable Items="@listOfIngredients" Filter="new Func<ItemOrTag,bool>(FilterFunc2)" Virtualize="true" FixedHeader="true" Dense="true" Hover="true">
		<HeaderContent>
			<MudTh>Name</MudTh>
			<MudTh>Min price</MudTh>
			<MudTh>Max price</MudTh>
		</HeaderContent>
		<ToolBarContent>
			<MudText Typo="Typo.h6">ItemOrTags ingredients from server recipes</MudText>
			<MudSpacer />
			<MudTextField @bind-Value="searchItemOrTag" Immediate Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
		</ToolBarContent>
		<RowTemplate>
			<MudTd>
				<div>
					<MudText Class="small-text">@ContextService.GetTranslation(context)</MudText>
				</div>
			</MudTd>
			<MudTd>
				<div>
					<MudNumericField T="float?"
									 Class="rectangle-input"
									 Disabled="@(context.IsTag)"
									 HideSpinButtons="@(context.IsTag)"
									 Value="context.MinPrice"
									 Format="N2"
									 Variant="Variant.Outlined" />
				</div>
			</MudTd>
			<MudTd>
				<div>
					<MudNumericField T="float?"
									 Class="rectangle-input"
									 Disabled="@(context.IsTag)"
									 HideSpinButtons="@(context.IsTag)"
									 Value="context.MaxPrice"
									 Format="N2"
									 Variant="Variant.Outlined" />
				</div>
			</MudTd>
		</RowTemplate>
		<PagerContent>
			<MudTablePager PageSizeOptions="new int[]{25, 50, 100}" />
		</PagerContent>
	</MudTable>

	<MudTable Items="@listOfMiddle" Filter="new Func<ItemOrTag,bool>(FilterFunc2)" Virtualize="true" FixedHeader="true" Dense="true" Hover="true">
		<HeaderContent>
			<MudTh>Name</MudTh>
			<MudTh>Min price</MudTh>
			<MudTh>Max price</MudTh>
		</HeaderContent>
		<ToolBarContent>
			<MudText Typo="Typo.h6">ItemOrTags middle from recipes</MudText>
			<MudSpacer />
			<MudTextField @bind-Value="searchItemOrTag" Immediate Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
		</ToolBarContent>
		<RowTemplate>
			<MudTd>
				<div>
					<MudText Class="small-text">@ContextService.GetTranslation(context)</MudText>
				</div>
			</MudTd>
			<MudTd>
				<div>
					<MudNumericField T="float?"
									 Class="rectangle-input"
									 Disabled="@(context.IsTag)"
									 HideSpinButtons="@(context.IsTag)"
									 Value="context.MinPrice"
									 Format="N2"
									 Variant="Variant.Outlined" />
				</div>
			</MudTd>
			<MudTd>
				<div>
					<MudNumericField T="float?"
									 Class="rectangle-input"
									 Disabled="@(context.IsTag)"
									 HideSpinButtons="@(context.IsTag)"
									 Value="context.MaxPrice"
									 Format="N2"
									 Variant="Variant.Outlined" />
				</div>
			</MudTd>
		</RowTemplate>
		<PagerContent>
			<MudTablePager PageSizeOptions="new int[]{25, 50, 100}" />
		</PagerContent>
	</MudTable>

	<MudTable Items="@listOfProducts" Filter="new Func<ItemOrTag,bool>(FilterFunc2)" Virtualize="true" FixedHeader="true" Dense="true" Hover="true">
		<HeaderContent>
			<MudTh>Name</MudTh>
			<MudTh>Min price</MudTh>
			<MudTh>Max price</MudTh>
		</HeaderContent>
		<ToolBarContent>
			<MudText Typo="Typo.h6">ItemOrTags products from recipes</MudText>
			<MudSpacer />
			<MudTextField @bind-Value="searchItemOrTag" Immediate Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
		</ToolBarContent>
		<RowTemplate>
			<MudTd>
				<div>
					<MudText Class="small-text">@ContextService.GetTranslation(context)</MudText>
				</div>
			</MudTd>
			<MudTd>
				<div>
					<MudNumericField T="float?"
									 Class="rectangle-input"
									 Disabled="@(context.IsTag)"
									 HideSpinButtons="@(context.IsTag)"
									 Value="context.MinPrice"
									 Format="N2"
									 Variant="Variant.Outlined" />
				</div>
			</MudTd>
			<MudTd>
				<div>
					<MudNumericField T="float?"
									 Class="rectangle-input"
									 Disabled="@(context.IsTag)"
									 HideSpinButtons="@(context.IsTag)"
									 Value="context.MaxPrice"
									 Format="N2"
									 Variant="Variant.Outlined" />
				</div>
			</MudTd>
		</RowTemplate>
		<PagerContent>
			<MudTablePager PageSizeOptions="new int[]{25, 50, 100}" />
		</PagerContent>
	</MudTable>
</MudStack>


@code {
	private bool _askDeleteConfirmation = false;
	private bool _showUploadServerDataLoader = false;
	private bool _showDeleteServerLoader = false;
	private Dictionary<UserServer, bool> _askKickConfirmations = new Dictionary<UserServer, bool>();
	private string searchItemOrTag = "";

	private List<ItemOrTag> listOfProducts = [];
	private List<ItemOrTag> listOfIngredients = [];
	private List<ItemOrTag> listOfMiddle = [];

	protected override void OnInitialized()
	{
		if (ContextService.CurrentUser == null || ContextService.CurrentUserServer == null || !ContextService.CurrentUserServer.IsAdmin)
		{
			Navigation.NavigateTo("/");
		}
	}

	protected override Task OnInitializedAsync()
	{
		ContextService.OnContextChanged += StateHasChanged;

		//Elements = ContextService.CurrentServer!.Recipes.SelectMany(r => r.Elements).Where(e => e.IsIngredient());

		listOfProducts = ContextService.CurrentServer!.Recipes.SelectMany(r => r.Elements).Where(e => e.IsProduct()).Select(e => e.ItemOrTag).Distinct().OrderBy(iot => ContextService.GetTranslation(iot)).ToList();
		listOfIngredients = ContextService.CurrentServer!.Recipes.SelectMany(r => r.Elements).Where(e => e.IsIngredient()).Select(e => e.ItemOrTag).Distinct().OrderBy(iot => ContextService.GetTranslation(iot)).ToList();
		listOfMiddle = listOfProducts.Intersect(listOfIngredients).OrderBy(iot => ContextService.GetTranslation(iot)).ToList();

		listOfMiddle.ForEach(iot => listOfIngredients.Remove(iot));
		listOfMiddle.ForEach(iot => listOfProducts.Remove(iot));

		return Task.CompletedTask;
	}

	public void Dispose()
	{
		ContextService.OnContextChanged -= StateHasChanged;
	}

	private async Task UploadFiles(IBrowserFile file)
	{
		// On vérifie le type MIME pour s'assurer qu'il s'agit bien d'un fichier JSON
		if (file != null && file.ContentType == "application/json")
		{
			// On lit le fichier JSON en mémoire
			using var stream = file.OpenReadStream(10_000_000);
			using var memoryStream = new MemoryStream();
			await stream.CopyToAsync(memoryStream);

			memoryStream.Position = 0; // Repositionner au début pour la lecture
			using var reader = new StreamReader(memoryStream);
			string jsonContent = await reader.ReadToEndAsync();

			_showUploadServerDataLoader = true;
			StateHasChanged();
			await ImportDataService.ImportServerData(jsonContent, ContextService.CurrentServer!);
			_showUploadServerDataLoader = false;
			StateHasChanged();

			await ServerDataService.RetrieveServerData(ContextService.CurrentServer);
			await UserServerDataService.RetrieveUserData(ContextService.CurrentUserServer);

			Snackbar.Clear();
			Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
			Snackbar.Add("Upload Successful", Severity.Success);
		}
	}

	private async Task OnServerNameChanged(UserServer userServer, string newServerName)
	{
		if (newServerName == "") return;
		userServer.Server.Name = newServerName;
		await ServerDbService.UpdateAndSave(userServer.Server);
	}

	private async Task OnPseudoChanged(UserServer userServer, string newPseudo)
	{
		if (newPseudo == "") return;
		userServer.Pseudo = newPseudo;
		await ContextService.updateCurrentUser();
	}

	private async Task UpdateJoinCode(UserServer userServer)
	{
		userServer.Server.GenerateJoinCode();
		await ServerDbService.UpdateAndSave(userServer.Server);
	}

	private void DeleteServer()
	{
		_askDeleteConfirmation = true;
	}

	private void CancelDeleteServer()
	{
		_askDeleteConfirmation = false;
	}

	private async void ConfirmDeleteServer()
	{
		_askDeleteConfirmation = false;
		_showDeleteServerLoader = true;
		StateHasChanged();
		await ContextService.DeleteCurrentServer();
		_showDeleteServerLoader = false;
		Navigation.NavigateTo("/");
	}

	private async void OnIsAdmin(UserServer userServer)
	{
		userServer.IsAdmin = !userServer.IsAdmin;
		await EcoCraftDbContext.SaveChangesAsync();
	}

	private void KickUser(UserServer userServer)
	{
		if (!_askKickConfirmations.ContainsKey(userServer))
		{
			_askKickConfirmations.Add(userServer, true);
		}
	}

	private void CancelKick(UserServer userServer)
	{
		if (_askKickConfirmations.ContainsKey(userServer))
		{
			_askKickConfirmations.Remove(userServer);
		}
	}

	private async void ConfirmKick(UserServer userServerToKick)
	{
		if (_askKickConfirmations.ContainsKey(userServerToKick))
		{
			_askKickConfirmations.Remove(userServerToKick);
			await ContextService.KickFromServer(userServerToKick);
		}
	}

	private bool FilterFunc2(ItemOrTag itemOrTag) => FilterFuncItemOrTag(itemOrTag, searchItemOrTag);

	private bool FilterFuncItemOrTag(ItemOrTag itemOrTag, string searchString)
	{
		if (string.IsNullOrWhiteSpace(searchString))
			return true;
		if (itemOrTag.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		if (ContextService.GetTranslation(itemOrTag).Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		return false;
	}
}

