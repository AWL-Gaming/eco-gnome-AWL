@page "/server-management"
<!-- attribute [Authorize(Policy = "IsServerAdmin")]  Don't use this attribute until we setup authentication in the backend, based on cookie and not local storage -->
@using ecocraft.Models
@using ecocraft.Services
@using ecocraft.Services.ImportData
@inject ImportDataService ImportDataService
@inject ContextService ContextService
@inject NavigationManager Navigation

<PageTitle>Server Management</PageTitle>

<MudContainer>
	<MudPaper Style="display: flex; justify-content: center; align-items: center;  border: 2px solid #ccc; padding: 8px;">
		<MudText Typo="Typo.h5" Style="text-align: center;">Server administration</MudText>
	</MudPaper>
	<MudGrid>
		<MudItem sm="4" Class="pa-4">
			<MudFileUpload T="IBrowserFile" Context="fileInput" FilesChanged="UploadFiles">
				<ButtonTemplate>
					<MudButton HtmlTag="label"
					           Variant="Variant.Filled"
					           Color="Color.Primary"
					           StartIcon="@Icons.Material.Filled.CloudUpload"
					           for="@fileInput">
						Upload Server Data
					</MudButton>
				</ButtonTemplate>
			</MudFileUpload>
		</MudItem>
		<MudItem sm="4" Class="pa-4">
			<MudButton HtmlTag="label"
			           Variant="Variant.Filled"
			           Color="Color.Error"
			           StartIcon="@Icons.Material.Filled.DeleteForever"
			           OnClick="DeleteServer">
				Delete Server
			</MudButton>
			@if (_askDeleteConfirmation)
			{
				<br />
				<MudButton Variant="Variant.Filled"
				           Color="Color.Success"
				           StartIcon="@Icons.Material.Filled.Close"
				           OnClick="CancelDeleteServer">
				</MudButton>
				<MudButton Variant="Variant.Filled"
				           Color="Color.Warning"
				           StartIcon="@Icons.Material.Filled.Check"
				           OnClick="ConfirmDeleteServer">
				</MudButton>
			}
		</MudItem>
		<MudItem sm="4" Class="pa-4">
			<MudButton Variant="Variant.Filled"
			           Color="Color.Warning"
			           StartIcon="@Icons.Material.Filled.TimeToLeave"
			           OnClick="RenounceAdmin">
				Renounce Admin
			</MudButton>
		</MudItem>
	</MudGrid>
</MudContainer>

<MudDivider DividerType="DividerType.FullWidth" Class="my-6" />

<MudContainer>
	<MudPaper Style="display: flex; justify-content: center; align-items: center;  border: 2px solid #ccc; padding: 8px;">
		<MudText Typo="Typo.h5" Style="text-align: center;">User Server administration</MudText>
	</MudPaper>
	<MudTable Items="ContextService.CurrentUser!.UserServers" Dense="true">
		<HeaderContent>
			<MudTh>Server name</MudTh>
			<MudTh>Server join code</MudTh>
			<MudTh>Server username</MudTh>
		</HeaderContent>
		<RowTemplate>
			<MudTd>
				<MudText>@context.Server.Name</MudText>
			</MudTd>
			<MudTd>
				<MudText>@context.Server.JoinCode</MudText>
			</MudTd>
			<MudTd>
				<MudTextField Value="@context.Pseudo" Variant="Variant.Outlined" ValueChanged="(string newPseudo) => OnPseudoChanged(context,newPseudo)"> </MudTextField>
			</MudTd>
		</RowTemplate>
	</MudTable>
</MudContainer>

	@code {
	private bool _askDeleteConfirmation = false;

	protected override void OnInitialized()
	{
		if (ContextService.CurrentUser == null || ContextService.CurrentUserServer == null || !ContextService.CurrentUserServer.IsAdmin)
		{
			Navigation.NavigateTo("/");
		}
	}

	// TODO: Handle an update of server data
	private async Task UploadFiles(IBrowserFile? file)
	{
		// On vérifie le type MIME pour s'assurer qu'il s'agit bien d'un fichier JSON
		if (file != null && file.ContentType == "application/json")
		{
			// On lit le fichier JSON en mémoire
			using var stream = file.OpenReadStream(10_000_000);
			using var memoryStream = new MemoryStream();
			await stream.CopyToAsync(memoryStream);

			memoryStream.Position = 0; // Repositionner au début pour la lecture
			using var reader = new StreamReader(memoryStream);
			string jsonContent = await reader.ReadToEndAsync();

			if (ContextService.CurrentServer is not null)
			{
				await ImportDataService.ImportServerData(jsonContent, ContextService.CurrentServer);
			}
			else
			{
				throw new Exception("ContextService.CurrentServer is null !");
			}
		}
	}

	private async Task OnPseudoChanged(UserServer userServer, string newPseudo)
	{
		if (newPseudo == "") return;
		userServer.Pseudo = newPseudo;
		await ContextService.updateCurrentUser();

	}

	private void DeleteServer()
	{
		_askDeleteConfirmation = true;
	}

	private void CancelDeleteServer()
	{
		_askDeleteConfirmation = false;
	}

	private async void ConfirmDeleteServer()
	{
		_askDeleteConfirmation = false;
		await ContextService.DeleteCurrentServer();
		Navigation.NavigateTo("/");
	}

	private async void RenounceAdmin()
	{
		await ContextService.RenounceAdmin();
		Navigation.NavigateTo("/");
	}
}

