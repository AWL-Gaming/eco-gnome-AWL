@page "/"
@implements IDisposable
@using ecocraft.Components.Dialog
@using ecocraft.Models
@using ecocraft.Services
@using ecocraft.Services.DbServices
@inject IDialogService DialogService
@inject ContextService ContextService
@inject ServerDataService ServerDataService
@inject UserServerDataService UserServerDataService
@inject UserCraftingTableDbService UserCraftingTableDbService
@inject UserPriceDbService UserPriceDbService
@inject LocalStorageService LocalStorageService
@inject PriceCalculatorService PriceCalculatorService
@inject EcoCraftDbContext dbContext

<PageTitle>Price Calculator</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
	<MudGrid Style="height: auto">
		<!-- Première Colonne -->
		<MudItem sm="4" Class="pa-2 d-flex flex-column">
			<MudItem sm="12" Class="flex-grow-1 mud-elevation-2 pa-4">
				<MudAutocomplete T="Skill"
				                 @ref="_autocompleteSkillRef"
				                 Value="_emptySkill"
				                 SearchFunc="SearchSkills"
				                 ValueChanged="AddUserSkill"
				                 Placeholder="Choose skills"
				                 Dense="true"
				                 MaxItems="null"
				                 Variant="Variant.Outlined"
				                 AnchorOrigin="Origin.BottomLeft"
				                 TransformOrigin="Origin.TopLeft">
					<ItemTemplate>
						@if (!string.IsNullOrEmpty(context.Profession) && _previousProfession != context.Profession)
						{
							<MudText Color="Color.Primary" Typo="Typo.caption">@ContextService.GetTranslation(ServerDataService.Skills.First(s => s.Name == context.Profession))</MudText>
						}
						<MudText>@ContextService.GetTranslation(context)</MudText>
						@{
							_previousProfession = context.Profession;
						}
					</ItemTemplate>
				</MudAutocomplete>

				<MudTable Items="UserServerDataService.UserSkills.Where(us => us.Skill is not null)" Dense="true">
					<HeaderContent>
						<MudTh>Name</MudTh>
						<MudTh>Level</MudTh>
						<MudTh>Action</MudTh>
					</HeaderContent>
					<RowTemplate>
						<MudTd>
							@ContextService.GetTranslation(context.Skill)
						</MudTd>
						<MudTd>
							<MudNumericField T="int" Value=@context.Level Min="0" Max="7" Style="width: 50px;" Immediate="true" ValueChanged="(int newValue) => OnLevelChanged(context,newValue)" />
						</MudTd>
						<MudTd>
							<MudIconButton Icon="@Icons.Material.Filled.Clear" aria-label="delete" Size="Size.Small" OnClick="@(() => RemoveUserSkill(context))"></MudIconButton>
						</MudTd>
					</RowTemplate>
				</MudTable>

				<MudDivider DividerType="DividerType.FullWidth" Class="my-6" />

				<MudAutocomplete T="CraftingTable"
				                 @ref="_autocompleteCraftingTableRef"
				                 Value="_emptyCraftingTable"
				                 SearchFunc="SearchCraftingTables"
				                 ValueChanged="AddUserCraftingTable"
				                 Placeholder="Choose a crafting table..." 
				                 Dense="true"
				                 MaxItems="null"
				                 Variant="Variant.Outlined"
				                 AnchorOrigin="Origin.BottomLeft"
				                 TransformOrigin="Origin.TopLeft">
					<ItemTemplate>
						<MudText>@ContextService.GetTranslation(context)</MudText>
					</ItemTemplate>
				</MudAutocomplete>

				<MudTable Items="UserServerDataService.UserCraftingTables" Dense="true">
					<HeaderContent>
						<MudTh>Name</MudTh>
						<MudTh>Upgrade</MudTh>
						<MudTh>Action</MudTh>
					</HeaderContent>
					<RowTemplate>
						<MudTd>
							@ContextService.GetTranslation(context.CraftingTable)
						</MudTd>
						<MudTd>
							<MudSelect T="PluginModule?" 
							           Placeholder="Choose a module" 
							           Value="context.PluginModule"
							           ValueChanged="@(value => ChangePluginModule(context, value))"
							           Dense="true" 
							           Variant="Variant.Outlined"
							           ToStringFunc="@(pm => pm == null ? "No Module" : pm.Name)"
							           AnchorOrigin="Origin.BottomLeft"
							           TransformOrigin="Origin.TopLeft">
								<MudSelectItem T="PluginModule" Value="@null">No Module</MudSelectItem>
								@foreach (var pluginModule in context.CraftingTable.PluginModules.OrderByDescending(pm => pm?.Percent ?? 1))
								{
									<MudSelectItem T="PluginModule" Value="@pluginModule">@ContextService.GetTranslation(pluginModule)</MudSelectItem>
								}
							</MudSelect> 
						</MudTd>
						<MudTd>
							<MudIconButton Icon="@Icons.Material.Filled.Clear" aria-label="delete" Size="Size.Small" OnClick="@(() => RemoveUserCraftingTable(context))"></MudIconButton>
						</MudTd>
					</RowTemplate>
				</MudTable> 
 			</MudItem>
 		</MudItem>

		<!-- Deuxième Colonne -->
		<MudItem sm="4" Class="pa-2 d-flex flex-column">
			<MudItem sm="12" Class="flex-grow-1 mud-elevation-2 pa-4">
				<MudStack>
					<MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
						<MudText>Display non-skilled recipes</MudText>
						<MudCheckBox T="bool" @bind-Value="DisplayNonSkilledRecipes" Variant="Variant.Outlined"/>
					</MudStack>
					<MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
						<MudText>Only level-accessible recipes</MudText>
						<MudCheckBox T="bool" @bind-Value="OnlyLevelAccessibleRecipes" Variant="Variant.Outlined"/>
					</MudStack>
					<MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
						<MudText>Price per 1000 calories</MudText>
						@if (UserServerDataService.UserSetting is not null)
						{
							<div>
								<MudNumericField T="float" ValueChanged="UpdateCalorieCost" Value="UserServerDataService.UserSetting.CalorieCost" Variant="Variant.Outlined"/>
							</div>
						}
					</MudStack>
					<MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
						<MudText>Profit percentage</MudText>
						@if (UserServerDataService.UserSetting is not null)
						{
							<div>
								<MudNumericField T="float" ValueChanged="UpdateMargin" Value="UserServerDataService.UserSetting.Margin" Variant="Variant.Outlined" />
							</div>
						}
					</MudStack>
					<!--<MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
						<MudButton OnClick="PriceCalculatorService.Calculate" Style="width: 150px" Color="Color.Tertiary">Recalculate</MudButton>
					</MudStack>-->
				</MudStack>

				<MudDivider DividerType="DividerType.FullWidth" Class="my-6" />

				<MudTable Items="PriceCalculatorService.GetUserPricesToBuy()" Dense="true">
					<HeaderContent>
						<MudTh>Name</MudTh>
						<MudTh>Price</MudTh>
					</HeaderContent>
					<RowTemplate>
						<MudTd>
							@if (context.ItemOrTag.IsTag)
							{
								<MudIconButton Class="pa-1" Style="margin-left: -5px" Icon="@Icons.Material.Filled.Bookmark" Color="Color.Default" OnClick="@(() => ShowTagDialog(context.ItemOrTag))"/>
							}
							@ContextService.GetTranslation(context.ItemOrTag)
						</MudTd>
						<MudTd>
							<MudNumericField T="float?" Value="context.Price" ValueChanged="@(value => UpdatePriceCalculation(@context, value))"></MudNumericField>
						</MudTd>
					</RowTemplate>
				</MudTable>
			</MudItem>
		</MudItem>

		<!-- Troisième Colonne -->
		<MudItem sm="4" Class="pa-2 d-flex flex-column">
			<MudItem sm="12" Class="flex-grow-1 mud-elevation-2 pa-4">
				<MudAutocomplete T="Recipe"
				                 @ref="_autocompleteRecipeRef"
				                 Value="_emptyRecipe"
				                 SearchFunc="SearchRecipes"
				                 ValueChanged="AddUserRecipe"
				                 Placeholder="Ajouter une recette"
				                 Dense="true"
				                 MaxItems="null"
				                 Variant="Variant.Outlined"
				                 AnchorOrigin="Origin.BottomLeft"
				                 TransformOrigin="Origin.TopLeft">
					<ItemTemplate>
						<MudText>@ContextService.GetTranslation(context)</MudText>
					</ItemTemplate>
				</MudAutocomplete>

				<MudGrid>
					<MudItem sm="12">
						<MudGrid>
							<MudItem sm="6">
								Item Name
							</MudItem>
							<MudItem sm="4">
								Prices Without / With margin  
							</MudItem>
							<MudItem sm="2">
								Action
							</MudItem>
						</MudGrid>
					</MudItem>
					@foreach (var upe in PriceCalculatorService.GetUserPricesToSell())
					{
						<MudItem sm="12">
							<MudGrid>
								<MudItem sm="6">
									@ContextService.GetTranslation(upe.Key.ItemOrTag)
									@if (upe.Value.Count == 1)
									{
										<MudIconButton Icon="@Icons.Material.Filled.Info" Size="Size.Small" OnClick="@(() => ShowRecipeDialog(upe.Value.First().Element.Recipe))"></MudIconButton>
									}
								</MudItem>
								<MudItem sm="4" Class="d-flex">
									<MudNumericField T="float?" Style="height: 25px; width: 75px" HideSpinButtons="true" Format="N2" Disabled="true" Value="upe.Key.Price" Variant="Variant.Outlined"></MudNumericField>
									<MudNumericField T="float?" Style="height: 25px; width: 75px" HideSpinButtons="true" Format="N2" Disabled="true" Value="@(upe.Key.Price * (1 + UserServerDataService.UserSetting!.Margin / 100))" Variant="Variant.Outlined"></MudNumericField>
								</MudItem>
								<MudItem sm="2">
									<MudIconButton
										Icon="@(upe.Value.Count == 1 ? Icons.Material.Filled.Clear : Icons.Material.Filled.ClearAll)"
										Size="Size.Small"
										OnClick="@(() => RemoveUserRecipes(UserServerDataService.UserRecipes.Where(ur => upe.Value.Select(ue => ue.Element.Recipe).Contains(ur.Recipe)).ToList()))"></MudIconButton>
								</MudItem>
							</MudGrid>
						</MudItem>
						@if (upe.Value.Count > 1)
						{
							@foreach (var userElement in upe.Value)
							{
								<MudItem sm="12" Class="pa-0">
									<MudGrid>
										<MudItem sm="6">
											-> @ContextService.GetTranslation(userElement.Element.Recipe)
											<MudIconButton Icon="@Icons.Material.Filled.Info" Size="Size.Small" OnClick="@(() => ShowRecipeDialog(userElement.Element.Recipe))"></MudIconButton>
										</MudItem>
										<MudItem sm="4">
											<MudNumericField Style="height: 25px" Disabled="true" Value="@userElement.Price" Variant="Variant.Outlined"></MudNumericField>
										</MudItem>
										<MudItem sm="2">
											<MudIconButton Icon="@Icons.Material.Filled.Clear" aria-label="delete" Size="Size.Small" OnClick="@(() => RemoveUserRecipe(userElement.Element.Recipe.UserRecipes.First()))"></MudIconButton>
										</MudItem>
									</MudGrid>
								</MudItem>
							}
						}
					}
				</MudGrid>
			</MudItem>
		</MudItem>

	</MudGrid>
</MudContainer>

@code {
	private MudAutocomplete<Skill>? _autocompleteSkillRef;
	private MudAutocomplete<CraftingTable>? _autocompleteCraftingTableRef;
	private MudAutocomplete<Recipe>? _autocompleteRecipeRef;

	private Skill? _emptySkill;
	private Recipe? _emptyRecipe;
	private CraftingTable? _emptyCraftingTable;
	private string? _previousProfession;
	private bool _onlyLevelAccessibleRecipes = true;
	private bool _displayNonSkilledRecipes = true;

	public bool OnlyLevelAccessibleRecipes
	{
		get => _onlyLevelAccessibleRecipes;
		set
		{
			_onlyLevelAccessibleRecipes = value;
			UpdateLocalSettings();
			if (_onlyLevelAccessibleRecipes)
			{
				UserServerDataService.RemoveNonAllowedUserRecipes();
			}
			StateHasChanged();
		}
	}

	public bool DisplayNonSkilledRecipes
	{
		get => _displayNonSkilledRecipes;
		set
		{
			_displayNonSkilledRecipes = value;
			UpdateLocalSettings();
			UserServerDataService.ToggleEmptyUserSkill(ContextService.CurrentUserServer!, _displayNonSkilledRecipes);
			StateHasChanged();
		}
	}

	protected override Task OnInitializedAsync()
	{
		ContextService.OnContextChanged += StateHasChanged;

		return Task.CompletedTask;
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (!firstRender)
		{
			return;
		}

		OnlyLevelAccessibleRecipes = await LocalStorageService.GetItem("onlyLevelAccessibleRecipes") == "True";
		DisplayNonSkilledRecipes = await LocalStorageService.GetItem("displayNonSkilledRecipes") == "True";

		StateHasChanged();
	}

	public void Dispose()
	{
		ContextService.OnContextChanged -= StateHasChanged;
	}

	private async void UpdateLocalSettings()
	{
		await LocalStorageService.AddItem("onlyLevelAccessibleRecipes", OnlyLevelAccessibleRecipes.ToString());
		await LocalStorageService.AddItem("displayNonSkilledRecipes", DisplayNonSkilledRecipes.ToString());
	}

	private Task<IEnumerable<Skill>> SearchSkills(string value)
	{
		IEnumerable<Skill> result;

		if (string.IsNullOrEmpty(value))
		{
			result = UserServerDataService.GetAvailableSkills();
		}
		else
		{
			result = UserServerDataService.GetAvailableSkills()
				.Where(s => ContextService.GetTranslation(s).Contains(value, StringComparison.InvariantCultureIgnoreCase))
				.ToList();
		}

		result = result.Where(s => s.Profession is not null).OrderBy(s => s.Profession);

		return Task.FromResult(result);
	}

	private Task<IEnumerable<Recipe>> SearchRecipes(string value)
	{
		IEnumerable<Recipe> result;

		if (string.IsNullOrEmpty(value))
		{
			result = UserServerDataService.GetAvailableRecipes();
		}
		else
		{
			result = UserServerDataService.GetAvailableRecipes()
				.Where(r => ContextService.GetTranslation(r).Contains(value, StringComparison.InvariantCultureIgnoreCase))
				.ToList();
		}

		result = result.OrderBy(r => r.Name);

		return Task.FromResult(result);
	}

	private Task<IEnumerable<CraftingTable>> SearchCraftingTables(string value)
	{
		IEnumerable<CraftingTable> result;

		if (string.IsNullOrEmpty(value))
		{
			result = UserServerDataService.GetAvailableCraftingTables();
		}
		else
		{
			result = UserServerDataService.GetAvailableCraftingTables()
				.Where(s => ContextService.GetTranslation(s).Contains(value, StringComparison.InvariantCultureIgnoreCase))
				.ToList();
		}

		result = result.OrderBy(c => c.Name);

		return Task.FromResult(result);
	}

	private async Task AddUserSkill(Skill? skill)
	{
		if (skill is null)
		{
			return;
		}

		UserServerDataService.AddUserSkill(skill, ContextService.CurrentUserServer!, OnlyLevelAccessibleRecipes);
		await dbContext.SaveChangesAsync();
		
		_emptySkill = null;
		_autocompleteSkillRef?.Clear();
		
		PriceCalculatorService.Calculate();

		StateHasChanged();
	}

	private async Task RemoveUserSkill(UserSkill skill)
	{
		UserServerDataService.RemoveUserSkill(skill);
		await dbContext.SaveChangesAsync();
	}

	private async Task AddUserCraftingTable(CraftingTable? craftingTable)
	{
		if (craftingTable is null)
		{
			return;
		}

		UserServerDataService.AddUserCraftingTable(craftingTable, ContextService.CurrentUserServer!, true);
		await dbContext.SaveChangesAsync();

		_emptyCraftingTable = null;
		_autocompleteCraftingTableRef?.Clear();
		
		PriceCalculatorService.Calculate();

		StateHasChanged();
	}

	private async Task RemoveUserCraftingTable(UserCraftingTable craftingTable)
	{
		UserServerDataService.RemoveUserCraftingTable(craftingTable);
		await dbContext.SaveChangesAsync();
	}

	private async Task AddUserRecipe(Recipe? recipe)
	{
		if (recipe is null)
		{
			return;
		}

		UserServerDataService.AddUserRecipe(recipe, ContextService.CurrentUserServer!);
		await dbContext.SaveChangesAsync();
		
		_emptyRecipe = null;
		_autocompleteRecipeRef?.Clear();
		
		PriceCalculatorService.Calculate();

		StateHasChanged();
	}

	private async Task RemoveUserRecipe(UserRecipe recipe)
	{
		UserServerDataService.RemoveUserRecipe(recipe);
		await dbContext.SaveChangesAsync();
	}

	private async Task RemoveUserRecipes(List<UserRecipe> recipes)
	{
		foreach (var recipe in recipes)
		{
			UserServerDataService.RemoveUserRecipe(recipe);
		}
		
		await dbContext.SaveChangesAsync();
	}

	private async Task OnLevelChanged(UserSkill userSkill, int newLevel)
	{
		if (userSkill.Level == newLevel) return;
		
		var isIncrease = newLevel - userSkill.Level > 0;
		userSkill.Level = newLevel;

		if (OnlyLevelAccessibleRecipes)
		{
			UserServerDataService.UserSkillLevelChange(userSkill, ContextService.CurrentUserServer!, isIncrease);
		}
		await dbContext.SaveChangesAsync();

		PriceCalculatorService.Calculate();
		StateHasChanged();
	}

	private async Task ChangePluginModule(UserCraftingTable userCraftingTable, PluginModule? pluginModule)
	{
		userCraftingTable.PluginModule = pluginModule;
		await dbContext.SaveChangesAsync();
		PriceCalculatorService.Calculate();
		StateHasChanged();
	}

	private async Task UpdateCalorieCost(float calorieCost)
	{
		UserServerDataService.UserSetting!.CalorieCost = calorieCost;
		UserServerDataService.UpdateUserSetting(UserServerDataService.UserSetting);
		await dbContext.SaveChangesAsync();
		PriceCalculatorService.Calculate();		
		StateHasChanged();
	}

	private async Task UpdateMargin(float margin)
	{
		UserServerDataService.UserSetting!.Margin = margin;
		UserServerDataService.UpdateUserSetting(UserServerDataService.UserSetting);
		await dbContext.SaveChangesAsync();
	}

	private async Task UpdatePriceCalculation(UserPrice userPrice, float? value)
	{
		userPrice.Price = value;
		UserPriceDbService.Update(userPrice);
		await dbContext.SaveChangesAsync();
		PriceCalculatorService.Calculate();		
		StateHasChanged();
	}

	private async Task ShowRecipeDialog(Recipe recipe)
	{
		var parameters = new DialogParameters
		{
			["Recipe"] = recipe,
		};
		var dialog = DialogService.Show<RecipeDialog>(ContextService.GetTranslation(recipe), parameters);

		await dialog.Result;
		await dbContext.SaveChangesAsync();
	}

	private async Task ShowTagDialog(ItemOrTag tag)
	{
		var parameters = new DialogParameters
		{
			["Tag"] = tag,
		};
		var dialog = DialogService.Show<TagDialog>(ContextService.GetTranslation(tag), parameters);

		await dialog.Result;
		await dbContext.SaveChangesAsync();
	}
}
