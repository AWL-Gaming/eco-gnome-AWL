@page "/"
@implements IDisposable
@using ecocraft.Models
@using ecocraft.Services
@inject ContextService ContextService
@inject ServerDataService ServerDataService
@inject UserServerDataService UserServerDataService
@inject LocalStorageService LocalStorageService

<PageTitle>Price Calculator</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
	<MudGrid Style="height: auto">
		<!-- Première Colonne -->
		<MudItem sm="4" Class="pa-2 d-flex flex-column">
			<MudItem sm="12" Class="flex-grow-1 mud-elevation-2 pa-4">
				<MudAutocomplete T="Skill"
				                 @ref="_autocompleteSkillRef"
				                 Value="_emptySkill"
				                 SearchFunc="SearchSkills"
				                 ValueChanged="AddUserSkill"
				                 Placeholder="Choose skills"
				                 Dense="true"
				                 MaxItems="null"
				                 Variant="Variant.Outlined"
				                 AnchorOrigin="Origin.BottomLeft"
				                 TransformOrigin="Origin.TopLeft">
					<ItemTemplate>
						@if (!string.IsNullOrEmpty(context.Profession) && _previousProfession != context.Profession)
						{
							<MudText Color="Color.Primary" Typo="Typo.caption">@ContextService.GetTranslation(ServerDataService.Skills.First(s => s.Name == context.Profession))</MudText>
						}
						<MudText>@ContextService.GetTranslation(context)</MudText>
						@{
							_previousProfession = context.Profession;
						}
					</ItemTemplate>
				</MudAutocomplete>

				<MudTable Items="UserServerDataService.UserSkills" Dense="true">
					<HeaderContent>
						<MudTh>Name</MudTh>
						<MudTh>Level</MudTh>
						<MudTh>Action</MudTh>
					</HeaderContent>
					<RowTemplate>
						<MudTd>
							@ContextService.GetTranslation(context.Skill)
						</MudTd>
						<MudTd>
							<MudNumericField HideSpinButtons="true" T="int" Value=@context.Level Variant="Variant.Text" Min="0" Max="7" Style="width: 24px;" Immediate="true" ValueChanged="(int newValue) => OnLevelChanged(context,newValue)" />
						</MudTd>
						<MudTd>
							<MudIconButton Icon="@Icons.Material.Filled.Clear" aria-label="delete" Size="Size.Small" OnClick="@(() => RemoveUserSkill(context))"></MudIconButton>
						</MudTd>
					</RowTemplate>
				</MudTable>

				<MudDivider DividerType="DividerType.FullWidth" Class="my-6" />

				<MudAutocomplete T="CraftingTable"
				                 @ref="_autocompleteCraftingTableRef"
				                 Value="_emptyCraftingTable"
				                 SearchFunc="SearchCraftingTables"
				                 ValueChanged="AddUserCraftingTable"
				                 Placeholder="Choose a crafting table..." 
				                 Dense="true"
				                 MaxItems="null"
				                 Variant="Variant.Outlined"
				                 AnchorOrigin="Origin.BottomLeft"
				                 TransformOrigin="Origin.TopLeft">
					<ItemTemplate>
						<MudText>@ContextService.GetTranslation(context)</MudText>
					</ItemTemplate>
				</MudAutocomplete>

				<MudTable Items="UserServerDataService.UserCraftingTables" Dense="true">
					<HeaderContent>
						<MudTh>Name</MudTh>
						<MudTh>Upgrade</MudTh>
						<MudTh>Action</MudTh>
					</HeaderContent>
					<RowTemplate>
						<MudTd>
							@ContextService.GetTranslation(context.CraftingTable)
						</MudTd>
						<MudTd>
							<MudSelect T="PluginModule?" 
							           Placeholder="Choose a module" 
							           @bind-Value="context.PluginModule"
							           Dense="true" 
							           Variant="Variant.Outlined"
							           ToStringFunc="@(pm => pm == null ? "No Module" : pm.Name)"
							           AnchorOrigin="Origin.BottomLeft"
							           TransformOrigin="Origin.TopLeft">
								<MudSelectItem T="PluginModule" Value="@null">No Module</MudSelectItem>
								@foreach (var pluginModule in context.CraftingTable.PluginModules)
							{
								<MudSelectItem T="PluginModule" Value="@pluginModule">@ContextService.GetTranslation(pluginModule)</MudSelectItem>
							}
							</MudSelect> 
						</MudTd>
						<MudTd>
							<MudIconButton Icon="@Icons.Material.Filled.Clear" aria-label="delete" Size="Size.Small" OnClick="@(() => RemoveUserCraftingTable(context))"></MudIconButton>
						</MudTd>
					</RowTemplate>
				</MudTable> 
 			</MudItem>
 		</MudItem>

		<!-- Deuxième Colonne -->
		<MudItem sm="4" Class="pa-2 d-flex flex-column">
			<MudItem sm="12" Class="flex-grow-1 mud-elevation-2 pa-4">
				<MudStack>
				<MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
					<MudText>Only level-accessible recipes</MudText>
					<MudCheckBox T="bool" @bind-Value="onlyLevelAccessibleRecipes" Variant="Variant.Outlined"/>
				</MudStack>
				<MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
					<MudText>Price per 1000 calories</MudText>
					@if (UserServerDataService.UserSetting is not null)
					{
						<div>
							<MudNumericField T="float" ValueChanged="UpdateCalorieCost" Value="UserServerDataService.UserSetting.CalorieCost" HideSpinButtons="true" Variant="Variant.Outlined"/>
						</div>
					}
				</MudStack>
				<MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
					<MudText>Profit percentage</MudText>
						@if (UserServerDataService.UserSetting is not null)
					{
						<div>
							<MudNumericField T="float" ValueChanged="UpdateMargin" Value="UserServerDataService.UserSetting.Margin" HideSpinButtons="true" Variant="Variant.Outlined" />
						</div>
					}
				</MudStack>
			</MudStack>
			</MudItem>
		</MudItem>

		<!-- Troisième Colonne -->
		<MudItem sm="4" Class="pa-2 d-flex flex-column">
			<MudItem sm="12" Class="flex-grow-1 mud-elevation-2 pa-4">
				<MudAutocomplete T="Recipe"
				                 @ref="_autocompleteRecipeRef"
				                 Value="_emptyRecipe"
				                 SearchFunc="SearchRecipes"
				                 ValueChanged="AddUserRecipe"
				                 Placeholder="Ajouter une recette"
				                 Dense="true"
				                 MaxItems="null"
				                 Variant="Variant.Outlined"
				                 AnchorOrigin="Origin.BottomLeft"
				                 TransformOrigin="Origin.TopLeft">
					<ItemTemplate>
						<MudText>@ContextService.GetTranslation(context)</MudText>
					</ItemTemplate>
				</MudAutocomplete>

				<MudTable Items="UserServerDataService.UserRecipes" Dense="true">
					<HeaderContent>
						<MudTh>Name</MudTh>
						<MudTh>Price</MudTh>
						<MudTh>Action</MudTh>
					</HeaderContent>
					<RowTemplate>
						<MudTd>
							@ContextService.GetTranslation(context.Recipe)
						</MudTd>
						<MudTd>
							<MudTextField Disabled="true" Value="0"></MudTextField>
						</MudTd>
						<MudTd>
							<MudIconButton Icon="@Icons.Material.Filled.Clear" aria-label="delete" Size="Size.Small" OnClick="@(() => RemoveUserRecipe(context))"></MudIconButton>
						</MudTd>
					</RowTemplate>
				</MudTable>
			</MudItem>
		</MudItem>

	</MudGrid>
</MudContainer>

@code {
	private MudAutocomplete<Skill>? _autocompleteSkillRef;
	private MudAutocomplete<CraftingTable>? _autocompleteCraftingTableRef;
	private MudAutocomplete<Recipe>? _autocompleteRecipeRef;

	private Skill? _emptySkill;
	private Recipe? _emptyRecipe;
	private CraftingTable? _emptyCraftingTable;
	private string? _previousProfession;
	private bool _onlyLevelAccessibleRecipes = true;

	public bool onlyLevelAccessibleRecipes
	{
		get => _onlyLevelAccessibleRecipes;
		set
		{
			_onlyLevelAccessibleRecipes = value;
			UpdateLocalSettings();
			UserServerDataService.UpdateUserRecipes(ContextService.CurrentUserServer!);
		}
	}

	protected override Task OnInitializedAsync()
	{
		ContextService.OnContextChanged += StateHasChanged;

		return Task.CompletedTask;
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (!firstRender)
		{
			return;
		}

		onlyLevelAccessibleRecipes = await LocalStorageService.GetItem("onlyLevelAccessibleRecipes") == "True";

		StateHasChanged();
	}

	public void Dispose()
	{
		ContextService.OnContextChanged -= StateHasChanged;
	}

	private async void UpdateLocalSettings()
	{
		await LocalStorageService.AddItem("onlyLevelAccessibleRecipes", onlyLevelAccessibleRecipes.ToString());
	}

	private Task<IEnumerable<Skill>> SearchSkills(string value)
	{
		IEnumerable<Skill> result;

		if (string.IsNullOrEmpty(value))
		{
			result = UserServerDataService.GetAvailableSkills();
		}
		else
		{
			result = UserServerDataService.GetAvailableSkills()
				.Where(s => s.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase))
				.ToList();
		}

		result = result.Where(s => s.Profession is not null).OrderBy(s => s.Profession);

		return Task.FromResult(result);
	}

	private Task<IEnumerable<Recipe>> SearchRecipes(string value)
	{
		IEnumerable<Recipe> result;

		if (string.IsNullOrEmpty(value))
		{
			result = UserServerDataService.GetAvailableRecipes();
		}
		else
		{
			result = UserServerDataService.GetAvailableRecipes()
				.Where(r => r.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase))
				.ToList();
		}

		result = result.OrderBy(r => r.Name);

		return Task.FromResult(result);
	}

	private Task<IEnumerable<CraftingTable>> SearchCraftingTables(string value)
	{
		IEnumerable<CraftingTable> result;

		if (string.IsNullOrEmpty(value))
		{
			result = UserServerDataService.GetAvailableCraftingTables();
		}
		else
		{
			result = UserServerDataService.GetAvailableCraftingTables()
				.Where(s => s.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase))
				.ToList();
		}

		result = result.OrderBy(c => c.Name);

		return Task.FromResult(result);
	}

	private void AddUserSkill(Skill? skill)
	{
		if (skill is null)
		{
			return;
		}

		var userSkill = new UserSkill
		{
			Skill = skill,
			UserServer = ContextService.CurrentUserServer!,
			Level = 1,
		};

		UserServerDataService.AddUserSkill(userSkill);
		UserServerDataService.UpdateUserCraftingTables(ContextService.CurrentUserServer!);
		UserServerDataService.UpdateUserRecipes(ContextService.CurrentUserServer!);

		_emptySkill = null;

		_autocompleteSkillRef?.Clear();
	}

	private void RemoveUserSkill(UserSkill skill)
	{
		UserServerDataService.RemoveUserSkill(skill);
		UserServerDataService.UpdateUserCraftingTables(ContextService.CurrentUserServer!);
		UserServerDataService.UpdateUserRecipes(ContextService.CurrentUserServer!);
	}

	private void AddUserCraftingTable(CraftingTable? craftingTable)
	{
		if (craftingTable is null)
		{
			return;
		}

		var userCraftingTable = new UserCraftingTable
		{
			CraftingTable = craftingTable,
			UserServer = ContextService.CurrentUserServer!,
			PluginModule = null
		};

		UserServerDataService.AddUserCraftingTable(userCraftingTable);
		UserServerDataService.UpdateUserRecipes(ContextService.CurrentUserServer!);

		_emptyCraftingTable = null;
		_autocompleteCraftingTableRef?.Clear();
	}

	private void RemoveUserCraftingTable(UserCraftingTable craftingTable)
	{
		UserServerDataService.RemoveUserCraftingTable(craftingTable);
		UserServerDataService.UpdateUserRecipes(ContextService.CurrentUserServer!);
	}

	private void AddUserRecipe(Recipe? recipe)
	{
		if (recipe is null)
		{
			return;
		}

		var userRecipe = new UserRecipe
		{
			Recipe = recipe,
			UserServer = ContextService.CurrentUserServer!,
		};

		UserServerDataService.AddUserRecipe(userRecipe);

		_emptyRecipe = null;
		_autocompleteRecipeRef?.Clear();
	}

	private void RemoveUserRecipe(UserRecipe recipe)
	{
		UserServerDataService.RemoveUserRecipe(recipe);
	}

	private void OnLevelChanged(UserSkill userSkill, int newLevel)
	{
		userSkill.Level = newLevel;
		// Comment gère-t-on l'argument limitToSkillLevelRecipes ?

		UserServerDataService.UpdateUserRecipes(ContextService.CurrentUserServer!);
	}

	private void OnSelectedPluginModuleChanged(UserCraftingTable userCraftingTable, PluginModule? newUpgrade)
	{
		userCraftingTable.PluginModule = newUpgrade;
	}

	private void UpdateCalorieCost(float calorieCost)
	{
		UserServerDataService.UserSetting!.CalorieCost = calorieCost;
		UserServerDataService.UpdateUserSetting(UserServerDataService.UserSetting);
	}

	private void UpdateMargin(float margin)
	{
		UserServerDataService.UserSetting!.Margin = margin;
		UserServerDataService.UpdateUserSetting(UserServerDataService.UserSetting);
	}
}
