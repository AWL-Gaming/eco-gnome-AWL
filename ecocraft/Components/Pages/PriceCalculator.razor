@page "/"
@implements IDisposable
@using ecocraft.Components.Dialog
@using ecocraft.Models
@using ecocraft.Services
@using ecocraft.Services.DbServices
@inject IDialogService DialogService
@inject ContextService ContextService
@inject ServerDataService ServerDataService
@inject UserServerDataService UserServerDataService
@inject UserPriceDbService UserPriceDbService
@inject PriceCalculatorService PriceCalculatorService
@inject EcoCraftDbContext EcoCraftDbContext
@inject ISnackbar Snackbar

<PageTitle>Price Calculator</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
<MudGrid Style="height: auto">
<!-- Première Colonne -->
<MudItem sm="4" Class="pa-2 d-flex flex-column">
    <MudItem sm="12" Class="flex-grow-1 mud-elevation-2 pa-4">
        <MudAutocomplete T="Skill"
                         Value="_emptySkill"
                         SearchFunc="SearchSkills"
                         ValueChanged="AddUserSkill"
                         Placeholder="Choose skills"
                         Dense="true"
                         MaxItems="null"
                         Variant="Variant.Outlined"
                         AnchorOrigin="Origin.BottomLeft"
                         TransformOrigin="Origin.TopLeft">
            <ItemTemplate>
                @if (!string.IsNullOrEmpty(context.Profession) && _previousProfession != context.Profession)
                {
                    <MudText Color="Color.Primary" Typo="Typo.caption">@ContextService.GetTranslation(ServerDataService.Skills.First(s => s.Name == context.Profession))</MudText>
                }
                <MudText>@ContextService.GetTranslation(context)</MudText>
                @{
                    _previousProfession = context.Profession;
                }
            </ItemTemplate>
        </MudAutocomplete>

        <MudTable Items="UserServerDataService.UserSkills.Where(us => us.Skill is not null)"
                  FixedHeader="true"
                  Style="max-height: 250px;"
                  Hover="true"
                  Dense="true"
                  Class="mt-4 skill-table">
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Level</MudTh>
                <MudTh>Action</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>
                    <MudText>@ContextService.GetTranslation(context.Skill)</MudText>
                    @if (context.Level >= 7 && context.Skill.LavishTalentValue is not null)
                    {
                        <MudCheckBox Value="context.HasLavishTalent" Label="Lavish talent" Color="Color.Primary" ValueChanged="(bool newLavishTalent) => OnLavishTalentChanged(context, newLavishTalent)"></MudCheckBox>
                    }
                </MudTd>
                <MudTd>
                    <MudNumericField T="int"
                                     Value="@context.Level"
                                     Class="square-input"
                                     Min="1"
                                     Max="7"
                                     Variant="Variant.Outlined"
                                     Immediate="true"
                                     ValueChanged="(int newValue) => OnLevelChanged(context, newValue)"/>
                </MudTd>
                <MudTd>
                    <MudIconButton Icon="@Icons.Material.Filled.Clear" aria-label="delete" Size="Size.Small" OnClick="@(() => RemoveUserSkill(context))"></MudIconButton>
                </MudTd>
            </RowTemplate>
        </MudTable>

        <MudAutocomplete T="CraftingTable"
                         Value="_emptyCraftingTable"
                         SearchFunc="SearchCraftingTables"
                         ValueChanged="AddUserCraftingTable"
                         Placeholder="Choose a crafting table..."
                         Dense="true"
                         Class="mt-4"
                         MaxItems="null"
                         Variant="Variant.Outlined"
                         AnchorOrigin="Origin.BottomLeft"
                         TransformOrigin="Origin.TopLeft">
            <ItemTemplate>
                <MudText>@ContextService.GetTranslation(context)</MudText>
            </ItemTemplate>
        </MudAutocomplete>

        <MudTable Items="UserServerDataService.UserCraftingTables"
                  FixedHeader="true"
                  Hover="true"
                  Class="mt-4 craftingtable-table"
                  Dense="true">
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Upgrade</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>
                    <MudText>@ContextService.GetTranslation(context.CraftingTable)</MudText>
                </MudTd>
                <MudTd>
                    <MudSelect T="PluginModule"
                               Class="select-dense"
                               Placeholder="Choose a module"
                               Value="context.PluginModule"
                               ValueChanged="@(value => ChangePluginModule(context, value))"
                               Dense="true"
                               Variant="Variant.Outlined"
                               ToStringFunc="@(pm => pm == null ? "No Module" : pm.Name)"
                               AnchorOrigin="Origin.BottomLeft"
                               TransformOrigin="Origin.TopLeft">
                        <MudSelectItem T="PluginModule" Value="@null">No Module</MudSelectItem>
                        @foreach (var pluginModule in context.CraftingTable.PluginModules.OrderByDescending(pm => pm.Percent))
                        {
                            <MudSelectItem T="PluginModule"
                                           Value="@pluginModule">
                                @ContextService.GetTranslation(pluginModule)
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudTd>
                <MudTd>
                    <MudIconButton Icon="@Icons.Material.Filled.Clear" aria-label="delete" Size="Size.Small" OnClick="@(() => RemoveUserCraftingTable(context))"></MudIconButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudItem>
</MudItem>

<!-- Deuxième Colonne -->
<MudItem sm="4" Class="pa-2 d-flex flex-column">
    <MudItem sm="12" Class="flex-grow-1 mud-elevation-2 pa-4">
        <MudStack Spacing="0">
            @if (UserServerDataService.UserSetting is not null)
            {
                <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                    <MudText>Display non-skilled recipes</MudText>
                    <MudCheckBox T="bool" Value="UserServerDataService.UserSetting.DisplayNonSkilledRecipes" Variant="Variant.Outlined" ValueChanged="OnOptionDisplayChanged"/>
                </MudStack>
                <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                    <MudText>Only level-accessible recipes</MudText>
                    <MudCheckBox T="bool" Value="UserServerDataService.UserSetting.OnlyLevelAccessibleRecipes" Variant="Variant.Outlined" ValueChanged="OnOptionOnlyLevelChanged"/>
                </MudStack>
            }
            <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                <MudText>Price per 1000 calories</MudText>
                @if (UserServerDataService.UserSetting is not null)
                {
                    <div>
                        <MudNumericField T="float"
                                         ValueChanged="UpdateCalorieCost"
                                         Style="height: 35px; width: 100px"
                                         Value="UserServerDataService.UserSetting.CalorieCost"
                                         Variant="Variant.Outlined"/>
                    </div>
                }
            </MudStack>

            @if (UserServerDataService.UserSetting is not null)
            {
                        <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                            <MudText Typo="Typo.body1">Margin : </MudText>
                            <MudTooltip Text="Add margin">
                                <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Tertiary" OnClick="OnAddMargin" />
                            </MudTooltip>
                        </MudStack>
                <MudTable Items="UserServerDataService.UserMargins"
                        FixedHeader="true"
                        Hover="true"
                        Class="mt-4 craftingtable-table"
                        Dense="true">
                    <RowTemplate>
                        <MudTd>
                            <MudTextField Value="context.Name" ValueChanged="@((string value) => UpdateMarginName(context, value))"></MudTextField>
                        </MudTd>
                        <MudTd>
                            <MudNumericField T="float"
                                                Style="height: 35px; width: 100px"
                                                Value="context.Margin"
                                                Adornment="Adornment.End"
                                                AdornmentText="%"
                                                Min="0"
                                                ValueChanged="@((float value) => UpdateMargin(context, value))"
                                                Variant="Variant.Outlined" />
                        </MudTd>
                        <MudTd>
                            <MudTooltip Text="Remove margin">
                                <MudIconButton Icon="@Icons.Material.Filled.Remove" Color="Color.Error" OnClick="@(() => OnRemoveMargin(context))" />
                            </MudTooltip>
                        </MudTd>
                    </RowTemplate>
                </MudTable>

            }


        </MudStack>

        <MudDivider DividerType="DividerType.FullWidth" Class="my-6"/>

        <MudTable Items="@(PriceCalculatorService.GetCategorizedItemOrTagsForDisplay().ToBuy)"
                  FixedHeader="true"
                  Height="550px"
                  Dense="true"
                  Hover="true">
            <HeaderContent>
                <MudTh>
                    Name
                    <MudIconButton Size="Size.Small"
                                   Class="pa-0 pl-2"
                                   Icon="@(_showTagItems ? @Icons.Material.Outlined.Visibility : @Icons.Material.Outlined.VisibilityOff)"
                                   OnClick="@(() => _showTagItems = !_showTagItems)"/>
                </MudTh>
                <MudTh>Price</MudTh>
            </HeaderContent>
            <RowTemplate>
                @{
                    var userPriceTag = UserServerDataService.UserPrices.First(up => up.ItemOrTag == context);

                    <MudTd Class="@(context.AssociatedItems.Any() && _showTagItems ? "border-0" : "")">
                        <MudText Typo="Typo.body2">
                            @ContextService.GetTranslation(context)

                            @if (!_showTagItems && userPriceTag.PrimaryUserPrice is not null)
                            {
                                <p Class="pl-2 d-flex">
                                    <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Star"/>
                                    <MudText Class="pl-1" Style="padding-top: 1px" Typo="Typo.body2">
                                        @ContextService.GetTranslation(userPriceTag.PrimaryUserPrice.ItemOrTag)
                                    </MudText>
                                </p>
                            }
                        </MudText>
                    </MudTd>
                    <MudTd Class="@(context.AssociatedItems.Any() && _showTagItems ? "border-0" : "")">
                        <MudNumericField T="float?"
                                         Class="rectangle-input"
                                         Disabled="@(context.IsTag)"
                                         HideSpinButtons="@(context.IsTag)"
                                         Value="userPriceTag.Price"
                                         Format="N2"
                                         Variant="Variant.Outlined"
                                         Min="context.MinPrice"
                                         Max="context.MaxPrice"
                                         ValueChanged="@(value => UpdatePriceCalculation(userPriceTag, value))"/>
                    </MudTd>
                }
            </RowTemplate>
            <ChildRowContent>
                @if (_showTagItems)
                {
                    @foreach (var item in context.AssociatedItems)
                    {
                        var userPriceTag = UserServerDataService.UserPrices.First(up => up.ItemOrTag == context);
                        var userPriceItem = UserServerDataService.UserPrices.First(up => up.ItemOrTag == item);

                        <MudTr>
                            <MudTd Class="@($"d-flex pt-0 pb-1 {(context.AssociatedItems.Last() == item ? "" : "border-0")}")">
                                <MudIconButton Icon="@(userPriceTag.PrimaryUserPrice == userPriceItem ? Icons.Material.Filled.Star : Icons.Material.Filled.StarOutline)"
                                               Size="Size.Small"
                                               OnClick="@(() => SetPrimaryUserPrice(userPriceTag, userPriceItem))"/>
                                <p Class="pt-1 pl-1">@ContextService.GetTranslation(item)</p>
                            </MudTd>
                            <MudTd Class="@(context.AssociatedItems.Last() == item ? "pt-0 pb-1" : "border-0 pt-0 pb-1")">
                                <MudNumericField T="float?"
                                                 Class="rectangle-input"
                                                 HideSpinButtons="@(PriceCalculatorService.GetCategorizedItemOrTags().ToSell.Contains(item))"
                                                 Format="N2"
                                                 Disabled="@(PriceCalculatorService.GetCategorizedItemOrTags().ToSell.Contains(item))"
                                                 Value="userPriceItem.Price"
                                                 Min="item.MinPrice"
                                                 Max="item.MaxPrice"
                                                 ValueChanged="@(value => UpdatePriceCalculation(userPriceItem, value))"
                                                 Variant="Variant.Outlined"/>
                            </MudTd>
                        </MudTr>
                    }
                }
            </ChildRowContent>
        </MudTable>
    </MudItem>
</MudItem>

<!-- Troisième Colonne -->
<MudItem sm="4" Class="pa-2 d-flex flex-column">
    <MudItem sm="12" Class="flex-grow-1 mud-elevation-2 pa-4">
        <MudAutocomplete T="Recipe"
                         Value="_emptyRecipe"
                         SearchFunc="SearchRecipes"
                         ValueChanged="AddUserRecipe"
                         Placeholder="Ajouter une recette"
                         Dense="true"
                         MaxItems="null"
                         Variant="Variant.Outlined"
                         AnchorOrigin="Origin.BottomLeft"
                         TransformOrigin="Origin.TopLeft">
            <ItemTemplate>
                <MudText>@ContextService.GetTranslation(context)</MudText>
            </ItemTemplate>
        </MudAutocomplete>

        <MudTable Items="PriceCalculatorService.GetCategorizedItemOrTagsForDisplay().ToSell"
                  Class="mt-4"
                  Dense="true"
                  FixedHeader="true"
                  Height="700px"
                  Hover="true">
            <HeaderContent>
                <MudTh>
                    Item Name
                    <MudIconButton Icon="@(_showMultiRecipes ? @Icons.Material.Outlined.Visibility : @Icons.Material.Outlined.VisibilityOff)"
                                   Size="Size.Small"
                                   Class="pa-0 pl-2"
                                   OnClick="@(() => _showMultiRecipes = !_showMultiRecipes)"/>
                </MudTh>
                <MudTh>Prices w/wo margin</MudTh>
                <MudTh>Margin</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                @{
                    var userPrice = UserServerDataService.UserPrices.First(up => up.ItemOrTag == context);
                    var relatedUserElements = UserServerDataService.UserElements
                        .Where(ue => ue.Element.IsProduct()
                                     && ue.Element.ItemOrTag == context
                                     && !ue.IsReintegrated)
                        .ToList();

                    <MudTd Class="@(relatedUserElements.Count > 1 && _showMultiRecipes ? "border-0" : "")">
                        <MudLink Color="Color.Default" Typo="Typo.body2" OnClick="@(() => ShowRecipeDialog(relatedUserElements.First().Element.Recipe))">
                            @ContextService.GetTranslation(context)
                        </MudLink>
                    </MudTd>
                    <MudTd Class="@(relatedUserElements.Count > 1 && _showMultiRecipes ? "border-0" : "")">
                        <MudStack Row>
                            <MudNumericField T="float?"
                                                Class="mt-0"
                                                Style="height: 26px; width: 75px"
                                                HideSpinButtons="true"
                                                Format="N2"
                                                Disabled="true"
                                                Value="userPrice.Price"
                                                Variant="Variant.Outlined" />
                            <MudNumericField T="float?"
                                                Class="mt-0"
                                                Style="height: 26px; width: 75px"
                                                HideSpinButtons="true"
                                                Format="N2"
                                                Disabled="true"
                                                Value="@(userPrice.Price * (1 + userPrice.UserMargin.Margin / 100))"
                                                Variant="Variant.Outlined" />
                        </MudStack>
                    </MudTd>
                    <MudTd Class="@(relatedUserElements.Count > 1 && _showMultiRecipes ? "border-0" : "")">
                        <MudSelect
                            T="UserMargin"
                            Value="userPrice.UserMargin"
                            ValueChanged="@(value => ChangeUserPriceMargin(userPrice, value))"
                            ToStringFunc="@(um => um.Margin + " %")"
                            Class="select-dense"
                            Dense="true"
                            Variant="Variant.Outlined"
                            AnchorOrigin="Origin.BottomLeft"
                            TransformOrigin="Origin.TopLeft">
                            @foreach (var userMargin in UserServerDataService.UserMargins)
                            {
                                <MudSelectItem  T="UserMargin"
                                                Value="userMargin">
                                    @userMargin.Margin %
                                </MudSelectItem>
                            }
                        </MudSelect>
                    </MudTd>
                    <MudTd Class="@(relatedUserElements.Count > 1 && _showMultiRecipes ? "border-0" : "")">
                        <MudIconButton
                            Icon="@(relatedUserElements.Count > 1 && _showMultiRecipes ? Icons.Material.Filled.PlaylistRemove : Icons.Material.Filled.Clear)"
                            Size="Size.Small"
                            OnClick="@(() => RemoveUserRecipes(UserServerDataService.UserRecipes.Where(ur => relatedUserElements.Select(ue => ue.Element.Recipe).Contains(ur.Recipe)).ToList()))">
                        </MudIconButton>
                    </MudTd>
                }
            </RowTemplate>
            <ChildRowContent>
                @if (_showMultiRecipes)
                {
                    var userPrice = UserServerDataService.UserPrices.First(up => up.ItemOrTag == context);
                    var relatedElements = UserServerDataService.UserElements
                        .Where(ue => ue.Element.IsProduct()
                                     && ue.Element.ItemOrTag == context
                                     && !ue.IsReintegrated)
                        .ToList();

                    @if (relatedElements.Count() > 1)
                    {
                        @foreach (var userElement in relatedElements)
                        {
                            <MudTr>
                                <MudTd Class="@(relatedElements.Last() == userElement ? "pt-0 pb-1" : "border-0 pt-0 pb-1")" Style="white-space: nowrap;
                                overflow: hidden; max-width: 280px">
                                    <MudIconButton Icon="@(userPrice.PrimaryUserElement == userElement ? Icons.Material.Filled.Star : Icons.Material.Filled.StarOutline)"
                                                   Size="Size.Small"
                                                   OnClick="@(() => SetPrimaryElement(userPrice, userElement))"/>
                                    <MudLink Color="Color.Default" Typo="Typo.body2" OnClick="@(() => ShowRecipeDialog(userElement.Element.Recipe))">
                                        @ContextService.GetTranslation(userElement.Element.Recipe)
                                    </MudLink>
                                </MudTd>
                                <MudTd Class="@(relatedElements.Last() == userElement ? "pt-0 pb-1" : "border-0 pt-0 pb-1")">
                                    <MudStack Row>
                                        <MudNumericField T="float?" Style="height: 26px; width: 75px" HideSpinButtons="true" Format="N2" Disabled="true" Value="@userElement.Price" Variant="Variant.Outlined"></MudNumericField>
                                        <MudNumericField T="float?" Style="height: 26px; width: 75px" HideSpinButtons="true" Format="N2" Disabled="true" Value="@(userElement.Price * (1 + userPrice.UserMargin.Margin / 100))" Variant="Variant.Outlined"></MudNumericField>
                                    </MudStack>
                                </MudTd>
                                <MudTd Class="@(relatedElements.Last() == userElement ? "pt-0 pb-1" : "border-0 pt-0 pb-1")"></MudTd>
                                <MudTd Class="@(relatedElements.Last() == userElement ? "pt-0 pb-1" : "border-0 pt-0 pb-1")">
                                    <MudIconButton Icon="@Icons.Material.Filled.Clear" aria-label="delete" Size="Size.Small" OnClick="@(() => RemoveUserRecipe(UserServerDataService.UserRecipes.First(ur => ur.Recipe == userElement.Element.Recipe)))"></MudIconButton>
                                </MudTd>
                            </MudTr>
                        }
                    }
                }
            </ChildRowContent>
        </MudTable>
    </MudItem>
</MudItem>

</MudGrid>
</MudContainer>

@code {
    private bool _showMultiRecipes = true;
    private bool _showTagItems = true;

    private Skill? _emptySkill;
    private Recipe? _emptyRecipe;
    private CraftingTable? _emptyCraftingTable;
    private string? _previousProfession;

    protected override Task OnInitializedAsync()
    {
        ContextService.OnContextChanged += StateHasChanged;

        return Task.CompletedTask;
    }

    public void Dispose()
    {
        ContextService.OnContextChanged -= StateHasChanged;
    }

    private Task<IEnumerable<Skill>> SearchSkills(string value, CancellationToken token)
    {
        IEnumerable<Skill> result;

        if (string.IsNullOrEmpty(value))
        {
            result = UserServerDataService.GetAvailableSkills();
        }
        else
        {
            result = UserServerDataService.GetAvailableSkills()
                .Where(s => ContextService.GetTranslation(s).Contains(value, StringComparison.InvariantCultureIgnoreCase))
                .ToList();
        }

        result = result.Where(s => s.Profession is not null).OrderBy(s => s.Profession);

        return Task.FromResult(result);
    }

    private Task<IEnumerable<Recipe>> SearchRecipes(string value, CancellationToken token)
    {
        IEnumerable<Recipe> result;

        if (string.IsNullOrEmpty(value))
        {
            result = UserServerDataService.GetAvailableRecipes();
        }
        else
        {
            result = UserServerDataService.GetAvailableRecipes()
                .Where(r => ContextService.GetTranslation(r).Contains(value, StringComparison.InvariantCultureIgnoreCase))
                .ToList();
        }

        result = result.OrderBy(r => r.Name);

        return Task.FromResult(result);
    }

    private Task<IEnumerable<CraftingTable>> SearchCraftingTables(string value, CancellationToken token)
    {
        IEnumerable<CraftingTable> result;

        if (string.IsNullOrEmpty(value))
        {
            result = UserServerDataService.GetAvailableCraftingTables();
        }
        else
        {
            result = UserServerDataService.GetAvailableCraftingTables()
                .Where(s => ContextService.GetTranslation(s).Contains(value, StringComparison.InvariantCultureIgnoreCase))
                .ToList();
        }

        result = result.OrderBy(c => c.Name);

        return Task.FromResult(result);
    }

    private async Task AddUserSkill(Skill? skill)
    {
        if (skill is null)
        {
            return;
        }

        UserServerDataService.AddUserSkill(skill, ContextService.CurrentUserServer!, UserServerDataService.UserSetting!.OnlyLevelAccessibleRecipes);

        _emptySkill = null;

        await PriceCalculatorService.Calculate();

        StateHasChanged();
    }

    private async Task RemoveUserSkill(UserSkill skill)
    {
        UserServerDataService.RemoveUserSkill(skill);
        await PriceCalculatorService.Calculate();
    }

    private async Task AddUserCraftingTable(CraftingTable? craftingTable)
    {
        if (craftingTable is null)
        {
            return;
        }

        UserServerDataService.AddUserCraftingTable(craftingTable, ContextService.CurrentUserServer!, true);

        _emptyCraftingTable = null;

        await PriceCalculatorService.Calculate();

        StateHasChanged();
    }

    private async Task RemoveUserCraftingTable(UserCraftingTable craftingTable)
    {
        UserServerDataService.RemoveUserCraftingTable(craftingTable);
        await PriceCalculatorService.Calculate();
    }

    private async Task AddUserRecipe(Recipe? recipe)
    {
        if (recipe is null)
        {
            return;
        }

        UserServerDataService.AddUserRecipe(recipe, ContextService.CurrentUserServer!);

        _emptyRecipe = null;

        await PriceCalculatorService.Calculate();

        StateHasChanged();
    }

    private async Task RemoveUserRecipe(UserRecipe recipe)
    {
        UserServerDataService.RemoveUserRecipe(recipe);

        await PriceCalculatorService.Calculate();
        StateHasChanged();
    }

    private async Task SetPrimaryElement(UserPrice userPrice, UserElement userElement)
    {
        userPrice.PrimaryUserElement = userPrice.PrimaryUserElement == userElement ? null : userElement;
        await PriceCalculatorService.Calculate();
    }

    private async Task RemoveUserRecipes(List<UserRecipe> recipes)
    {
        foreach (var recipe in recipes)
        {
            UserServerDataService.RemoveUserRecipe(recipe);
        }

        await PriceCalculatorService.Calculate();
        StateHasChanged();
    }

    private async Task OnLevelChanged(UserSkill userSkill, int newLevel)
    {
        if (userSkill.Level == newLevel) return;

        var isIncrease = newLevel - userSkill.Level > 0;
        userSkill.Level = newLevel;

        if (userSkill.Level < 7)
            userSkill.HasLavishTalent = false;

        if (UserServerDataService.UserSetting!.OnlyLevelAccessibleRecipes)
        {
            UserServerDataService.UserSkillLevelChange(userSkill, ContextService.CurrentUserServer!, isIncrease);
        }

        await PriceCalculatorService.Calculate();
        StateHasChanged();
    }

    private async Task OnLavishTalentChanged(UserSkill userSkill, bool newLavishTalent)
    {
        userSkill.HasLavishTalent = newLavishTalent;

        await PriceCalculatorService.Calculate();
        StateHasChanged();
    }

    private async Task ChangePluginModule(UserCraftingTable userCraftingTable, PluginModule? pluginModule)
    {
        userCraftingTable.PluginModule = pluginModule;
        await PriceCalculatorService.Calculate();
        StateHasChanged();
    }

    private async Task OnOptionDisplayChanged()
    {
        UserServerDataService.UserSetting!.DisplayNonSkilledRecipes = !UserServerDataService.UserSetting.DisplayNonSkilledRecipes;
        UserServerDataService.ToggleEmptyUserSkill(ContextService.CurrentUserServer!, UserServerDataService.UserSetting!.DisplayNonSkilledRecipes);
        await EcoCraftDbContext.SaveChangesAsync();
    }

    private async Task OnOptionOnlyLevelChanged()
    {
        UserServerDataService.UserSetting!.OnlyLevelAccessibleRecipes = !UserServerDataService.UserSetting.OnlyLevelAccessibleRecipes;

        if (UserServerDataService.UserSetting!.OnlyLevelAccessibleRecipes)
        {
            UserServerDataService.RemoveNonAllowedUserRecipes();
        }

        await EcoCraftDbContext.SaveChangesAsync();
    }

    private async Task UpdateCalorieCost(float calorieCost)
    {
        UserServerDataService.UserSetting!.CalorieCost = calorieCost;
        UserServerDataService.UpdateUserSetting(UserServerDataService.UserSetting);
        await PriceCalculatorService.Calculate();
        StateHasChanged();
    }

    private async Task UpdateMargin(UserMargin userMargin, float margin)
    {
        userMargin.Margin = margin;
        //await PriceCalculatorService.Calculate();
        await EcoCraftDbContext.SaveChangesAsync();
        //StateHasChanged();
    }

    private async Task UpdateMarginName(UserMargin userMargin, string name)
    {
        userMargin.Name = name;
        await EcoCraftDbContext.SaveChangesAsync();
        //StateHasChanged();
    }

    private async Task OnAddMargin()
    {
        UserServerDataService.CreateUserMargin(ContextService.CurrentUserServer!);
        await EcoCraftDbContext.SaveChangesAsync();
    }

    private async Task OnRemoveMargin(UserMargin userMargin)
    {
        if(UserServerDataService.UserMargins.Count == 1)
        {
            this.Snackbar.Add("You can't remove your last margin", Severity.Error);
            return;
        }
        UserServerDataService.RemoveUserMargin(userMargin);
        await EcoCraftDbContext.SaveChangesAsync();
        StateHasChanged();
    }

    private async Task ChangeUserPriceMargin(UserPrice userPrice, UserMargin userMargin)
    {
        userPrice.UserMargin = userMargin;
        UserPriceDbService.Update(userPrice);
        await EcoCraftDbContext.SaveChangesAsync();
        //await PriceCalculatorService.Calculate();
        //StateHasChanged();
    }

    private async Task UpdatePriceCalculation(UserPrice userPrice, float? value)
    {
        userPrice.Price = value;
        UserPriceDbService.Update(userPrice);
        await PriceCalculatorService.Calculate();
        StateHasChanged();
    }

    private async Task ShowRecipeDialog(Recipe recipe)
    {
        var parameters = new DialogParameters
        {
            ["Recipe"] = recipe,
        };
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = DialogService.Show<RecipeDialog>(ContextService.GetTranslation(recipe), parameters, options);

        await dialog.Result;
        await PriceCalculatorService.Calculate();
        StateHasChanged();
    }

    private async Task SetPrimaryUserPrice(UserPrice userPrice, UserPrice target)
    {
        userPrice.PrimaryUserPrice = userPrice.PrimaryUserPrice == target ? null : target;

        await PriceCalculatorService.Calculate();
    }

}
