@page "/"
@implements IDisposable
@using ecocraft.Models
@using ecocraft.Services
@inject ContextService ContextService
@inject UserServerDataService UserServerDataService

<PageTitle>Price Calculator</PageTitle>

<MudContainer>
	<MudGrid>
		<!-- Première Colonne -->
		<MudItem sm="4" Class="border-solid border-2 mud-border-primary pa-4">
			<MudAutocomplete T="Skill"
			                 Value="_emptySkill"
			                 SearchFunc="SearchSkills"
			                 ValueChanged="AddUserSkill"
			                 Placeholder="Choose skills"
			                 Dense="true"
			                 MaxItems="null"
			                 Variant="Variant.Outlined"
			                 AnchorOrigin="Origin.BottomLeft"
			                 TransformOrigin="Origin.TopLeft">
				<ItemTemplate>
					@if (!string.IsNullOrEmpty(context.Profession) && previousProfession != context.Profession)
					{
						<MudText Color="Color.Primary" Typo="Typo.caption">@context.Profession</MudText>
					}
					<MudText>@context.Name</MudText>
					@{
						previousProfession = context.Profession;
					}
				</ItemTemplate>
			</MudAutocomplete>

			<MudTable Items="UserServerDataService.UserSkills" Dense="true">
				<HeaderContent>
					<MudTh>Name</MudTh>
					<MudTh>Level</MudTh>
					<MudTh>Action</MudTh>
				</HeaderContent>
				<RowTemplate>
					<MudTd>
						@context.Skill.Name
					</MudTd>
					<MudTd>
						<MudNumericField HideSpinButtons="true" T="int" Value=@context.Level Variant="Variant.Text" Min="0" Max="7" Style="width: 24px;" Immediate="true" ValueChanged="(int newValue) => OnLevelChanged(context,newValue)" />
					</MudTd>
					<MudTd>
						<MudIconButton Icon="@Icons.Material.Filled.Clear" aria-label="delete" Size="Size.Small" OnClick="@(() => RemoveUserSkill(context))"></MudIconButton>
					</MudTd>
				</RowTemplate>
			</MudTable>

			<MudDivider DividerType="DividerType.FullWidth" Class="my-6" />

			<MudAutocomplete T="CraftingTable"
			                 Value="_emptyCraftingTable"
			                 SearchFunc="SearchCraftingTables"
			                 ValueChanged="AddUserCraftingTable"
			                 Placeholder="Choose a crafting table..." 
			                 Dense="true"
			                 MaxItems="null"
			                 Variant="Variant.Outlined"
			                 AnchorOrigin="Origin.BottomLeft"
			                 TransformOrigin="Origin.TopLeft">
			</MudAutocomplete>

			<MudTable Items="UserServerDataService.UserCraftingTables" Dense="true">
				<HeaderContent>
					<MudTh>Name</MudTh>
					<MudTh>Upgrade</MudTh>
					<MudTh>Action</MudTh>
				</HeaderContent>
				<RowTemplate>
					<MudTd>
						@context.CraftingTable.Name
					</MudTd>
					<MudTd>
						<MudSelect T="PluginModule" Placeholder="Choose a module" Value=@context.PluginModule Dense="true" Variant="Variant.Outlined" ValueChanged="(PluginModule newPluginModule) => OnSelectedPluginModuleChanged(context, newPluginModule)" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
							@foreach (var pluginModule in context.CraftingTable.PluginModules)
						{
							<MudSelectItem T="PluginModule" Value="@pluginModule">@pluginModule.Name</MudSelectItem>
						}
						</MudSelect> 
					</MudTd>
					<MudTd>
						<MudIconButton Icon="@Icons.Material.Filled.Clear" aria-label="delete" Size="Size.Small" OnClick="@(() => RemoveUserCraftingTable(context))"></MudIconButton>
					</MudTd>
				</RowTemplate>
			</MudTable> 
 		</MudItem>

		<!-- Deuxième Colonne -->
		<MudItem sm="4" Class="border-solid border-2 mud-border-primary pa-4">
			<MudStack>
				<MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
					<MudText>Price per 1000 calories</MudText>
					@if (UserServerDataService.UserSetting is not null)
					{
						<div>
							@* <MudNumericField OnBlur="UpdateUser" T="decimal" @bind-Value="user.CalorieCost" HideSpinButtons="true" Variant="Variant.Outlined" Style="width: 40px;" /> *@
							<MudNumericField T="float" ValueChanged="UpdateCalorieCost" Value="UserServerDataService.UserSetting.CalorieCost" HideSpinButtons="true" Variant="Variant.Outlined" Style="width: 40px;" />
						</div>					
					}

				</MudStack>
				@* <MudStack Justify="Justify.SpaceBetween" Row="true" Spacing="3" AlignItems="AlignItems.Center">
					<MudText>Profit percentage</MudText>
					<div>
						<MudNumericField OnBlur="UpdateUser" T="decimal" @bind-Value="user.ProfitMargin" HideSpinButtons="true" Variant="Variant.Text" Style="width: 40px;" />
					</div>
				</MudStack> *@
			</MudStack>
		</MudItem>

		<!-- Troisième Colonne -->
		<MudItem xs="12" sm="4" Class="border-solid border-2 mud-border-primary pa-4">
			<MudAutocomplete T="Recipe"
			                 Value="_emptyRecipe"
			                 SearchFunc="SearchRecipes"
			                 ValueChanged="AddUserRecipe"
			                 Placeholder="Ajouter une recette" 
			                 Dense="true"
			                 MaxItems="null"
			                 Variant="Variant.Outlined" 
			                 AnchorOrigin="Origin.BottomLeft" 
			                 TransformOrigin="Origin.TopLeft">
			</MudAutocomplete>

			<MudTable Items="UserServerDataService.UserRecipes" Dense="true">
				<HeaderContent>
					<MudTh>Name</MudTh>
					<MudTh>Price</MudTh>
					<MudTh>Action</MudTh>
				</HeaderContent>
				<RowTemplate>
					<MudTd>
						@context.Recipe.Name
					</MudTd>
					<MudTd>
						<MudTextField Disabled="true" Value="0"></MudTextField>
					</MudTd>
					<MudTd>
						<MudIconButton Icon="@Icons.Material.Filled.Clear" aria-label="delete" Size="Size.Small" OnClick="@(() => RemoveUserRecipe(context))"></MudIconButton>
					</MudTd>
				</RowTemplate>
			</MudTable>
		</MudItem>

	</MudGrid>
</MudContainer>

@code {
	private Skill? _emptySkill = null;
	private Recipe? _emptyRecipe = null;
	private CraftingTable? _emptyCraftingTable = null;
	private string previousProfession = null;

	protected override Task OnInitializedAsync()
	{
		ContextService.OnContextChanged += StateHasChanged;
		
		return Task.CompletedTask;
	}

	public void Dispose()
	{
		ContextService.OnContextChanged -= StateHasChanged;
	}

	private Task<IEnumerable<Skill>> SearchSkills(string value)
	{
		IEnumerable<Skill> result;

		if (string.IsNullOrEmpty(value))
		{
			result = UserServerDataService.GetAvailableSkills();
		}
		else
		{
			result = UserServerDataService.GetAvailableSkills()
				.Where(s => s.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase))
				.ToList();
		}

		result = result.Where(s => s.Profession is not null).OrderBy(s => s.Profession);

		return Task.FromResult(result);
	}

	private Task<IEnumerable<Recipe>> SearchRecipes(string value)
	{
		IEnumerable<Recipe> result;

		if (string.IsNullOrEmpty(value))
		{
			result = UserServerDataService.GetAvailableRecipes();
		}
		else
		{
			result = UserServerDataService.GetAvailableRecipes()
				.Where(r => r.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase))
				.ToList();
		}

		result = result.OrderBy(r => r.Name);

		return Task.FromResult(result);
	}

	private Task<IEnumerable<CraftingTable>> SearchCraftingTables(string value)
	{
		IEnumerable<CraftingTable> result;

		if (string.IsNullOrEmpty(value))
		{
			result = UserServerDataService.GetAvailableCraftingTables();
		}
		else
		{
			result = UserServerDataService.GetAvailableCraftingTables()
				.Where(s => s.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase))
				.ToList();
		}

		result = result.OrderBy(c => c.Name);

		return Task.FromResult(result);
	}

	private void AddUserSkill(Skill? skill)
	{
		if (skill is null)
		{
			return;
		}

		var userSkill = new UserSkill
		{
			Skill = skill,
			UserServer = ContextService.CurrentUserServer!,
			Level = 1,
		};

		UserServerDataService.AddUserSkill(userSkill);
		UserServerDataService.UpdateUserCraftingTables(ContextService.CurrentUserServer!);
		UserServerDataService.UpdateUserRecipes(ContextService.CurrentUserServer!);


		_emptySkill = null;
	}

	private void RemoveUserSkill(UserSkill skill)
	{
		UserServerDataService.RemoveUserSkill(skill);
		UserServerDataService.UpdateUserCraftingTables(ContextService.CurrentUserServer!);
		UserServerDataService.UpdateUserRecipes(ContextService.CurrentUserServer!);
	}

	private void AddUserCraftingTable(CraftingTable? craftingTable)
	{
		if (craftingTable is null)
		{
			return;
		}

		var userCraftingTable = new UserCraftingTable
		{
			CraftingTable = craftingTable,
			UserServer = ContextService.CurrentUserServer!,
			PluginModule = null
		};

		UserServerDataService.AddUserCraftingTable(userCraftingTable);
		UserServerDataService.UpdateUserRecipes(ContextService.CurrentUserServer!);

		_emptyCraftingTable = null;
	}

	private void RemoveUserCraftingTable(UserCraftingTable craftingTable)
	{
		UserServerDataService.RemoveUserCraftingTable(craftingTable);
		UserServerDataService.UpdateUserRecipes(ContextService.CurrentUserServer!);
	}

	private void AddUserRecipe(Recipe? recipe)
	{
		if (recipe is null)
		{
			return;
		}

		var userRecipe = new UserRecipe
		{
			Recipe = recipe,
			UserServer = ContextService.CurrentUserServer!,
		};

		UserServerDataService.AddUserRecipe(userRecipe);

		_emptySkill = null;
	}

	private void RemoveUserRecipe(UserRecipe recipe)
	{
		UserServerDataService.RemoveUserRecipe(recipe);
	}

	private void OnLevelChanged(UserSkill userSkill, int newLevel)
	{
		userSkill.Level = newLevel;
		// Comment gère-t-on l'argument limitToSkillLevelRecipes ?

		UserServerDataService.UpdateUserRecipes(ContextService.CurrentUserServer!);
	}

	private void OnSelectedPluginModuleChanged(UserCraftingTable userCraftingTable, PluginModule newUpgrade)
	{
		userCraftingTable.PluginModule = newUpgrade;
	}

	private void UpdateCalorieCost(float calorieCost)
	{
		UserServerDataService.UserSetting!.CalorieCost = calorieCost;
		UserServerDataService.UpdateUserSetting(UserServerDataService.UserSetting);
	}
}
