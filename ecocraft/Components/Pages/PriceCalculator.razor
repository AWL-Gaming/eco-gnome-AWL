@page "/"
@implements IDisposable
@using ecocraft.Components.Dialog
@using ecocraft.Models
@using ecocraft.Services
@using ecocraft.Services.DbServices
@inject IDialogService DialogService
@inject ContextService ContextService
@inject ServerDataService ServerDataService
@inject UserServerDataService UserServerDataService
@inject UserPriceDbService UserPriceDbService
@inject LocalStorageService LocalStorageService
@inject PriceCalculatorService PriceCalculatorService

<PageTitle>Price Calculator</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
<MudGrid Style="height: auto">
<!-- Première Colonne -->
<MudItem sm="4" Class="pa-2 d-flex flex-column">
    <MudItem sm="12" Class="flex-grow-1 mud-elevation-2 pa-4">
        <MudAutocomplete T="Skill"
                         @ref="_autocompleteSkillRef"
                         Value="_emptySkill"
                         SearchFunc="SearchSkills"
                         ValueChanged="AddUserSkill"
                         Placeholder="Choose skills"
                         Dense="true"
                         MaxItems="null"
                         Variant="Variant.Outlined"
                         AnchorOrigin="Origin.BottomLeft"
                         TransformOrigin="Origin.TopLeft">
            <ItemTemplate>
                @if (!string.IsNullOrEmpty(context.Profession) && _previousProfession != context.Profession)
                {
                    <MudText Color="Color.Primary" Typo="Typo.caption">@ContextService.GetTranslation(ServerDataService.Skills.First(s => s.Name == context.Profession))</MudText>
                }
                <MudText>@ContextService.GetTranslation(context)</MudText>
                @{
                    _previousProfession = context.Profession;
                }
            </ItemTemplate>
        </MudAutocomplete>

        <MudTable Items="UserServerDataService.UserSkills.Where(us => us.Skill is not null)" Dense="true" Class="mt-4">
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Level</MudTh>
                <MudTh>Action</MudTh>
            </HeaderContent>
            <RowTemplate>
                @* <MudStack Justify="Justify.SpaceBetween"> *@
                @* <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween"> *@
                <MudTd>
                    <MudText>@ContextService.GetTranslation(context.Skill)</MudText>
                    @if (context.Level >= 7 && context.Skill.LavishTalentValue is not null)
                    {
                        <MudCheckBox Value="context.HasLavishTalent" Label="Lavish talent" Color="Color.Primary" ValueChanged="(bool newLavishTalent) => OnLavishTalentChanged(context, newLavishTalent)"></MudCheckBox>
                    }
                </MudTd>
                <MudTd>
                    <MudNumericField T="int"
                                     Value=@context.Level
                                     Min="1"
                                     Max="7"
                                     Variant="Variant.Outlined"
                                     Style="height: 35px; width: 75px;"
                                     Immediate="true"
                                     ValueChanged="(int newValue) => OnLevelChanged(context, newValue)"/>
                </MudTd>
                <MudTd>
                    <MudIconButton Icon="@Icons.Material.Filled.Clear" aria-label="delete" Size="Size.Small" OnClick="@(() => RemoveUserSkill(context))"></MudIconButton>
                </MudTd>
                @* </MudStack> *@
                @* </MudStack> *@
            </RowTemplate>
        </MudTable>

        <MudDivider DividerType="DividerType.FullWidth" Class="my-6"/>

        <MudAutocomplete T="CraftingTable"
                         @ref="_autocompleteCraftingTableRef"
                         Value="_emptyCraftingTable"
                         SearchFunc="SearchCraftingTables"
                         ValueChanged="AddUserCraftingTable"
                         Placeholder="Choose a crafting table..."
                         Dense="true"
                         MaxItems="null"
                         Variant="Variant.Outlined"
                         AnchorOrigin="Origin.BottomLeft"
                         TransformOrigin="Origin.TopLeft">
            <ItemTemplate>
                <MudText>@ContextService.GetTranslation(context)</MudText>
            </ItemTemplate>
        </MudAutocomplete>

        <MudTable Items="UserServerDataService.UserCraftingTables" Class="mt-4" Dense="true">
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Upgrade</MudTh>
                <MudTh>Action</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>
                    <MudText>@ContextService.GetTranslation(context.CraftingTable)</MudText>
                </MudTd>
                <MudTd>
                    <MudSelect T="PluginModule"
                               Class="select-dense"
                               Placeholder="Choose a module"
                               Value="context.PluginModule"
                               ValueChanged="@(value => ChangePluginModule(context, value))"
                               Dense="true"
                               Variant="Variant.Outlined"
                               ToStringFunc="@(pm => pm == null ? "No Module" : pm.Name)"
                               AnchorOrigin="Origin.BottomLeft"
                               TransformOrigin="Origin.TopLeft">
                        <MudSelectItem T="PluginModule" Value="@null">No Module</MudSelectItem>
                        @foreach (var pluginModule in context.CraftingTable.PluginModules.OrderByDescending(pm => pm.Percent))
                        {
                            <MudSelectItem T="PluginModule"
                                           Value="@pluginModule">
                                @ContextService.GetTranslation(pluginModule)
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudTd>
                <MudTd>
                    <MudIconButton Icon="@Icons.Material.Filled.Clear" aria-label="delete" Size="Size.Small" OnClick="@(() => RemoveUserCraftingTable(context))"></MudIconButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudItem>
</MudItem>

<!-- Deuxième Colonne -->
<MudItem sm="4" Class="pa-2 d-flex flex-column">
    <MudItem sm="12" Class="flex-grow-1 mud-elevation-2 pa-4">
        <MudStack Spacing="0">
            <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                <MudText>Display non-skilled recipes</MudText>
                <MudCheckBox T="bool" @bind-Value="DisplayNonSkilledRecipes" Variant="Variant.Outlined"/>
            </MudStack>
            <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                <MudText>Only level-accessible recipes</MudText>
                <MudCheckBox T="bool" @bind-Value="OnlyLevelAccessibleRecipes" Variant="Variant.Outlined"/>
            </MudStack>
            <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                <MudText>Price per 1000 calories</MudText>
                @if (UserServerDataService.UserSetting is not null)
                {
                    <div>
                        <MudNumericField T="float"
                                         ValueChanged="UpdateCalorieCost"
                                         Style="height: 35px; width: 100px"
                                         Value="UserServerDataService.UserSetting.CalorieCost"
                                         Variant="Variant.Outlined"/>
                    </div>
                }
            </MudStack>
            <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                <MudText>Profit percentage</MudText>
                @if (UserServerDataService.UserSetting is not null)
                {
                    <div>
                        <MudNumericField T="float"
                                         ValueChanged="UpdateMargin"
                                         Style="height: 35px; width: 100px"
                                         Value="UserServerDataService.UserSetting.Margin"
                                         Variant="Variant.Outlined"/>
                    </div>
                }
            </MudStack>
        </MudStack>

        <MudDivider DividerType="DividerType.FullWidth" Class="my-6"/>

        <MudTable Items="@(PriceCalculatorService.GetUserPricesToBuy(true))" Dense="true">
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Price</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>
                    <div style="height: 41px; display: table-cell; vertical-align: middle">
                        <MudText Class="small-text">@ContextService.GetTranslation(context.ItemOrTag)</MudText>
                    </div>
                    @if (context.ItemOrTag.IsTag)
                    {
                        var userPriceTag = UserServerDataService.UserPrices.FirstOrDefault(up => up.ItemOrTag == context.ItemOrTag);

                        <MudTable Items="context.ItemOrTag.AssociatedItems" Elevation="0" Class="pa-0 tag-mud-table" Dense="true">
                            <RowTemplate Context="item">
                                @{
                                    var userPriceItem = UserServerDataService.UserPrices.FirstOrDefault(up => up.ItemOrTag == item);

                                    <MudTd Style="height: 31px; display: flex;" Class="pt-0 pb-0">
                                        <MudIconButton Icon="@(userPriceTag?.PrimaryUserPrice == userPriceItem ? Icons.Material.Filled.Star : Icons.Material.Filled.StarOutline)"
                                                       Size="Size.Small"
                                                       OnClick="@(() => SetPrimaryUserPrice(userPriceTag, userPriceItem))"/>
                                        <p Class="pt-2 pl-1">@ContextService.GetTranslation(item)</p>
                                    </MudTd>
                                }
                            </RowTemplate>
                        </MudTable>
                    }
                </MudTd>
                <MudTd Class="buy-items-price-cell">
                    <div style="height: 41px; display: table-cell; vertical-align: middle">
                        <MudNumericField T="float?"
                                         Class="rectangle-input"
                                         Disabled="@(context.ItemOrTag.IsTag)"
                                         HideSpinButtons="@(context.ItemOrTag.IsTag)"
                                         Value="context.Price"
                                         Format="N2"
                                         Variant="Variant.Outlined"
                                         ValueChanged="@(value => UpdatePriceCalculation(context, value))"/>
                    </div>
                    @if (context.ItemOrTag.IsTag)
                    {
                        <MudTable Items="context.ItemOrTag.AssociatedItems" Elevation="0" Class="pa-0 tag-mud-table" Dense="true">
                            <RowTemplate Context="item">
                                @{
                                    var userPriceItem = UserServerDataService.UserPrices.FirstOrDefault(up => up.ItemOrTag == item);

                                    <MudTd Class="pa-0">
                                        <MudNumericField T="float?"
                                                         Class="rectangle-input"
                                                         HideSpinButtons="true"
                                                         Format="N2"
                                                         Disabled="@(PriceCalculatorService.GetUserPricesToSell().Any(up => up.Key.ItemOrTag == item))"
                                                         Value="userPriceItem.Price"
                                                         ValueChanged="@(value => UpdatePriceCalculation(userPriceItem, value))"
                                                         Variant="Variant.Outlined"/>
                                    </MudTd>
                                }
                            </RowTemplate>
                        </MudTable>
                    }
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudItem>
</MudItem>

<!-- Troisième Colonne -->
<MudItem sm="4" Class="pa-2 d-flex flex-column">
    <MudItem sm="12" Class="flex-grow-1 mud-elevation-2 pa-4">
        <MudAutocomplete T="Recipe"
                         @ref="_autocompleteRecipeRef"
                         Value="_emptyRecipe"
                         SearchFunc="SearchRecipes"
                         ValueChanged="AddUserRecipe"
                         Placeholder="Ajouter une recette"
                         Dense="true"
                         MaxItems="null"
                         Variant="Variant.Outlined"
                         AnchorOrigin="Origin.BottomLeft"
                         TransformOrigin="Origin.TopLeft">
            <ItemTemplate>
                <MudText>@ContextService.GetTranslation(context)</MudText>
            </ItemTemplate>
        </MudAutocomplete>

        <MudContainer MaxWidth="MaxWidth.False" Class="pa-3 mud-elevation-1 mt-4 mud-table">
            <MudGrid>
                <MudItem sm="12">
                    <MudGrid>
                        <MudItem sm="6">
                            Item Name
                        </MudItem>
                        <MudItem sm="4">
                            Prices w/wo margin
                        </MudItem>
                        <MudItem sm="2">
                            Action
                        </MudItem>
                    </MudGrid>
                </MudItem>
                @foreach (var upe in PriceCalculatorService.GetUserPricesToSell())
                {
                    <MudItem sm="12" Class="@(upe.Value.Count == 1 ? "" : "pb-0")" Style="border-top: 1px solid var(--mud-palette-table-lines) ">
                        <MudGrid Class="pb-0">
                            <MudItem sm="6">
                                @ContextService.GetTranslation(upe.Key.ItemOrTag)
                                @if (upe.Value.Count == 1)
                                {
                                    <MudIconButton Icon="@Icons.Material.Filled.Info" Size="Size.Small" OnClick="@(() => ShowRecipeDialog(upe.Value.First().Element.Recipe))"></MudIconButton>
                                }
                            </MudItem>
                            <MudItem sm="4" Class="d-flex">
                                <MudNumericField T="float?"
                                                 Class="mt-0"
                                                 Style="height: 25px; width: 75px"
                                                 HideSpinButtons="true"
                                                 Format="N2"
                                                 Disabled="true"
                                                 Value="upe.Key.Price"
                                                 Variant="Variant.Outlined"/>
                                <MudNumericField T="float?"
                                                 Class="mt-0"
                                                 Style="height: 25px; width: 75px"
                                                 HideSpinButtons="true"
                                                 Format="N2"
                                                 Disabled="true"
                                                 Value="@(upe.Key.Price * (1 + UserServerDataService.UserSetting!.Margin / 100))"
                                                 Variant="Variant.Outlined"/>
                            </MudItem>
                            <MudItem sm="2">
                                <MudIconButton
                                    Icon="@(upe.Value.Count == 1 ? Icons.Material.Filled.Clear : Icons.Material.Filled.PlaylistRemove)"
                                    Size="Size.Small"
                                    OnClick="@(() => RemoveUserRecipes(UserServerDataService.UserRecipes.Where(ur => upe.Value.Select(ue => ue.Element.Recipe).Contains(ur.Recipe)).ToList()))">
                                </MudIconButton>
                            </MudItem>
                        </MudGrid>
                    </MudItem>
                    @if (upe.Value.Count > 1)
                    {
                        @foreach (var userElement in upe.Value)
                        {
                            <MudItem sm="12" Class="@(upe.Value.Last() == userElement ? "pb-2 pt-0" : "pb-0 pt-0")">
                                <MudGrid>
                                    <MudItem sm="6">
                                        <MudIconButton Icon="@(upe.Key.PrimaryUserElement == userElement ? Icons.Material.Filled.Star : Icons.Material.Filled.StarOutline)"
                                                       Size="Size.Small"
                                                       OnClick="@(() => SetPrimaryElement(upe.Key, userElement))"/>
                                        @ContextService.GetTranslation(userElement.Element.Recipe)
                                        <MudIconButton Icon="@Icons.Material.Filled.Info" Size="Size.Small" OnClick="@(() => ShowRecipeDialog(userElement.Element.Recipe))"/>
                                    </MudItem>
                                    <MudItem sm="4" Class="d-flex">
                                        <MudNumericField T="float?" Style="height: 25px; width: 75px" HideSpinButtons="true" Format="N2" Disabled="true" Value="@userElement.Price" Variant="Variant.Outlined"></MudNumericField>
                                        <MudNumericField T="float?" Style="height: 25px; width: 75px" HideSpinButtons="true" Format="N2" Disabled="true" Value="@(userElement.Price * (1 + UserServerDataService.UserSetting!.Margin / 100))" Variant="Variant.Outlined"></MudNumericField>
                                    </MudItem>
                                    <MudItem sm="2">
                                        <MudIconButton Icon="@Icons.Material.Filled.Clear" aria-label="delete" Size="Size.Small" OnClick="@(() => RemoveUserRecipe(UserServerDataService.UserRecipes.First(ur => ur.Recipe == userElement.Element.Recipe)))"></MudIconButton>
                                    </MudItem>
                                </MudGrid>
                            </MudItem>
                        }
                    }
                }
            </MudGrid>
        </MudContainer>
    </MudItem>
</MudItem>

</MudGrid>
</MudContainer>

@code {
    private MudAutocomplete<Skill>? _autocompleteSkillRef;
    private MudAutocomplete<CraftingTable>? _autocompleteCraftingTableRef;
    private MudAutocomplete<Recipe>? _autocompleteRecipeRef;

    private Skill? _emptySkill;
    private Recipe? _emptyRecipe;
    private CraftingTable? _emptyCraftingTable;
    private string? _previousProfession;
    private bool _onlyLevelAccessibleRecipes = true;
    private bool _displayNonSkilledRecipes = true;

    public bool OnlyLevelAccessibleRecipes
    {
        get => _onlyLevelAccessibleRecipes;
        set
        {
            _onlyLevelAccessibleRecipes = value;
            UpdateLocalSettings();
            if (_onlyLevelAccessibleRecipes)
            {
                UserServerDataService.RemoveNonAllowedUserRecipes();
            }

            StateHasChanged();
        }
    }

    public bool DisplayNonSkilledRecipes
    {
        get => _displayNonSkilledRecipes;
        set
        {
            _displayNonSkilledRecipes = value;
            UpdateLocalSettings();
            UserServerDataService.ToggleEmptyUserSkill(ContextService.CurrentUserServer!, _displayNonSkilledRecipes);
            StateHasChanged();
        }
    }

    protected override Task OnInitializedAsync()
    {
        ContextService.OnContextChanged += StateHasChanged;

        return Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        OnlyLevelAccessibleRecipes = await LocalStorageService.GetItem("onlyLevelAccessibleRecipes") == "True";
        DisplayNonSkilledRecipes = await LocalStorageService.GetItem("displayNonSkilledRecipes") == "True";

        StateHasChanged();
    }

    public void Dispose()
    {
        ContextService.OnContextChanged -= StateHasChanged;
    }

    private async void UpdateLocalSettings()
    {
        await LocalStorageService.AddItem("onlyLevelAccessibleRecipes", OnlyLevelAccessibleRecipes.ToString());
        await LocalStorageService.AddItem("displayNonSkilledRecipes", DisplayNonSkilledRecipes.ToString());
    }

    private Task<IEnumerable<Skill>> SearchSkills(string value, CancellationToken token)
    {
        IEnumerable<Skill> result;

        if (string.IsNullOrEmpty(value))
        {
            result = UserServerDataService.GetAvailableSkills();
        }
        else
        {
            result = UserServerDataService.GetAvailableSkills()
                .Where(s => ContextService.GetTranslation(s).Contains(value, StringComparison.InvariantCultureIgnoreCase))
                .ToList();
        }

        result = result.Where(s => s.Profession is not null).OrderBy(s => s.Profession);

        return Task.FromResult(result);
    }

    private Task<IEnumerable<Recipe>> SearchRecipes(string value, CancellationToken token)
    {
        IEnumerable<Recipe> result;

        if (string.IsNullOrEmpty(value))
        {
            result = UserServerDataService.GetAvailableRecipes();
        }
        else
        {
            result = UserServerDataService.GetAvailableRecipes()
                .Where(r => ContextService.GetTranslation(r).Contains(value, StringComparison.InvariantCultureIgnoreCase))
                .ToList();
        }

        result = result.OrderBy(r => r.Name);

        return Task.FromResult(result);
    }

    private Task<IEnumerable<CraftingTable>> SearchCraftingTables(string value, CancellationToken token)
    {
        IEnumerable<CraftingTable> result;

        if (string.IsNullOrEmpty(value))
        {
            result = UserServerDataService.GetAvailableCraftingTables();
        }
        else
        {
            result = UserServerDataService.GetAvailableCraftingTables()
                .Where(s => ContextService.GetTranslation(s).Contains(value, StringComparison.InvariantCultureIgnoreCase))
                .ToList();
        }

        result = result.OrderBy(c => c.Name);

        return Task.FromResult(result);
    }

    private async Task AddUserSkill(Skill? skill)
    {
        if (skill is null)
        {
            return;
        }

        UserServerDataService.AddUserSkill(skill, ContextService.CurrentUserServer!, OnlyLevelAccessibleRecipes);

        _emptySkill = null;
        _autocompleteSkillRef?.ClearAsync();

        await PriceCalculatorService.Calculate();

        StateHasChanged();
    }

    private async Task RemoveUserSkill(UserSkill skill)
    {
        UserServerDataService.RemoveUserSkill(skill);
        await PriceCalculatorService.Calculate();
    }

    private async Task AddUserCraftingTable(CraftingTable? craftingTable)
    {
        if (craftingTable is null)
        {
            return;
        }

        UserServerDataService.AddUserCraftingTable(craftingTable, ContextService.CurrentUserServer!, true);

        _emptyCraftingTable = null;
        _autocompleteCraftingTableRef?.ClearAsync();

        await PriceCalculatorService.Calculate();

        StateHasChanged();
    }

    private async Task RemoveUserCraftingTable(UserCraftingTable craftingTable)
    {
        UserServerDataService.RemoveUserCraftingTable(craftingTable);
        await PriceCalculatorService.Calculate();
    }

    private async Task AddUserRecipe(Recipe? recipe)
    {
        if (recipe is null)
        {
            return;
        }

        UserServerDataService.AddUserRecipe(recipe, ContextService.CurrentUserServer!);

        _emptyRecipe = null;
        _autocompleteRecipeRef?.ClearAsync();

        await PriceCalculatorService.Calculate();

        StateHasChanged();
    }

    private async Task RemoveUserRecipe(UserRecipe recipe)
    {
        UserServerDataService.RemoveUserRecipe(recipe);

        await PriceCalculatorService.Calculate();
        StateHasChanged();
    }

    private async Task SetPrimaryElement(UserPrice userPrice, UserElement userElement)
    {
        userPrice.PrimaryUserElement = userPrice.PrimaryUserElement == userElement ? null : userElement;
        await PriceCalculatorService.Calculate();
    }

    private async Task RemoveUserRecipes(List<UserRecipe> recipes)
    {
        foreach (var recipe in recipes)
        {
            UserServerDataService.RemoveUserRecipe(recipe);
        }

        await PriceCalculatorService.Calculate();
        StateHasChanged();
    }

    private async Task OnLevelChanged(UserSkill userSkill, int newLevel)
    {
        if (userSkill.Level == newLevel) return;

        var isIncrease = newLevel - userSkill.Level > 0;
        userSkill.Level = newLevel;

        if (userSkill.Level < 7)
            userSkill.HasLavishTalent = false;

        if (OnlyLevelAccessibleRecipes)
        {
            UserServerDataService.UserSkillLevelChange(userSkill, ContextService.CurrentUserServer!, isIncrease);
        }

        await PriceCalculatorService.Calculate();
        StateHasChanged();
    }

    private async Task OnLavishTalentChanged(UserSkill userSkill, bool newLavishTalent)
    {
        userSkill.HasLavishTalent = newLavishTalent;

        await PriceCalculatorService.Calculate();
        StateHasChanged();
    }

    private async Task ChangePluginModule(UserCraftingTable userCraftingTable, PluginModule? pluginModule)
    {
        userCraftingTable.PluginModule = pluginModule;
        await PriceCalculatorService.Calculate();
        StateHasChanged();
    }

    private async Task UpdateCalorieCost(float calorieCost)
    {
        UserServerDataService.UserSetting!.CalorieCost = calorieCost;
        UserServerDataService.UpdateUserSetting(UserServerDataService.UserSetting);
        await PriceCalculatorService.Calculate();
        StateHasChanged();
    }

    private async Task UpdateMargin(float margin)
    {
        UserServerDataService.UserSetting!.Margin = margin;
        UserServerDataService.UpdateUserSetting(UserServerDataService.UserSetting);
        await PriceCalculatorService.Calculate();
        StateHasChanged();
    }

    private async Task UpdatePriceCalculation(UserPrice userPrice, float? value)
    {
        userPrice.Price = value;
        UserPriceDbService.Update(userPrice);
        await PriceCalculatorService.Calculate();
        StateHasChanged();
    }

    private async Task ShowRecipeDialog(Recipe recipe)
    {
        var parameters = new DialogParameters
        {
            ["Recipe"] = recipe,
        };
        var dialog = DialogService.Show<RecipeDialog>(ContextService.GetTranslation(recipe), parameters);

        await dialog.Result;
        await PriceCalculatorService.Calculate();
        StateHasChanged();
    }

    private async Task SetPrimaryUserPrice(UserPrice userPrice, UserPrice target)
    {
        if (userPrice.PrimaryUserPrice == target)
        {
            userPrice.PrimaryUserPrice = null;
        }
        else
        {
            userPrice.PrimaryUserPrice = target;
        }

        await PriceCalculatorService.Calculate();
    }

}
