@page "/"
@implements IDisposable
@using ecocraft.Models
@using ecocraft.Services
@inject EcoCraftDbContext DbContext
@inject UserSkillDbService UserSkillDbService
@inject UserCraftingTableDbService UserCraftingTableDbService
@inject ContextService ContextService
@inject ServerDataService ServerDataService
@inject UserDataService UserDataService

<PageTitle>Price Calculator</PageTitle>

<MudContainer>
	<MudGrid>
		<!-- Première Colonne -->
		<MudItem sm="4" Class="border-solid border-2 mud-border-primary pa-4">
			<MudSelect T="Skill" Text="Choisissez vos compétences" SelectedValues="UserDataService.UserSkills.Select(us => us.Skill)" Label="Choisissez vos compétences" MultiSelection="true" Dense="true" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft" SelectedValuesChanged="OnSelectedSkillsChanged">
				@foreach (var skill in ServerDataService.Skills)
				{
					<MudSelectItem T="Skill" Value="@skill">@skill.Name</MudSelectItem>
				}
			</MudSelect>

			<MudTable Items="UserDataService.UserSkills" Dense="true">
			<HeaderContent>
				<MudTh>Name</MudTh>
				<MudTh>Niveau</MudTh>
				<MudTh></MudTh>
			</HeaderContent>
			<RowTemplate>
				<MudTd>@context.Skill.Name</MudTd>
					<MudTd>
						<MudNumericField HideSpinButtons="true" T="int" Value=@context.Level Variant="Variant.Text" Min="0" Max="7" Style="width: 24px;" Immediate="true" ValueChanged="(int newValue) => OnLevelChanged(context,newValue)" />
					</MudTd>
					<MudTd>
						<MudIconButton Icon="@Icons.Material.Filled.Clear" aria-label="delete" Size="Size.Small"></MudIconButton>
					</MudTd>
				</RowTemplate>
			</MudTable>

			<MudDivider DividerType="DividerType.FullWidth" Class="my-6" />

			<MudSelect T="CraftingTable" Text="Choisissez une table..." SelectedValues="UserDataService.UserCraftingTables.Select(uct => uct.CraftingTable)" Label="Choisissez une table..." MultiSelection="true" Dense="true" Variant="Variant.Outlined" SelectedValuesChanged="OnSelectedCraftingTablesChanged" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
				@foreach (var table in ServerDataService.CraftingTables)
			{
				<MudSelectItem T="CraftingTable" Value="@table">@table.Name</MudSelectItem>
			}
			</MudSelect>

			<MudTable Items="UserDataService.UserCraftingTables" Dense="true">
				<HeaderContent>
					<MudTh>Name</MudTh>
					<MudTh>Upgrade</MudTh>
					<MudTh></MudTh>
				</HeaderContent>
				<RowTemplate>
					<MudTd>@context.CraftingTable.Name</MudTd>
					<MudTd>
						<MudSelect T="PluginModule" Text="Choisissez un upgrade" Value=@context.PluginModule Label="Choisissez un upgrade" Dense="true" Variant="Variant.Outlined" ValueChanged="(PluginModule newPluginModule) => OnSelectedPluginModuleChanged(context, newPluginModule)" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
							@foreach (var pluginModule in context.CraftingTable.PluginModules)
						{
							<MudSelectItem T="PluginModule" Value="@pluginModule">@pluginModule.Name</MudSelectItem>
						}
						</MudSelect> 
					</MudTd>
					<MudTd>
						<MudIconButton Icon="@Icons.Material.Filled.Clear" aria-label="delete" Size="Size.Small"></MudIconButton>
					</MudTd>
				</RowTemplate>
			</MudTable> 
 		</MudItem>

		<!-- Deuxième Colonne -->
		<MudItem sm="4" Class="border-solid border-2 mud-border-primary pa-4">

			@* <MudStack>
				<MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
					<MudText>Price per 1000 calories</MudText>
					<div>
						<MudNumericField OnBlur="UpdateUser" T="decimal" @bind-Value="user.CalorieCost" HideSpinButtons="true" Variant="Variant.Outlined" Style="width: 40px;" />
					</div>
				</MudStack>
				<MudStack Justify="Justify.SpaceBetween" Row="true" Spacing="3" AlignItems="AlignItems.Center">
					<MudText>Profit percentage</MudText>
					<div>
						<MudNumericField OnBlur="UpdateUser" T="decimal" @bind-Value="user.ProfitMargin" HideSpinButtons="true" Variant="Variant.Text" Style="width: 40px;" />
					</div>
				</MudStack>
			</MudStack> *@

		</MudItem>

		<!-- Troisième Colonne -->
		<MudItem xs="12" sm="4" Class="border-solid border-2 mud-border-primary pa-4">
			<MudSelect T="Recipe" Text="Choisissez vos recettes" SelectedValues=selectedRecipes Label="Choisissez vos recettes" MultiSelection="true" Dense="true" Variant="Variant.Outlined" SelectedValuesChanged="OnSelectedRecipesChanged" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
				@foreach (var recipe in ServerDataService.Recipes)
				{
					<MudSelectItem T="Recipe" Value="@recipe">@recipe.Name</MudSelectItem>
				}
			</MudSelect>

			<MudTable Items="userRecipes" Dense="true">
				<HeaderContent>
					<MudTh>Name</MudTh>
					<MudTh>Price</MudTh>
					<MudTh>Hide</MudTh>
				</HeaderContent>
				<RowTemplate>
					<MudTd>@context.Name</MudTd>
					<MudTd>
					</MudTd>
					<MudTd>
						<MudIconButton Icon="@Icons.Material.Filled.Clear" aria-label="delete" Size="Size.Small"></MudIconButton>
					</MudTd>
				</RowTemplate>
			</MudTable>
		</MudItem>

	</MudGrid>
</MudContainer>

	@code {
	//private IEnumerable<Skill> selectedSkills { get; set; } = new HashSet<Skill>();
	private IEnumerable<Recipe> selectedRecipes { get; set; } = new HashSet<Recipe>();
	//private IEnumerable<UserSkill> userSkills { get; set; } = new HashSet<UserSkill>();

	//private IEnumerable<CraftingTable> selectedCraftingTables { get; set; } = new HashSet<CraftingTable>();
	//private IEnumerable<UserCraftingTable> userCraftingTables { get; set; } = new HashSet<UserCraftingTable>();

	private IEnumerable<Recipe> userRecipes { get; set; } = new HashSet<Recipe>();

	protected override async Task OnInitializedAsync()
	{
		ContextService.OnContextChanged += StateHasChanged;
	}

	public void Dispose()
	{
		ContextService.OnContextChanged -= StateHasChanged;
	}

	private async Task OnSelectedSkillsChanged(IEnumerable<Skill> newSelectedSkills)
	{
		// Mettre à jour les compétences dans la base de données (conversion en List)
		UserDataService.UpdateUserSkills(ContextService.CurrentUserServer, newSelectedSkills.ToList());

		// Récupère la liste des tables de craft correspondant aux skills sélectionné
		var selectedTable = UserDataService.UserSkills
			.SelectMany(us => us.Skill.Recipes)
			.Select(y => y.CraftingTable)
			.Distinct();

		// Mettre à jour les compétences dans la base de données (conversion en List)
		UserDataService.UpdateUserCraftingTables(ContextService.CurrentUserServer, selectedTable.ToList());

		userRecipes = UserDataService.GetAvailableRecipes();
	}

	private async Task OnSelectedRecipesChanged(IEnumerable<Recipe> newSelectedRecipes)
	{
		selectedRecipes = newSelectedRecipes;
	}

	private async Task OnSelectedCraftingTablesChanged(IEnumerable<CraftingTable> newSelectedCraftingTables)
	{
		UserDataService.UpdateUserCraftingTables(ContextService.CurrentUserServer, newSelectedCraftingTables.ToList());
	}

	private async Task OnLevelChanged(UserSkill userSkill, int newLevel)
	{
		// Mettre à jour le niveau de la compétence dans la base de données
		userSkill.Level = newLevel;

		userRecipes = UserDataService.GetAvailableRecipes();
	}

	private async Task OnSelectedPluginModuleChanged(UserCraftingTable userCraftingTable, PluginModule newUpgrade)
	{
		userCraftingTable.PluginModule = newUpgrade;
		// Mettre à jour le niveau de la compétence dans la base de données
		//await UserCraftingTableDbService.UpdateAsync(userCraftingTable);
	}


}
