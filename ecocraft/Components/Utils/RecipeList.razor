@using ecocraft.Models
@using ecocraft.Services
@inject IDialogService DialogService
@inject UserServerDataService UserServerDataService
@inject LocalizationService LocalizationService

<MudTable Items="@Recipes"
          Dense="true"
          Hover="true">
    <HeaderContent>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Recipe, object>(r => LocalizationService.GetTranslation(r))">@LocalizationService.GetTranslation("RecipeList.RecipeName")</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Recipe, object>(r => LocalizationService.GetTranslation(r.Skill))">@LocalizationService.GetTranslation("Skill")</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Recipe, object>(r => LocalizationService.GetTranslation(r.CraftingTable))">@LocalizationService.GetTranslation("CraftingTable")</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTh>
            <MudLink Color="Color.Default" Underline="Underline.None" OnClick="@(() => ToggleDetails(context))">
                <MudStack Row Spacing="1" AlignItems="AlignItems.Center">
                    <MudIcon Icon="@(_openedDetails.Contains(context) ? MDIIcons.Filled.ChevronDown : MDIIcons.Filled.ChevronRight)" Size="Size.Small"/>
                    <IconEco Obj="@context.Elements.First(e => e.IsProduct() && e.Index == 0).ItemOrTag" Size="32" />
                    <MudText Typo="Typo.body2">@LocalizationService.GetTranslation(context)</MudText>
                </MudStack>
            </MudLink>
        </MudTh>
        <MudTh>
            <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                <IconEco Obj="@context.Skill" Size="32" />
                <MudText Typo="Typo.body2">@(context.Skill is not null ? LocalizationService.GetTranslation(context.Skill) : "")</MudText>
            </MudStack>
        </MudTh>
        <MudTh>
            <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                <IconEco Obj="@context.CraftingTable" Size="32" />
                <MudText Typo="Typo.body2">@LocalizationService.GetTranslation(context.CraftingTable)</MudText>
            </MudStack>
        </MudTh>
    </RowTemplate>
    <ChildRowContent>
        @if (_openedDetails.Contains(context))
        {
            <MudTr>
                <MudTd colspan="4">
                    <MudTable Items="@GetSpecificDisplayForElements(context)" Dense="true" Elevation="0">
                        <HeaderContent>
                            <MudTh Style="width: 35px; background-color: var(--mud-palette-surface) !important;" Class="border-b-0 pa-0 pl-2"></MudTh>
                            <MudTh Style="width: 50%; background-color: var(--mud-palette-surface) !important;" Class="border-b-0 pl-2">@LocalizationService.GetTranslation("Ingredients")</MudTh>
                            <MudTh Style="width: 35px; background-color: var(--mud-palette-surface) !important;" Class="border-b-0 border-l-1 pa-0 pl-2"></MudTh>
                            <MudTh Style="width: 50%; background-color: var(--mud-palette-surface) !important;" Class="border-b-0 pl-2">@LocalizationService.GetTranslation("Products")</MudTh>
                        </HeaderContent>
                        <RowTemplate Context="ctx">
                            <MudTd Class="pa-0 pl-2 border-0">@(ctx.Item1 is not null ? ctx.Item1.Quantity * -1 : "")</MudTd>
                            <MudTd Class="border-0 pl-2">
                                @if (ctx.Item1 is not null)
                                {
                                    <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                                        <IconEco Obj="@ctx.Item1.ItemOrTag" Size="32"/>
                                        @(LocalizationService.GetTranslation(ctx.Item1.ItemOrTag))
                                    </MudStack>
                                }
                            </MudTd>
                            <MudTd Class="pa-0 pl-2 border-b-0 border-l-1">@(ctx.Item2 is not null ? ctx.Item2.Quantity : "")</MudTd>
                            <MudTd Class="border-0 pl-2">
                                @if (ctx.Item2 is not null)
                                {
                                    <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                                        <IconEco Obj="@ctx.Item2.ItemOrTag" Size="32" />
                                        @(LocalizationService.GetTranslation(ctx.Item2.ItemOrTag))
                                    </MudStack>
                                }
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudTd>
            </MudTr>
        }
    </ChildRowContent>
</MudTable>

@code {
    [Parameter] public List<Recipe> Recipes { get; set; } = [];
    private List<Recipe> _openedDetails = [];

    private void ToggleDetails(Recipe recipe)
    {
        if (_openedDetails.Contains(recipe))
        {
            _openedDetails.Remove(recipe);
        }
        else
        {
            _openedDetails.Add(recipe);
        }
    }

    private List<(Element?, Element?)> GetSpecificDisplayForElements(Recipe recipe)
    {
        List<(Element?, Element?)> elements = [];

        var products = recipe.Elements.Where(e => e.IsProduct()).ToList();
        var ingredients = recipe.Elements.Where(e => e.IsIngredient()).ToList();

        for (var i = 0; i < products.Count || i < ingredients.Count; i++)
        {
            var product = i < products.Count ? products[i] : null;
            var ingredient = i < ingredients.Count ? ingredients[i] : null;

            elements.Add((ingredient, product));
        }

        return elements;
    }
}
