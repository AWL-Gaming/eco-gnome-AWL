@using ecocraft.Models
@using ecocraft.Services
@using ecocraft.Services.DbServices
@inject ContextService ContextService
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject EcoCraftDbContext EcoCraftDbContext
@inject UserDbService UserDbService
@inject LocalStorageService LocalStorageService
@inject NavigationManager Navigation

<MudDialog>
	<TitleContent>
		<MudText Typo="Typo.h4" Align="Align.Center">User settings</MudText>
	</TitleContent>
	<DialogContent>

		<MudTextField Value="ContextService.CurrentUser!.Pseudo" Variant="Variant.Outlined" Label="Pseudo" ValueChanged="@((string pseudo) => OnUpdateUserName(pseudo))"/>

		<MudTabs Outlined="true" Position="@Position.Top" Rounded="true" Border="true" ApplyEffectsToContainer="true" Class="mt-8" PanelClass="pa-6">
			<MudTabPanel Text="My servers">
				<MudTable Items="ContextService.CurrentUser!.UserServers" Dense="true">
					<ColGroup>
						<col />
						<col style="width: 160px;" />
						<col />
						<col style="width: 160px;" />
					</ColGroup>
					<HeaderContent>
						<MudTh><MudText>Name</MudText></MudTh>
						<MudTh><MudText>Join code</MudText></MudTh>
						<MudTh><MudText>In-Game pseudo</MudText></MudTh>
						<MudTh></MudTh>
					</HeaderContent>
					<RowTemplate>
						<MudTd>
							<MudText>@context.Server.Name</MudText>
						</MudTd>
						<MudTd>
							<MudTextField Value="context.Server.JoinCode" Underline="false" Variant="Variant.Text" Disabled="true" Adornment="Adornment.Start"
										  AdornmentIcon="@Icons.Material.Outlined.ContentCopy" OnAdornmentClick="@(() => CopyToClipboard(context.Server.JoinCode))" AdornmentAriaLabel="Copy to clipboard"></MudTextField>
						</MudTd>
						<MudTd>
							<MudTextField Margin="Margin.Dense" Value="@context.Pseudo" Variant="Variant.Outlined" ValueChanged="(string newPseudo) => OnPseudoChanged(context,newPseudo)" > </MudTextField>
						</MudTd>
						<MudTd>
							<MudStack Row AlignItems="AlignItems.Center" Justify="Justify.Center" Spacing="0">
								@if (_askLeaveConfirmations.ContainsKey(context))
								{
									<MudIconButton
												Color="Color.Success"
												Icon="@Icons.Material.Filled.Close"
												OnClick="@(() => CancelLeaveServer(context))">
									</MudIconButton>
								}
								<MudIconButton Color="Color.Error"
												Icon="@Icons.Material.Filled.ExitToApp"
												OnClick="@(() => LeaveServer(context))">
								</MudIconButton>
								@if (_askLeaveConfirmations.ContainsKey(context))
								{

									<MudIconButton
												Color="Color.Warning"
												Icon="@Icons.Material.Filled.Check"
												OnClick="@(() => ConfirmLeaveServer(context))">
									</MudIconButton>
								}
							</MudStack>
						</MudTd>
					</RowTemplate>
				</MudTable>
			</MudTabPanel>
			<MudTabPanel Text="Options">
				<MudStack>
					<MudStack Row>
						<MudTextField Variant="Variant.Outlined"
						              Label="Public UserId"
						              ReadOnly="true"
						              Value="ContextService.CurrentUser.Id" />
						<MudTextField Variant="Variant.Outlined"
						              Label="Secret UserId"
						              ReadOnly="true"
						              Value="ContextService.CurrentUser.SecretId" />
					</MudStack>

					<MudStack Row Spacing="5">
						<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => ExportUser())">Export User</MudButton>

						<MudFileUpload T="IBrowserFile" FilesChanged="ImportUser">
							<ActivatorContent>
								<MudButton Variant="Variant.Filled"
								           Color="Color.Warning"
								           StartIcon="@Icons.Material.Filled.CloudUpload">
									Import User
								</MudButton>
							</ActivatorContent>
						</MudFileUpload>
					</MudStack>
				</MudStack>
			</MudTabPanel>
		</MudTabs>
	</DialogContent>
	<DialogActions>
		<MudButton OnClick="Cancel" Color="Color.Secondary">Annuler</MudButton>
	</DialogActions>
</MudDialog>



@code {
	private Dictionary<UserServer, bool> _askLeaveConfirmations = new Dictionary<UserServer, bool>();

	[CascadingParameter]
	private MudDialogInstance MudDialog { get; set; }

	private void Submit()
	{
		MudDialog.Close();
	}

	private void Cancel()
	{
		MudDialog.Cancel();
	}

	private async Task OnPseudoChanged(UserServer userServer, string newPseudo)
	{
		if (newPseudo == "") return;
		userServer.Pseudo = newPseudo;
		await ContextService.updateCurrentUser();
	}

	private void LeaveServer(UserServer userServer)
	{
		if (!_askLeaveConfirmations.ContainsKey(userServer))
		{
			_askLeaveConfirmations.Add(userServer, true);
		}
	}

	private void CancelLeaveServer(UserServer userServer)
	{
		if (_askLeaveConfirmations.ContainsKey(userServer))
		{
			_askLeaveConfirmations.Remove(userServer);
		}
	}

	private async void ConfirmLeaveServer(UserServer userServerToLeave)
	{
		if (_askLeaveConfirmations.ContainsKey(userServerToLeave))
		{
			_askLeaveConfirmations.Remove(userServerToLeave);
			await ContextService.LeaveServer(userServerToLeave);
			await ContextService.ChangeServer(ContextService.CurrentUser!.UserServers.FirstOrDefault()?.Server);
		}
	}

	private async Task CopyToClipboard(string text)
	{
		await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
		Snackbar.Add("Join code copied to clipboard", Severity.Info);
	}

	private async Task OnUpdateUserName(string newPseudo)
	{
		ContextService.CurrentUser!.Pseudo = newPseudo;
		await EcoCraftDbContext.SaveChangesAsync();
		ContextService.InvokeContextChanged();
		//StateHasChanged();
	}

	private async Task ExportUser()
	{
		var content = $"{ContextService.CurrentUser.Id}:{ContextService.CurrentUser.SecretId}";
		var bytes = System.Text.Encoding.UTF8.GetBytes(content);

		// Conversion en base64 pour le passer à JavaScript
		var base64 = Convert.ToBase64String(bytes);
		var fileName = "eco_gnome_user_backup.txt";

		// Appel de JavaScript pour déclencher le téléchargement
		await JSRuntime.InvokeVoidAsync("triggerFileDownload", fileName, base64);
	}

	private async Task ImportUser(IBrowserFile? file)
	{
		if (file is { ContentType: "text/plain" })
		{
			await using var stream = file.OpenReadStream(1_000);
			using var memoryStream = new MemoryStream();
			await stream.CopyToAsync(memoryStream);

			memoryStream.Position = 0;
			using var reader = new StreamReader(memoryStream);
			var content = await reader.ReadToEndAsync();

			try
			{
				var publicUserId = content.Split(':')[0];
				var secretUserId = content.Split(':')[1];

				var foundUser = await UserDbService.GetByIdAndSecretAsync(new Guid(publicUserId), new Guid(secretUserId));

				if (foundUser is not null)
				{
					bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to import the user with pseudo {foundUser.Pseudo} ? This will erase your current saved user. Make sure to export the current user if you want to use it later !");

					if (confirmed)
					{
						await LocalStorageService.AddItem("UserId", publicUserId);
						await LocalStorageService.AddItem("SecretUserId", secretUserId);

						Navigation.NavigateTo("/", forceLoad: true);
					}
				}
				else
				{
					Snackbar.Add("Import User Error - Can't find the imported user", Severity.Error);
				}
			}
			catch (Exception e)
			{
				Snackbar.Add("Import User Error - Choose a correct file.", Severity.Error);
			}
		}
	}
}
