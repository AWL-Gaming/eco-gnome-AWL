@using ecocraft.Models
@using ecocraft.Services
@inject ContextService ContextService
@inject UserServerDataService UserServerDataService

<MudDialog MaxWidth="MaxWidth.Medium" Style="width: 600px; min-height: 400px;">
    <DialogContent>
        <MudGrid>
            <MudItem xs="12">
                <MudText>CraftingTable: @ContextService.GetTranslation(Recipe.CraftingTable)</MudText>
                <MudText>Skill: @ContextService.GetTranslation(Recipe.Skill) @(Recipe.Skill is not null ? Recipe.SkillLevel : "")</MudText>
                <MudText>Craft Time: @Recipe.CraftMinutes minutes</MudText>
                <MudText>Labor: @Recipe.Labor</MudText>

                <MudText Typo="Typo.h6">Ingredients:</MudText>
                @foreach (var element in Recipe.Elements.Where(e => e.IsIngredient()).ToList())
                {
                    <MudText> @(element.Quantity * -1) @ContextService.GetTranslation(element.ItemOrTag) @(!element.IsDynamic ? "(static)" : "")</MudText>
                }

                <MudText Typo="Typo.h6">Products:</MudText>
                @foreach (var element in Recipe.Elements.Where(e => e.IsProduct()).OrderBy(e => e.Index).ToList())
                {
                    <MudGrid Class="d-flex justify-top">
                        <MudItem xs="6" Class="pt-0">
                            <MudText Class="pt-2"> @(element.Quantity) @ContextService.GetTranslation(element.ItemOrTag) @(element.IsDynamic ? "(dynamic)" : "")</MudText> <MudText></MudText>
                        </MudItem>
                        @if (Recipe.Elements.Where(e => e.IsProduct()).Count() > 1)
                        {
                            <MudItem xs ="6" Class ="pt-0">
                                <MudNumericField T="decimal"
                                Label="Share percent"
                                Value="(decimal)UserServerDataService.UserElements.First(ue => ue.Element == element).Share"
                                Style="height: 30px"
                                Min="0"
                                Max="1"
                                Step="0.01m"
                                Variant="Variant.Outlined"
                                Immediate="true"
                                ValueChanged="@((v) => ChangeShare(UserServerDataService.UserElements.First(ue => ue.Element == element), v))"/>
                            </MudItem>
                        }
                    </MudGrid>
                }
                @if (_shareError)
                {
                    <MudText Style="color: red;">Error! Make sure the sum of all Products Share equals 1</MudText>
                }
            </MudItem>
        </MudGrid>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;

    [Parameter]
    public Recipe Recipe { get; set; }

    private bool _shareError = false;

    private void Ok()
    {
        MudDialog.Cancel();
    }

    protected override void OnInitialized()
    {
        IsShareError();
    }

    private void ChangeShare(UserElement element, decimal value)
    {
        element.Share = (float)value;
        IsShareError();
    }

    private void IsShareError()
    {
        var sum = 0f;

        foreach (var element in Recipe.Elements.Where(e => e.IsProduct()).ToList())
        {
            sum += UserServerDataService.UserElements.First(ue => ue.Element == element).Share;
        }

        _shareError = Math.Abs(sum - 1f) > 0.0001f;
    }
}
