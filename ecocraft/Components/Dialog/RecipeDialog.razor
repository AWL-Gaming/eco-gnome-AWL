@using ecocraft.Models
@using ecocraft.Services
@using ecocraft.Components.Utils
@using ecocraft.Extensions
@inject UserServerDataService UserServerDataService
@inject PriceCalculatorService PriceCalculatorService
@inject LocalizationService LocalizationService

<MudDialog Style="min-height: 500px;" Class="pb-4">
    <TitleContent>
        <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
            <EcoIcon Item="@Recipe.Elements.First(e => e.IsProduct() && e.Index == 0).ItemOrTag" Size="64" />
            <MudText Typo="Typo.h6">@LocalizationService.GetTranslation(Recipe)</MudText>
        </MudStack>
    </TitleContent>
    <DialogContent>
        <MudStack Spacing="12">
            <MudGrid>
                <MudItem sm="6">
                    <MudStack Spacing="1">
                        <MudText Style="color: #888">@LocalizationService.GetTranslation("CraftingTable")</MudText>
                        <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                            <EcoIcon Item="@Recipe.CraftingTable" />
                            <MudText>@LocalizationService.GetTranslation(Recipe.CraftingTable)</MudText>
                        </MudStack>
                    </MudStack>
                </MudItem>

                <MudItem sm="6">
                    <MudStack Spacing="1">
                        <MudText Style="color: #888">@LocalizationService.GetTranslation("Skill")</MudText>
                        @if (Recipe.Skill is not null)
                        {
                            <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                                <EcoIcon Item="@Recipe.Skill" />
                                <MudText>@LocalizationService.GetTranslation(Recipe.Skill)</MudText>
                                <MudText>@(Recipe.SkillLevel)</MudText>
                            </MudStack>
                        }
                        else
                        {
                            <MudText>@LocalizationService.GetTranslation("None")</MudText>
                        }
                    </MudStack>
                </MudItem>

                <MudItem sm="6">
                    <MudTable Items="GetIngredientUserElements()" Dense="true" Hover="true" Elevation="3" CustomFooter="true" Class="mb-3">
                        <HeaderContent>
                            <MudTh colspan="2" Class="mud-background">
                                <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                                    <MudText>@LocalizationService.GetTranslation("Ingredients")</MudText>
                                </MudStack>
                            </MudTh>
                            <MudTh colspan="2" Class="mud-background pl-1 pr-2">
                                <MudStack Row Justify="Justify.FlexEnd">
                                    <MudText Typo="Typo.body2">@LocalizationService.GetTranslation("RecipeDialog.TotalCost")</MudText>
                                    <MudText Typo="Typo.body2" Color="Color.Primary">
                                        @(Math.Round(-1 * ElementSum(GetIngredientUserElements(), true) + GetLaborPrice() + GetCraftMinutePrice(), 2).ToString("0.##")) $
                                    </MudText>
                                </MudStack>
                            </MudTh>
                            <MudTh Class="mud-background pa-0">
                            </MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <!-- quantity -->
                            <MudTd Class="px-1 pl-2">
                                <MudStack Row Spacing="1">
                                    @(Math.Abs(Math.Round(context.GetRoundFactorQuantity(), 2)).ToString("0.##"))

                                    @if (context.Element.IsDynamic && (int)GetModuleAndLavishReducePercent() != 1)
                                    {
                                        <MudTooltip Text="@(LocalizationService.GetTranslation("RecipeDialog.QuantityReductionTooltip", ((1 - GetModuleAndLavishReducePercent()) * 100).ToString("0.##"), LocalizationService.GetTranslation(Recipe.CraftingTable.CurrentUserCraftingTable!.PluginModule)) + (Recipe.Skill?.CurrentUserSkill!.HasLavishTalent ?? false ? LocalizationService.GetTranslation("RecipeDialog.QuantityReductionLavishTooltip") : ""))">
                                            <MudStack Row Spacing="1">
                                                <MudIcon Icon="@Icons.Material.Filled.ArrowRight" Size="Size.Small" Color="Color.Secondary"/>
                                                <MudText Color="Color.Secondary" Typo="Typo.body2">
                                                    @(Math.Abs(Math.Round(context.GetRoundFactorQuantity(GetModuleAndLavishReducePercent()), 2)).ToString("0.##"))
                                                </MudText>
                                            </MudStack>
                                        </MudTooltip>
                                    }
                                </MudStack>
                            </MudTd>
                            <!-- icon and name -->
                            <MudTd Class="px-1">
                                <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                                    <EcoIcon Item="@context.Element.ItemOrTag"/>
                                    @LocalizationService.GetTranslation(context.Element.ItemOrTag)
                                </MudStack>
                            </MudTd>
                            <!-- unit price -->
                            <MudTd Class="px-1">
                                @{
                                    var canContributePrice = !context.Element.ItemOrTag.IsTag && PriceCalculatorService.GetCategorizedItemOrTags().ToBuy.Contains(context.Element.ItemOrTag);

                                    <MudTooltip Disabled="@(context.Element.ItemOrTag.CurrentUserPrice!.Price is not null && canContributePrice)"
                                                Text="@(LocalizationService.GetTranslation(canContributePrice ? "PriceCalculator.PriceTooltip.isItemEmptyPrice" : "PriceCalculator.PriceTooltip.isAutoCalculatedPrice"))">
                                        <MudStack Row Spacing="1">
                                            <MudNumericField T="decimal?"
                                                             Class="rectangle-input small-adornment"
                                                             Style="width: 90px; color: var(--mud-palette-primary)"
                                                             Disabled="@(!canContributePrice)"
                                                             HideSpinButtons="@(!canContributePrice)"
                                                             Value="@context.Element.ItemOrTag.CurrentUserPrice!.Price"
                                                             Immediate="true"
                                                             Format="0.##"
                                                             Variant="Variant.Outlined"
                                                             Converter="@CultureInvariantConverter.DotOrCommaDecimalNull"
                                                             Min="context.Element.ItemOrTag.MinPrice"
                                                             Max="context.Element.ItemOrTag.MaxPrice"
                                                             Adornment="@(context.Element.ItemOrTag.CurrentUserPrice!.Price is not null && canContributePrice ? Adornment.None : Adornment.End)"
                                                             AdornmentIcon="@(!canContributePrice ? MDIIcons.Filled.Calculator : MDIIcons.Outline.Information)"
                                                             AdornmentColor="@(!canContributePrice ? Color.Default : Color.Warning)"
                                                             ValueChanged="@(value => UpdatePrice(context.Element.ItemOrTag.CurrentUserPrice, value))"/>
                                            <MudText Color="Color.Primary">$/u</MudText>
                                        </MudStack>
                                    </MudTooltip>
                                }
                            </MudTd>
                            <!-- price -->
                            <MudTd Class=" pl-1 pr-2">
                                <MudStack Row Justify="Justify.FlexEnd">
                                    <MudText Typo="Typo.body2" Color="Color.Primary">
                                        @(context.Price is not null
                                            ? Math.Round((decimal)context.Price! * (context.Element.IsIngredient() ? -1 : 1) * (context.Element.IsDynamic
                                                ? context.GetRoundFactorQuantity(GetModuleAndLavishReducePercent())
                                                : context.GetRoundFactorQuantity()), 2).ToString("0.##") + " $"
                                            : "")
                                    </MudText>
                                </MudStack>
                            </MudTd>
                            <!-- deduction -->
                            <MudTd Style="width: 0; padding: 0;" Class="@($"pa-0 {(context.Element.IsProduct() ? "border-l-1" : "")}")">
                                @if (context.Element.IsProduct())
                                {
                                    <MudTooltip Text="@(!context.IsReintegrated ? LocalizationService.GetTranslation("RecipeDialog.ReintegratedToolTip.True") : LocalizationService.GetTranslation("RecipeDialog.ReintegratedToolTip.False"))">
                                        <MudIconButton Icon="@MDIIcons.Filled.ChevronDoubleRight"
                                                       Size="Size.Small"
                                                       OnClick="@(() => ChangeReintegrate(context, !context.IsReintegrated))"/>
                                    </MudTooltip>
                                }
                            </MudTd>
                        </RowTemplate>
                        <FooterContent>
                            <MudTr>
                                <MudTd colspan="5" Class="mud-background">
                                    <MudText>@LocalizationService.GetTranslation("RecipeDialog.AdditionalCosts")</MudText>
                                </MudTd>
                            </MudTr>
                            <MudTr>
                                <MudTd Class="px-1 pl-2">
                                    <MudStack Row Spacing="1">

                                        @if ((int)GetModuleAndLavishReducePercent(false) != 1)
                                        {
                                            <MudTooltip Text="@LocalizationService.GetTranslation("RecipeDialog.CraftTimeReductionTooltip", GetFormatedCraftTime(Recipe.CraftMinutes), ((1 - GetModuleAndLavishReducePercent(false)) * 100).ToString("0.##"), LocalizationService.GetTranslation(Recipe.CraftingTable.CurrentUserCraftingTable!.PluginModule))">
                                                <MudStack Row Spacing="1">
                                                    <MudText Color="Color.Secondary">
                                                        @(GetFormatedCraftTime(Recipe.CraftMinutes * GetModuleAndLavishReducePercent(false)))
                                                    </MudText>
                                                </MudStack>
                                            </MudTooltip>
                                        }
                                        else
                                        {
                                            <MudText>@GetFormatedCraftTime(Recipe.CraftMinutes)</MudText>
                                        }
                                    </MudStack>
                                </MudTd>
                                <MudTd Class="px-2">

                                    <MudText>@LocalizationService.GetTranslation("RecipeDialog.CraftTime")</MudText>
                                </MudTd>
                                <MudTd Class="px-1">
                                    <MudStack Row Spacing="1">
                                        <MudText Color="Color.Primary" Class="pr-2" Style="width: 90px; text-align: end;">
                                            @Recipe.CraftingTable.CurrentUserCraftingTable!.CraftMinuteFee
                                        </MudText>
                                        <MudText Color="Color.Primary">
                                            $/min
                                        </MudText>
                                    </MudStack>
                                </MudTd>
                                <MudTd Class="pl-1 pr-2">
                                    <MudStack Row Justify="Justify.FlexEnd">
                                        <MudText Color="Color.Primary" Typo="Typo.body2">
                                            @(Math.Round(GetCraftMinutePrice(), 2).ToString("0.##")) $
                                        </MudText>
                                    </MudStack>
                                </MudTd>
                                <MudTd Class="pa-0"></MudTd>
                            </MudTr>
                            <MudTr>
                                <MudTd Class="px-1 pl-2">
                                    <MudStack Row Spacing="1">
                                        @if ((int)GetLaborReducePercent() != 1)
                                        {
                                            <MudTooltip Text="@LocalizationService.GetTranslation("RecipeDialog.LaborReductionTooltip", Recipe.Labor.ToString("0.##"), Math.Round((1 - GetLaborReducePercent()) * 100, 2).ToString("0.##"), Recipe.Skill!.CurrentUserSkill!.Level.ToString())">
                                                <MudText Color="Color.Secondary">
                                                    @(Math.Round(Recipe.Labor * GetLaborReducePercent(), 2).ToString("0.##"))
                                                </MudText>
                                            </MudTooltip>
                                        }
                                        else
                                        {
                                            <MudText>@(Recipe.Labor.ToString("0.##"))</MudText>
                                        }
                                    </MudStack>
                                </MudTd>
                                <MudTd Class="px-2">
                                    <MudText>@LocalizationService.GetTranslation("RecipeDialog.Labor")</MudText>
                                </MudTd>
                                <MudTd Class="px-1">
                                    <MudStack Row Spacing="1">
                                        <MudText Color="Color.Primary" Class="pr-2" Style="width: 90px; text-align: end;">
                                            @((UserServerDataService.UserSetting!.CalorieCost / 1000).ToString("0.#####"))
                                        </MudText>
                                        <MudText Color="Color.Primary">
                                            $/cal
                                        </MudText>
                                    </MudStack>
                                </MudTd>
                                <MudTd Class="pl-1 pr-2">
                                    <MudStack Row Justify="Justify.FlexEnd">
                                        <MudText Typo="Typo.body2" Color="Color.Primary">
                                            @(Math.Round(GetLaborPrice(), 2).ToString("0.##")) $
                                        </MudText>
                                    </MudStack>
                                </MudTd>
                                <MudTd Class="pa-0"></MudTd>
                            </MudTr>
                        </FooterContent>

                    </MudTable>
                </MudItem>

                <MudItem sm="6">
                <MudTable Items="GetProductUserElements()" Dense="true" Hover="true" Elevation="3" CustomFooter="true" Class="mb-3">
                    <HeaderContent>
                        <MudTh Class="mud-background pa-0"></MudTh>
                        <MudTh colspan="2" Class="mud-background pl-0 px-1">
                            <MudText>@LocalizationService.GetTranslation("Products")</MudText>
                        </MudTh>
                        <MudTh colspan="1" Class="px-1 mud-background">
                        </MudTh>
                        <MudTh colspan="2" Class="px-1 mud-background">
                            <MudStack Row Justify="Justify.FlexEnd">
                                <MudText Typo="Typo.body2">@LocalizationService.GetTranslation("RecipeDialog.TotalPrice")</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Primary">
                                    @(Math.Round(ElementSum(GetProductUserElements()), 2).ToString("0.##")) $
                                </MudText>
                            </MudStack>
                        </MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <!-- reintegration -->
                        <MudTd Style="height: 0; width: 0; vertical-align: top; padding: 9px 0 0;" Class="border-r-1">
                            <MudTooltip Text="@LocalizationService.GetTranslation("RecipeDialog.ReintegratedToolTip.True")">
                                <MudIconButton Size="Size.Small"
                                               tabindex="-1"
                                               Icon="@MDIIcons.Filled.ChevronDoubleLeft"
                                               OnClick="@(() => ChangeReintegrate(context, !context.IsReintegrated))"/>
                            </MudTooltip>
                        </MudTd>
                        <!-- quantity -->
                        <MudTd Style="width: 60px" Class="px-1 pl-2">
                            <MudStack Row Spacing="1">
                                @(Math.Abs(Math.Round(context.GetRoundFactorQuantity(), 2)).ToString("0.##"))

                                @if (context.Element.IsDynamic && (int)GetModuleAndLavishReducePercent() != 1)
                                {
                                    <MudTooltip Text="@(LocalizationService.GetTranslation("RecipeDialog.QuantityReductionTooltip", ((1 - GetModuleAndLavishReducePercent()) * 100).ToString("0.##"), LocalizationService.GetTranslation(Recipe.CraftingTable.CurrentUserCraftingTable!.PluginModule)) + (Recipe.Skill?.CurrentUserSkill!.HasLavishTalent ?? false ? LocalizationService.GetTranslation("RecipeDialog.QuantityReductionLavishTooltip") : ""))">
                                        <MudStack Row Spacing="1">
                                            <MudIcon Icon="@Icons.Material.Filled.ArrowRight" Size="Size.Small" Color="Color.Secondary"/>
                                            <MudText Color="Color.Secondary" Typo="Typo.body2">
                                                @(Math.Abs(Math.Round(context.GetRoundFactorQuantity(GetModuleAndLavishReducePercent()), 2)).ToString("0.##"))
                                            </MudText>
                                        </MudStack>
                                    </MudTooltip>
                                }
                            </MudStack>
                        </MudTd>
                        <!-- icon and name -->
                        <MudTd Class="px-1 pl-2">
                            <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                                <EcoIcon Item="@context.Element.ItemOrTag"/>
                                @LocalizationService.GetTranslation(context.Element.ItemOrTag)
                            </MudStack>
                        </MudTd>
                        <!-- unit price -->
                        <MudTd Class="px-1">
                            <MudText Typo="Typo.body2" Color="Color.Primary" Style="text-align: end;">
                                @(context.Price is not null ? Math.Round((decimal)context.Price!, 2).ToString("0.##") + " $/u" : "")
                            </MudText>
                        </MudTd>
                        <!-- share -->
                        <MudTd Class="px-1">
                            @if (GetProductUserElements().Count > 1)
                            {
                                <MudNumericField T="decimal"
                                                 Class="rectangle-input"
                                                 Style="width: 90px; color: var(--mud-palette-primary)"
                                                 Format="0.##"
                                                 Converter="@CultureInvariantConverter.DotOrCommaDecimal"
                                                 Adornment="Adornment.End"
                                                 AdornmentText="% "
                                                 Min="0"
                                                 Max="100"
                                                 Variant="Variant.Outlined"
                                                 Step="@(0.1m)"
                                                 Value="@(context.Share * 100)"
                                                 ValueChanged="@(v => UpdateShare(context, v / 100))"/>
                            }
                        </MudTd>
                        <!-- price -->
                        <MudTd Class="px-1">
                            <MudStack Row Justify="Justify.FlexEnd">
                                <MudText Typo="Typo.body2" Color="Color.Primary">
                                    @(context.Price is not null
                                        ? Math.Round((decimal)context.Price! * (context.Element.IsIngredient() ? -1 : 1) * (context.Element.IsDynamic
                                            ? context.GetRoundFactorQuantity(GetModuleAndLavishReducePercent())
                                            : context.GetRoundFactorQuantity()), 2).ToString("0.##") + " $"
                                        : "")
                                </MudText>
                            </MudStack>
                        </MudTd>
                    </RowTemplate>
                    <FooterContent>
                        <MudTr>
                            <MudTd colspan="4" Class="mud-background"></MudTd>
                            <MudTd Class="pa-0 py-1 mud-background">
                                <MudStack Row Spacing="0">
                                    <MudTooltip Text="@LocalizationService.GetTranslation("RecipeDialog.Share.HonestTooltip")">
                                        <MudIconButton Size="Size.Small"
                                                       Icon="@MDIIcons.Filled.ChartPie"
                                                       OnClick="@(() => Honest())"/>
                                    </MudTooltip>
                                    <MudTooltip Text="@LocalizationService.GetTranslation("RecipeDialog.Share.FirstOnlyTooltip")">
                                        <MudIconButton Size="Size.Small"
                                                       Icon="@MDIIcons.Filled.Numeric1Box"
                                                       OnClick="@(() => FirstOnly())"/>
                                    </MudTooltip>
                                    <MudTooltip Text="@LocalizationService.GetTranslation("RecipeDialog.Share.EqualityTooltip")">
                                        <MudIconButton Size="Size.Small"
                                                       Icon="@MDIIcons.Filled.EqualBox"
                                                       OnClick="@(() => Equality())"/>
                                    </MudTooltip>
                                    @{
                                        var firstQuantity = GetProductUserElements().First().Element.Quantity;

                                        @if (GetProductUserElements().Any(ue => ue.Element.Quantity != firstQuantity))
                                        {
                                            <MudTooltip Text="@LocalizationService.GetTranslation("RecipeDialog.Share.EquilibrateTooltip")">
                                                <MudIconButton Size="Size.Small"
                                                               Icon="@MDIIcons.Filled.Equalizer"
                                                               OnClick="@(() => Equilibrate())"/>
                                            </MudTooltip>
                                        }
                                    }
                                </MudStack>
                            </MudTd>
                            <MudTd Class="mud-background"></MudTd>
                        </MudTr>
                    </FooterContent>
                </MudTable>
                </MudItem>
            </MudGrid>

            @if (Recipe.Elements.Any(e => Math.Truncate(e.Quantity) != e.Quantity || Math.Truncate(GetModuleAndLavishReducePercent() * e.Quantity) != GetModuleAndLavishReducePercent() * e.Quantity))
            {
                <MudStack Row Class="mt-n6" AlignItems="AlignItems.Center">
                    <MudText>Crafted by quantity:</MudText>
                    <MudTooltip Text="If you create only 1 unit of a recipe, the game still consumes a whole number of ingredients. Choose the quantity of products you will usually craft to obtain a more precise output price.">
                        <MudToggleGroup T="int"
                                        Value="@Recipe.CurrentUserRecipe!.RoundFactor"
                                        ValueChanged="@(v => RoundFactorChange(v, Recipe.CurrentUserRecipe))">
                            <MudToggleItem Value="0"><MudIcon Size="Size.Small" Icon="@MDIIcons.Filled.Infinity"/></MudToggleItem>
                            <MudToggleItem Value="100">100</MudToggleItem>
                            <MudToggleItem Value="10">10</MudToggleItem>
                            <MudToggleItem Value="1">1</MudToggleItem>
                        </MudToggleGroup>
                    </MudTooltip>
                </MudStack>
            }
        </MudStack>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;

    [Parameter]
    public required Recipe Recipe { get; set; }

    private bool ShouldDisplayShare()
    {
        return GetProductUserElements().Count > 1;
    }

    private async Task ChangeReintegrate(UserElement userElement, bool value)
    {
        userElement.IsReintegrated = value;

        if (userElement.Element.ItemOrTag.CurrentUserPrice!.PrimaryUserElement == userElement)
        {
            userElement.Element.ItemOrTag.CurrentUserPrice.PrimaryUserElement = null;
        }

        await FirstOnly();
        await PriceCalculatorService.Calculate();
        StateHasChanged();
    }

    private async Task UpdatePrice(UserPrice userPrice, decimal? value)
    {
        userPrice.Price = value;

        await PriceCalculatorService.Calculate();
        StateHasChanged();
    }

    private decimal ElementSum(List<UserElement> userElements, bool reverseDeduction = false, bool withReduction = true)
    {
        var ingredientCostSum = userElements.Sum(ue => ue.Price * ue.GetRoundFactorQuantity(ue.Element.IsDynamic && withReduction ? GetModuleAndLavishReducePercent() : 1)
                                                                * (ue.IsReintegrated && reverseDeduction ? -1 : 1));
        return ingredientCostSum ?? 0;
    }

    private decimal GetLaborPrice()
    {
        return Recipe.Labor
            * UserServerDataService.UserSetting!.CalorieCost / 1000
            * GetLaborReducePercent();
    }

    private decimal GetLaborReducePercent()
    {
        return Recipe.Skill?.LaborReducePercent[Recipe.Skill.CurrentUserSkill!.Level] ?? 1;
    }

    private decimal GetModuleAndLavishReducePercent(bool withLavish = true)
    {
        var pluginModulePercent = Recipe.CraftingTable.CurrentUserCraftingTable!.PluginModule?.Percent ?? 1;
        var lavishTalentValue = withLavish ? Recipe.Skill?.LavishTalentValue ?? 1 : 1;

        return Recipe.Skill?.CurrentUserSkill!.HasLavishTalent ?? false ? pluginModulePercent * lavishTalentValue : pluginModulePercent;
    }

    private decimal GetCraftMinutePrice()
    {
        return Recipe.CraftMinutes * Recipe.CraftingTable.CurrentUserCraftingTable!.CraftMinuteFee;
    }

    public string GetFormatedCraftTime(decimal craftMinutes)
    {
        int totalSeconds = (int)(craftMinutes * 60);
        int minutes = totalSeconds / 60;
        int seconds = totalSeconds % 60;

        return $"{(minutes > 0 ? $"{minutes}min" : "")}{(seconds > 0 ? $" {seconds}s" : "")}";
    }

    private async Task RoundFactorChange(int value, UserRecipe userRecipe)
    {
        userRecipe.RoundFactor = value;
        await PriceCalculatorService.Calculate();
        StateHasChanged();
    }

    private List<UserElement> GetIngredientUserElements()
    {
        return Recipe.Elements.Where(e => e.IsIngredient() || (e.IsProduct() && e.CurrentUserElement!.IsReintegrated))
                              .OrderBy(e => !e.IsIngredient())
                              .ThenBy(e => e.Index)
                              .Select(e => e.CurrentUserElement!)
                              .ToList();
    }

    private List<UserElement> GetProductUserElements()
    {
        return Recipe.Elements.Where(e => e.IsProduct() && !e.CurrentUserElement!.IsReintegrated)
                              .OrderBy(e => e.Index)
                              .Select(e => e.CurrentUserElement!)
                              .ToList();
    }

    private async Task UpdateShare(UserElement ue, decimal value)
    {
        ue.Share = Math.Clamp(value, 0, 1);

        var others = GetProductUserElements().Where(e => e != ue).ToList();
        var remaining = 1 - GetProductUserElements().Sum(e => e.Share);
        Console.WriteLine("----");
        Console.WriteLine(remaining);

        foreach (var other in others)
        {
            other.Share += Math.Round(remaining / others.Count, 4);
            Console.WriteLine(other.Share);

        }

        var remainingF = 1 - GetProductUserElements().Sum(e => e.Share);
        Console.WriteLine("remainingF");
        Console.WriteLine(remainingF);

        if (remainingF != 0)
        {
            others.First().Share += remainingF;
        }

        await PriceCalculatorService.Calculate();
        StateHasChanged();
    }

    private async Task Equality()
    {
        var userElements = GetProductUserElements();

        foreach (var userElement in userElements)
        {
            userElement.Share = 1m / userElements.Count;
        }

        await PriceCalculatorService.Calculate();
        StateHasChanged();
    }

    private async Task Equilibrate()
    {
        var userElements = GetProductUserElements();
        var totalQuantity = userElements.Sum(p => p.Element.Quantity);

        foreach (var userElement in userElements)
        {
            userElement.Share = userElement.Element.Quantity / totalQuantity;
        }

        await PriceCalculatorService.Calculate();
        StateHasChanged();
    }

    private async Task FirstOnly()
    {
        var userElements = GetProductUserElements();

        foreach (var userElement in userElements)
        {
            userElement.Share = userElement.Element.Index == 0 ? 1 : 0;
        }

        await PriceCalculatorService.Calculate();
        StateHasChanged();
    }

    private async Task Honest()
    {
        var userElements = GetProductUserElements();

        foreach (var userElement in userElements)
        {
            userElement.Share = userElement.Element.Index == 0 ? 0.8m : 0.2m / (userElements.Count - 1);
        }

        await PriceCalculatorService.Calculate();
        StateHasChanged();
    }
}
