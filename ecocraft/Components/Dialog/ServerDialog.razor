@using ecocraft.Extensions
@using ecocraft.Models
@using ecocraft.Services
@using ecocraft.Services.DbServices
@inject LocalizationService LocalizationService
@inject ServerDbService ServerDbService
@inject ContextService ContextService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
    </TitleContent>
    <DialogContent>
        <MudPaper Elevation="0" Class="pa-2" Style="align-items: center; justify-content: space-between; gap: 16px;">
            <MudText Typo="Typo.subtitle1">@LocalizationService.GetTranslation("ServerDialog.HaveAnInvitation")</MudText>
            <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.Center">
                <MudTextField @bind-Value="JoinCode"
                              Class="mt-0"
                              Immediate="true"
                              Label="Join code"
                              Variant="Variant.Outlined"
                              OnKeyDown="OnKeyDownJoinAsync" />
                <MudIconButton
                    Disabled="@(JoinCode.Length < 8)"
                    Icon="@MDIIcons.Outline.ArrowRightBoldBox"
                    Color="Color.Tertiary"
                    OnClick="OnJoinServer" />
            </MudStack>
        </MudPaper>

        <MudDivider DividerType="DividerType.FullWidth" Class="my-6" />

        <MudPaper Elevation="0" Class="pa-2 mb-6" Style="align-items: center; justify-content: space-between; gap: 16px;">
            <MudText Typo="Typo.subtitle1">@LocalizationService.GetTranslation("ServerDialog.CreateServer")</MudText>
            <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.Center">
                <MudTextField @bind-Value="ServerName"
                              Class="hack-validation"
                              Immediate="true"
                              Validation="@(new Func<string, IEnumerable<string>>(MinAndMaxCharacters))"
                              Variant="Variant.Outlined"
                              Label="Your server name"
                              OnKeyDown="OnKeyDownCreateAsync" />
                <MudIconButton
                    Disabled="@(ServerName.Length < 3)"
                    Icon="@Icons.Material.Filled.AddBox"
                    Color="Color.Tertiary"
                    OnClick="OnCreateServer" />
            </MudStack>
        </MudPaper>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;

    private string ServerName { get; set; } = "";
    private string JoinCode { get; set; } = "";

    private IEnumerable<string> MinAndMaxCharacters(string ch)
    {
        if (!string.IsNullOrEmpty(ch) && 25 < ch?.Length)
            yield return LocalizationService.GetTranslation("ServerDialog.MaxChar");
        if (!string.IsNullOrEmpty(ch) && 3 > ch?.Length)
            yield return LocalizationService.GetTranslation("ServerDialog.MinChar");
    }


    private void OnKeyDownCreateAsync(KeyboardEventArgs args)
    {
        switch (args.Key)
        {
            case "Enter":
            case "NumpadEnter":
                OnCreateServer();
                break;
        }
    }

    private void OnKeyDownJoinAsync(KeyboardEventArgs args)
    {
        switch (args.Key)
        {
            case "Enter":
            case "NumpadEnter":
                OnJoinServer();
                break;
        }
    }

    private async Task OnCreateServer()
    {
        if (ServerName.Length < 3)
        {
            return;
        }

        Server newServer = new Server { Name = ServerName, IsDefault = false, CreationDateTime = DateTime.UtcNow };
        newServer.GenerateJoinCode();
        await ServerDbService.AddAndSave(newServer);

        await ContextService.JoinServer(newServer, true);

        await ContextService.ChangeServer(newServer);
        Navigation.NavigateTo("/server-management");
    }

    private async Task OnJoinServer()
    {
        if (string.IsNullOrEmpty(JoinCode))
        {
            Snackbar.Add(LocalizationService.GetTranslation("Header.ServerDialog.Snackbar.JoinError"), Severity.Error);
            return;
        }

        var server = ServerDbService.GetByJoinCodeAsync(JoinCode).Result;

        if (server is null)
        {
            Snackbar.Clear();
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
            Snackbar.Add(LocalizationService.GetTranslation("Header.ServerDialog.Snackbar.ServerNotFound"), Severity.Error);
            return;
        }

        if (ContextService.AvailableServers.Contains(server))
        {
            Snackbar.Clear();
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
            Snackbar.Add(LocalizationService.GetTranslation("Header.ServerDialog.Snackbar.AlreadyInServer"), Severity.Warning);
            return;
        }

        await ContextService.JoinServer(server);
        await ContextService.ChangeServer(server);
        MudDialog.Close();
    }
}
