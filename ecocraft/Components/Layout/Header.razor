@implements IDisposable
@using ecocraft.Components.Dialog
@using ecocraft.Models
@using ecocraft.Services
@using ecocraft.Services.DbServices
@inject EcoCraftDbContext EcoCraftDbContext
@inject ContextService ContextService
@inject IDialogService DialogService
@inject ServerDbService ServerDbService
@inject UserServerDataService UserServerDataService
@inject UserDbService UserDbService

<MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
     <MudIconButton Icon="@Icons.Material.Filled.Save" Color="Color.Tertiary" aria-label="Save data" OnClick="Save" />

     <MudSelect T="Server" Label="Server" Value="@ContextService.CurrentServer" Dense="false" Variant="Variant.Outlined" SelectedValuesChanged="OnSelectedServerChanged" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
        @foreach (var server in ContextService.AvailableServers)
        {
            <MudSelectItem T="Server" Value="@server">@server.Name</MudSelectItem>
        }
    </MudSelect>
    @if (ContextService.CurrentUserServer?.IsAdmin ?? false)
    {
        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Tertiary" aria-label="Edit Server" OnClick="EditServer"/>
    }
    <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Tertiary" aria-label="Create Server" OnClick="CreateServer"/>

    <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
        <MudText>@ContextService.CurrentUser?.Pseudo</MudText>
        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Tertiary" aria-label="Edit User" OnClick="EditUserDialog"/>
    </MudStack>

    <MudSelect T="LanguageCode" Label="Language" Value="@ContextService.CurrentLanguageCode" Dense="false" Variant="Variant.Outlined" SelectedValuesChanged="OnSelectedLanguageChanged" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
        @foreach (var supportedLanguages in LocalizedField.SupportedLanguageToCode)
        {
        <MudSelectItem T="LanguageCode" Value="@supportedLanguages.Value">@supportedLanguages.Key</MudSelectItem>
        }
    </MudSelect>
</MudStack>

@code {
    IList<IBrowserFile> _files = new List<IBrowserFile>();

    protected override void OnInitialized()
    {
        ContextService.OnContextChanged += StateHasChanged;
    }

    public void Dispose()
    {
        ContextService.OnContextChanged -= StateHasChanged;
    }

    private async Task OnSelectedLanguageChanged(IEnumerable<LanguageCode> languageCodes)
    {
        await ContextService.ChangeLanguage(languageCodes.First());
    }

    private async Task OnSelectedServerChanged(IEnumerable<Server> servers)
    {
        await ContextService.ChangeServer(servers.First());
    }

    private async Task Save()
    {
        await EcoCraftDbContext.SaveChangesAsync();
    }

    private async Task CreateServer()
    {
        var parameters = new DialogParameters();
        var dialog = DialogService.Show<ServerDialog>("Create server", parameters);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            Server newServer = new Server { Name = result.Data.ToString()!, IsDefault = false};
            await ServerDbService.AddAndSave(newServer);

            UserServer userServer = new UserServer
            {
                UserId = ContextService.CurrentUser!.Id, 
                ServerId = newServer.Id, 
                IsAdmin = true, 
                Pseudo = ContextService.CurrentUser.Pseudo,
            };
            
            userServer.UserSettings.Add(new UserSetting
            {
                UserServer = userServer,
            });
            
            ContextService.CurrentUser.UserServers.Add(userServer);
            await EcoCraftDbContext.SaveChangesAsync();
            
            await ContextService.ChangeServer(newServer);
        }
    }

    private async Task EditServer()
    {
        var parameters = new DialogParameters
        {
            ["ServerName"] = ContextService.CurrentServer?.Name,
        };
        var dialog = DialogService.Show<ServerDialog>("Edit server", parameters);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            ContextService.CurrentServer!.Name = result.Data.ToString()!;
            await ServerDbService.UpdateAndSave(ContextService.CurrentServer);
        }
    }

    private async Task EditUserDialog()
    {
        var parameters = new DialogParameters
        {
            ["Pseudo"] = ContextService.CurrentUser!.Pseudo,
        };
        var dialog = DialogService.Show<UserDialog>("Create user", parameters);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            ContextService.CurrentUser.Pseudo = result.Data.ToString()!;
            await UserDbService.UpdateAndSave(ContextService.CurrentUser);
        }
    }
}