@implements IDisposable
@using ecocraft.Components.Dialog
@using ecocraft.Models
@using ecocraft.Services
@using ecocraft.Services.DbServices
@inject EcoCraftDbContext EcoCraftDbContext
@inject ContextService ContextService
@inject IDialogService DialogService
@inject ServerDbService ServerDbService
@inject UserServerDataService UserServerDataService
@inject UserDbService UserDbService
@inject ServerDataService ServerDataService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject LocalStorageService LocalStorageService
@inject LocalizationService LocalizationService

<MudStack Row AlignItems="AlignItems.Center" Justify="Justify.FlexStart" Class="pl-3">
    <MudImage Src="/assets/avatar.png" Width="52"/>
    <MudText Typo="Typo.h5">@LocalizationService.GetTranslation("Header.EcoGnome")</MudText>
    <MudLink Style="position: relative;" Color="Color.Tertiary" OnClick="() => OpenReleaseDialog()">
        <MudText Color="Color.Tertiary" Class="mt-2 ml-n1">@ReleaseVersionService.ReleaseVersions.First().Title</MudText>
        @if (_lastAcknowledgeVersion != ReleaseVersionService.ReleaseVersions.First().Date && _lastAcknowledgeVersion is not null)
        {
            <MudText Color="Color.Warning"
                     Style="position: absolute; top: -10px; left: 5px; transform: rotate(-15deg)">@LocalizationService.GetTranslation("Header.New")</MudText>
        }
    </MudLink>

    @if (!IsLoadingServer)
    {
        <MudSelect T="Server"
                   Class="select-dense server-select"
                   Value="@ContextService.CurrentServer"
                   Style="min-width:200px;padding-left:10px"
                   Label="@LocalizationService.GetTranslation("Header.MyServers")"
                   Dense="false"
                   Underline="false"
                   Variant="Variant.Outlined"
                   SelectedValuesChanged="OnSelectedServerChanged"
                   AnchorOrigin="Origin.BottomLeft"
                   TransformOrigin="Origin.TopLeft">
            @foreach (var server in ContextService.AvailableServers)
            {
                <MudSelectItem T="Server" Value="@server">@server.Name</MudSelectItem>
            }
        </MudSelect>
        <MudTooltip Text="@LocalizationService.GetTranslation("Header.AddServer")">
            <MudIconButton Icon="@MDIIcons.Outline.PlusCircle"
                           Size="Size.Medium"
                           aria-label="@LocalizationService.GetTranslation("Header.CreateServer")"
                           Color="Color.Tertiary"
                           OnClick="OpenServerDialog"/>
        </MudTooltip>
    }
</MudStack>

<MudSpacer/>

<MudStack Row AlignItems="AlignItems.Center" Justify="Justify.FlexEnd">
    @if (!IsLoadingUser)
    {
        <MudButton Variant="Variant.Filled" Style="max-width:300px;padding:10px 22px" StartIcon="@Icons.Material.Filled.AccountCircle" IconColor="Color.Tertiary"
                   Size="Size.Large" OnClick="ConfigureUser">@ContextService.CurrentUser?.Pseudo</MudButton>

        <MudSelect T="LanguageCode"
                   Class="select-dense"
                   Value="@LocalizationService.CurrentLanguageCode"
                   Dense="false"
                   Variant="Variant.Outlined"
                   SelectedValuesChanged="OnSelectedLanguageChanged"
                   AnchorOrigin="Origin.BottomLeft"
                   TransformOrigin="Origin.TopLeft">
            @foreach (var supportedLanguages in LocalizedField.SupportedLanguageToCode)
            {
                <MudSelectItem T="LanguageCode" Value="@supportedLanguages.Value">@supportedLanguages.Key</MudSelectItem>
            }
        </MudSelect>
    }
</MudStack>

@code {
    [Parameter]
    public bool IsLoadingUser { get; set; }

    [Parameter]
    public bool IsLoadingServer { get; set; }

    [Parameter]
    public bool IsDarkMode { get; set; }

    [Parameter]
    public EventCallback<bool> IsDarkModeChanged { get; set; }

    IList<IBrowserFile> _files = new List<IBrowserFile>();
    private string? _lastAcknowledgeVersion;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _lastAcknowledgeVersion = await LocalStorageService.GetItem("LastAcknowledgedVersion") ?? "";

        ContextService.OnContextChanged += StateHasChanged;
    }

    public void Dispose()
    {
        ContextService.OnContextChanged -= StateHasChanged;
    }

    private async Task OnDarkModeChanged(bool newValue)
    {
        IsDarkMode = newValue;
        await IsDarkModeChanged.InvokeAsync(newValue); // Notifie le parent
    }

    private async Task OnSelectedLanguageChanged(IEnumerable<LanguageCode> languageCodes)
    {
        await LocalizationService.SetLanguageAsync(languageCodes.First());
        ContextService.InvokeContextChanged();

    }

    private async Task OnSelectedServerChanged(IEnumerable<Server> servers)
    {
        StateHasChanged();
        await ContextService.ChangeServer(servers.First());
        Navigation.NavigateTo("/");
    }

    private async Task Save()
    {
        await EcoCraftDbContext.SaveChangesAsync();
    }

    private void OpenServerDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, NoHeader = false, CloseButton = true, FullWidth = true, MaxWidth = MaxWidth.Small };
        DialogService.ShowAsync<ServerDialog>(LocalizationService.GetTranslation("Header.ServerDialog.Title"), options);
    }

    private async Task ConfigureUser()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, NoHeader = false, CloseButton = true, FullWidth = true, MaxWidth = MaxWidth.Medium };
        await DialogService.ShowAsync<UserConfigurationDialog>(LocalizationService.GetTranslation("Header.UserConfigurationDialog.Title"), options);
    }

    private async Task OpenReleaseDialog()
    {
        _lastAcknowledgeVersion = ReleaseVersionService.ReleaseVersions.First().Date;
        await LocalStorageService.AddItem("LastAcknowledgedVersion", _lastAcknowledgeVersion);

        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth=true, MaxWidth = MaxWidth.Medium };
        await DialogService.ShowAsync<ReleaseDialog>(LocalizationService.GetTranslation("Header.ReleaseDialog.Title"), options);
    }
}
