@implements IDisposable
@using ecocraft.Components.Dialog
@using ecocraft.Extensions
@using ecocraft.Models
@using ecocraft.Services
@using ecocraft.Services.DbServices
@inject EcoCraftDbContext EcoCraftDbContext
@inject ContextService ContextService
@inject IDialogService DialogService
@inject ServerDbService ServerDbService
@inject UserServerDataService UserServerDataService
@inject UserDbService UserDbService
@inject ServerDataService ServerDataService
@inject ISnackbar Snackbar

<MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
     <!--<MudIconButton Icon="@Icons.Material.Filled.Save" Color="Color.Tertiary" aria-label="Save data" OnClick="Save" />-->

    <MudPaper Elevation="3" Class="pa-2" Style="display: flex; align-items: center; justify-content: space-between;">
        <MudIcon Icon="@Icons.Material.Filled.LightMode" />
        <MudSwitch Style="left: 14px;" Value="IsDarkMode" Color="Color.Dark" T="bool" ValueChanged="OnDarkModeChanged" />
        <MudIcon Icon="@Icons.Material.Filled.DarkMode" />
    </MudPaper>

     <MudPaper Elevation="3" Class="pa-2" Style="display: flex; align-items: center; justify-content: space-between; gap: 16px;">
         <MudTextField @bind-Value="JoinCode"
                       Class="mt-0"
                       Immediate="true"
                       Style="height: 35px"
                       Variant="Variant.Outlined" />
         <MudButton HtmlTag="label"
                    Variant="Variant.Filled"
                    Color="Color.Dark"
                    Disabled="@(String.IsNullOrEmpty(JoinCode))"
                    OnClick="OnJoinServer">
             Join Server
         </MudButton>
     </MudPaper>

     <MudPaper Elevation="3" Style="display: flex; align-items: center; justify-content: space-between; gap: 16px;">
        <MudText>@ServerDataService.JoinCode</MudText>
        <MudSelect T="Server"
                   Class="select-dense"
                   Label="Server"
                   Value="@ContextService.CurrentServer"
                   Dense="false"
                   Variant="Variant.Outlined"
                   SelectedValuesChanged="OnSelectedServerChanged"
                   AnchorOrigin="Origin.BottomLeft"
                   TransformOrigin="Origin.TopLeft">
            @foreach (var server in ContextService.AvailableServers)
            {
                <MudSelectItem T="Server" Value="@server">@server.Name</MudSelectItem>
            }
        </MudSelect>
        <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Tertiary" aria-label="Create Server" OnClick="CreateServer" />
     </MudPaper>


    <MudPaper Class="pl-3" Elevation="3" Style="display: flex; align-items: center; justify-content: space-between; gap: 16px;">
        <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
            <MudText>@ContextService.CurrentUser?.Pseudo</MudText>
            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Tertiary" aria-label="Edit User" OnClick="EditUserDialog"/>
        </MudStack>
    </MudPaper>

    <MudPaper Elevation="3" Style="display: flex; align-items: center; justify-content: space-between; gap: 16px;">
        <MudSelect T="LanguageCode"
                   Class="select-dense"
                   Label="Language"
                   Value="@ContextService.CurrentLanguageCode"
                   Dense="false"
                   Variant="Variant.Outlined"
                   SelectedValuesChanged="OnSelectedLanguageChanged"
                   AnchorOrigin="Origin.BottomLeft"
                   TransformOrigin="Origin.TopLeft">
            @foreach (var supportedLanguages in LocalizedField.SupportedLanguageToCode)
            {
                <MudSelectItem T="LanguageCode" Value="@supportedLanguages.Value">@supportedLanguages.Key</MudSelectItem>
            }
        </MudSelect>
    </MudPaper>
</MudStack>

@code {
    [Parameter]
    public bool IsDarkMode { get; set; }

    [Parameter]
    public EventCallback<bool> IsDarkModeChanged { get; set; }

    private string JoinCode { get; set; } = "";

    IList<IBrowserFile> _files = new List<IBrowserFile>();

    protected override void OnInitialized()
    {
        ContextService.OnContextChanged += StateHasChanged;
    }

    public void Dispose()
    {
        ContextService.OnContextChanged -= StateHasChanged;
    }

    private async Task OnDarkModeChanged(bool newValue)
    {
        IsDarkMode = newValue;
        await IsDarkModeChanged.InvokeAsync(newValue); // Notifie le parent
    }

    private async Task OnSelectedLanguageChanged(IEnumerable<LanguageCode> languageCodes)
    {
        await ContextService.ChangeLanguage(languageCodes.First());
    }

    private async Task OnSelectedServerChanged(IEnumerable<Server> servers)
    {
        await ContextService.ChangeServer(servers.First());
    }

    private async Task Save()
    {
        await EcoCraftDbContext.SaveChangesAsync();
    }

    private async Task CreateServer()
    {
        var parameters = new DialogParameters();
        var dialog = DialogService.Show<ServerDialog>("Create server", parameters);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            Server newServer = new Server { Name = result.Data.ToString()!, IsDefault = false};
            newServer.GenerateJoinCode();
            await ServerDbService.AddAndSave(newServer);

            await JoinServer(newServer, true);
        }
    }

    private async Task EditUserDialog()
    {
        var parameters = new DialogParameters
        {
            ["Pseudo"] = ContextService.CurrentUser!.Pseudo,
        };
        var dialog = DialogService.Show<UserDialog>("Create user", parameters);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            ContextService.CurrentUser.Pseudo = result.Data.ToString()!;
            await UserDbService.UpdateAndSave(ContextService.CurrentUser);
        }
    }

    private async Task OnJoinServer()
    {
        if (String.IsNullOrEmpty(JoinCode))
        {
            this.Snackbar.Add("You need to add a server code", Severity.Error);
            return;
        }

        var server = ServerDbService.GetByJoinCodeAsync(JoinCode).Result;
        if (server is not null)
            await JoinServer(server);
        else
        {
            this.Snackbar.Clear();
            this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
            this.Snackbar.Add("Server not found", Severity.Error);
        }
    }

    private async Task JoinServer(Server server, bool isAdmin = false)
    {
        if (ContextService.AvailableServers.Contains(server))
        {
            this.Snackbar.Clear();
            this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
            this.Snackbar.Add("You are already in this server", Severity.Warning);
            return;
        }


        UserServer userServer = new UserServer
            {
                UserId = ContextService.CurrentUser!.Id,
                ServerId = server.Id,
                IsAdmin = isAdmin,
                Pseudo = ContextService.CurrentUser.Pseudo,
            };

        userServer.UserSettings.Add(new UserSetting
            {
                UserServer = userServer,
            });

        ContextService.CurrentUser.UserServers.Add(userServer);
        await EcoCraftDbContext.SaveChangesAsync();

        await ContextService.ChangeServer(server);
    }
}
