@implements IDisposable
@using ecocraft.Components.Dialog
@using ecocraft.Extensions
@using ecocraft.Models
@using ecocraft.Services
@using ecocraft.Services.DbServices
@inject EcoCraftDbContext EcoCraftDbContext
@inject ContextService ContextService
@inject IDialogService DialogService
@inject ServerDbService ServerDbService
@inject UserServerDataService UserServerDataService
@inject UserDbService UserDbService
@inject ServerDataService ServerDataService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject LocalizationService LocalizationService

<MudStack Row AlignItems="AlignItems.Center" Justify="Justify.FlexStart">
    <MudImage Src="/assets/avatar.png" Width="52" />
    <MudText Typo="Typo.h5" Class="ml-3">Eco Gnome</MudText>

    <MudSelect  T="Server"
                Class="select-dense"
                Value="@ContextService.CurrentServer"
                Style="min-width:200px;padding-left:10px"
                Dense="false"
                Underline="false"
                Variant="Variant.Outlined"
                SelectedValuesChanged="OnSelectedServerChanged"
                AnchorOrigin="Origin.BottomLeft"
                TransformOrigin="Origin.TopLeft">
        @foreach (var server in ContextService.AvailableServers)
        {
            <MudSelectItem T="Server" Value="@server">@server.Name</MudSelectItem>
        }
    </MudSelect>
    <MudIconButton Icon="@MDIIcons.Outline.PlusCircle"
                   Size="Size.Medium"
                   aria-label="Create server"
                   Color="Color.Tertiary"
                   OnClick="CreateServer" />
</MudStack>


<MudSpacer />


<MudStack Row AlignItems="AlignItems.Center" Justify="Justify.FlexEnd">
    <MudButton Variant="Variant.Filled" Style="max-width:300px;padding:10px 22px" StartIcon="@Icons.Material.Filled.AccountCircle" IconColor="Color.Tertiary"
               Size="Size.Large" OnClick="ConfigureUser">@ContextService.CurrentUser?.Pseudo</MudButton>

    <MudSelect T="LanguageCode"
                Class="select-dense"
               Value="@LocalizationService.CurrentLanguageCode"
                Dense="false"
                Variant="Variant.Outlined"
                SelectedValuesChanged="OnSelectedLanguageChanged"
                AnchorOrigin="Origin.BottomLeft"
                TransformOrigin="Origin.TopLeft">
        @foreach (var supportedLanguages in LocalizedField.SupportedLanguageToCode)
        {
            <MudSelectItem T="LanguageCode" Value="@supportedLanguages.Value">@supportedLanguages.Key</MudSelectItem>
        }
    </MudSelect>
</MudStack>

@code {
    [Parameter]
    public bool IsDarkMode { get; set; }

    [Parameter]
    public EventCallback<bool> IsDarkModeChanged { get; set; }

    IList<IBrowserFile> _files = new List<IBrowserFile>();

    protected override void OnInitialized()
    {
        ContextService.OnContextChanged += StateHasChanged;
    }

    public void Dispose()
    {
        ContextService.OnContextChanged -= StateHasChanged;
    }

    private async Task OnDarkModeChanged(bool newValue)
    {
        IsDarkMode = newValue;
        await IsDarkModeChanged.InvokeAsync(newValue); // Notifie le parent
    }

    private async Task OnSelectedLanguageChanged(IEnumerable<LanguageCode> languageCodes)
    {
        await LocalizationService.SetLanguageAsync(languageCodes.First());
        ContextService.InvokeContextChanged();

    }

    private async Task OnSelectedServerChanged(IEnumerable<Server> servers)
    {
        await ContextService.ChangeServer(servers.First());
        Navigation.NavigateTo("/");
    }

    private async Task Save()
    {
        await EcoCraftDbContext.SaveChangesAsync();
    }

    private async Task CreateServer()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, NoHeader = false, CloseButton = true, FullWidth = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = DialogService.Show<ServerDialog>("Create or join server", options);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            if (result.Data is string[] resultArray)
            {
                var returnType = resultArray[0];
                var returnData = resultArray[1];
                if (returnType == "Create")
                {
                    Server newServer = new Server { Name = returnData!, IsDefault = false, CreationDateTime = DateTime.UtcNow };
                    newServer.GenerateJoinCode();
                    await ServerDbService.AddAndSave(newServer);

                    await ContextService.JoinServer(newServer, true);

                    await ContextService.ChangeServer(newServer);
                    Navigation.NavigateTo("/server-management");
                }else if(returnType == "Join")
                {
                    await OnJoinServer(returnData);
                }
            }
        }
    }

    private async Task OnJoinServer(string? joinCode)
    {
        if (string.IsNullOrEmpty(joinCode))
        {
            Snackbar.Add("You need to add a server code", Severity.Error);
            return;
        }

        var server = ServerDbService.GetByJoinCodeAsync(joinCode).Result;

        if (server is null) {
            Snackbar.Clear();
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
            Snackbar.Add("Server not found", Severity.Error);
            return;
        }

        if (ContextService.AvailableServers.Contains(server))
        {
            Snackbar.Clear();
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
            Snackbar.Add("You are already in this server", Severity.Warning);
            return;
        }

        await ContextService.JoinServer(server);
        await ContextService.ChangeServer(server);
    }

    private async Task ConfigureUser()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, NoHeader = false, CloseButton = true, FullWidth = true, MaxWidth = MaxWidth.Medium };
        var dialog = await DialogService.ShowAsync<UserConfigurationDialog>("User management", options);

    }
}
