@implements IDisposable
@using ecocraft.Components.Dialog
@using ecocraft.Models
@using ecocraft.Services
@inject ContextService ContextService
@inject IDialogService DialogService
@inject ServerDbService ServerDbService
@inject UserDbService UserDbService

<MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
     <MudSelect T="Server" Label="Select a server" Value="@ContextService.CurrentServer" Dense="false" Variant="Variant.Outlined" SelectedValuesChanged="OnSelectedServerChanged" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
        @foreach (var server in ContextService.AvailableServers)
        {
            <MudSelectItem T="Server" Value="@server">@server.Name</MudSelectItem>
        }
    </MudSelect>
    @if (ContextService.CurrentUserServer?.IsAdmin ?? false)
    {
        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Tertiary" aria-label="Edit Server" OnClick="EditServer"/>
    }
    <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Tertiary" aria-label="Create Server" OnClick="CreateServer"/>

    <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
        <MudText>@ContextService.CurrentUser?.Pseudo</MudText>
        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Tertiary" aria-label="Edit User" OnClick="EditUserDialog"/>
    </MudStack>
</MudStack>

    @code {
    IList<IBrowserFile> _files = new List<IBrowserFile>();

    protected override void OnInitialized()
    {
        ContextService.OnContextChanged += StateHasChanged;
    }

    public void Dispose()
    {
        ContextService.OnContextChanged -= StateHasChanged;
    }

    private async Task OnSelectedServerChanged(IEnumerable<Server> servers)
    {
        await ContextService.ChangeServer(servers.First());
    }

    private async Task CreateServer()
    {
        var parameters = new DialogParameters();
        var dialog = DialogService.Show<ServerDialog>("Créer un serveur", parameters);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            Server newServer = new Server { Name = result.Data.ToString(), IsDefault = false};
            await ServerDbService.AddAsync(newServer);

            UserServer userServer = new UserServer { UserId = ContextService.CurrentUser.Id, ServerId = newServer.Id, IsAdmin = true, Pseudo = ContextService.CurrentUser.Pseudo };
            ContextService.CurrentUser.UserServers.Add(userServer);
            await UserDbService.SaveAsync();

            
            await ContextService.ChangeServer(newServer);
        }
    }

    private async Task EditServer()
    {
        var parameters = new DialogParameters
        {
            ["ServerName"] = ContextService.CurrentServer?.Name,
        };
        var dialog = DialogService.Show<ServerDialog>("Editer un serveur", parameters);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            ContextService.CurrentServer.Name = result.Data.ToString();
            await ServerDbService.UpdateAsync(ContextService.CurrentServer);
        }
    }

    private async Task EditUserDialog()
    {
        var parameters = new DialogParameters
        {
            ["Pseudo"] = ContextService.CurrentUser.Pseudo,
        };
        var dialog = DialogService.Show<UserDialog>("Créer un utilisateur", parameters);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            ContextService.CurrentUser.Pseudo = result.Data.ToString();
            await UserDbService.UpdateAsync(ContextService.CurrentUser);
        }
    }

}